<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="VectorCANoeNETAPI.xml" data-mc-path-to-help-system="../../" data-mc-toc-path="Vector.CANoe.Runtime" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../Skins/Favicons/browserconfig.xml" />
        <meta name="Convert" content="Yes" />
        <meta name="Hierarchy" content="Sub" />
        <meta name="Language" content="DE,EN" />
        <meta name="Product" content="CANoe,CANoe4SW,vTESTstudio" />
        <meta name="VersionCANoeCANalyzerFamily" content="17 SP3" />
        <meta name="VersionvTESTstudio" content="8 SP3" />
        <meta name="Language" content="en-us" />
        <meta name="System.Keywords" content="Vector.CANoe.Runtime.Networks class" />
        <meta name="Microsoft.Help.F1" content="Vector.CANoe.Runtime.Networks" />
        <meta name="Microsoft.Help.Id" content="T:Vector.CANoe.Runtime.Networks" />
        <meta name="Description" content="Provides access to the networks of all bus types in the CANoe configuration." />
        <meta name="Microsoft.Help.ContentType" content="Reference" />
        <meta name="BrandingAware" content="true" />
        <meta name="container" content="Vector.CANoe.Runtime" />
        <meta name="file" content="607de4e9-7b4f-d956-aaf9-25596ba83e20" />
        <meta name="guid" content="607de4e9-7b4f-d956-aaf9-25596ba83e20" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png" /><title>Networks Class</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link rel="stylesheet" type="text/css" href="../styles/branding.css" />
        <link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" />
        <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
        <link rel="stylesheet" type="text/css" href="../styles/branding-Help1.css" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png" />
        <link rel="shortcut icon" href="..\icons\favicon.ico" />
        <script type="text/javascript" src="../scripts/branding.js">/*<![CDATA[*/
 
/*]]>*/</script>
        <script type="text/javascript" src="../scripts/highlight.js">/*<![CDATA[*/
 
/*]]>*/</script>
        <script src="../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
    </head>
    <body onload="OnLoad('cs')">
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../VectorCANoeNETAPI.htm#html/607de4e9-7b4f-d956-aaf9-25596ba83e20.htm">Open topic with navigation</a>
        </p>
        <div role="main" id="mc-main-content">
            <input type="hidden" id="userDataCache" class="userDataStyle" />
            <div class="pageHeader" id="PageHeader"><a name="kanchor1961"></a><a name="aanchor1960"></a>
                <MadCap:concept term="SFApiVectorCANoeRuntime" />Vector CANoe .NET API</div>
            <div class="pageBody">
                <div class="topicContent" id="TopicContent">
                    <table class="titleTable">
                        <tr>
                            <td class="titleColumn">
                                <h1>Networks Class</h1>
                            </td>
                        </tr>
                    </table><span class="introStyle"></span>
                    <div class="summary">
            Provides access to the networks of all bus types in the CANoe configuration.
            </div>
                    <div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span>
                    </div>
                    <div id="ID0RBSection" class="collapsibleSection"><a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">System<span id="LST1F775D95_0"></span><script type="text/javascript">/*<![CDATA[*/
AddLanguageSpecificTextSet("LST1F775D95_0?cs=.|vb=.|cpp=::|nu=.|fs=.");
/*]]>*/</script>Object</a>
                        <br />&#160;&#160;<span class="selflink">Vector.CANoe.Runtime<span id="LST1F775D95_1"></span><script type="text/javascript">/*<![CDATA[*/
AddLanguageSpecificTextSet("LST1F775D95_1?cs=.|vb=.|cpp=::|nu=.|fs=.");
/*]]>*/</script>Networks</span><br /></div>
                    <p /><strong>Namespace:</strong>   
  &#160;<a href="c52a109e-d9a8-3382-973a-3e3fb60dda38.htm">Vector.CANoe.Runtime</a><br /><strong>Assembly:</strong>
  &#160;Vector.CANoe.Runtime.dll<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1ECCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1ECCA','cs','1','3');return false;">C#</a></div><div id="ID1ECCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1ECCA','vb','2','3');return false;">VB</a></div><div id="ID1ECCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1ECCA','cpp','3','3');return false;">C++</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1ECCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1ECCA');return false;" title="Copy">Copy</a></div></div><div id="ID1ECCA_code_Div1" class="codeSnippetContainerCode" style="display: block;"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="identifier">Networks</span></pre></div><div id="ID1ECCA_code_Div2" class="codeSnippetContainerCode" style="display: none;"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">MustInherit</span> <span class="keyword">Class</span> <span class="identifier">Networks</span></pre></div><div id="ID1ECCA_code_Div3" class="codeSnippetContainerCode" style="display: none;"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">Networks</span> <span class="keyword">abstract</span></pre></div></div></div><script type="text/javascript">/*<![CDATA[*/
AddLanguageTabSet("ID1ECCA");
/*]]>*/</script></div><p>The <span class="selflink">Networks</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn" /><th>Name</th><th>Description</th></tr><tr data="public;static;declared;notNetfw;SHFB_VBPI_Lbl_2D2816FE;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="a3f409af-e798-27a4-ce87-c7c5967ec27e.htm">AllNetworks</a></td><td><div class="summary">
            Returns a collection of all networks in the current CANoe configuration.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn" /><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.equals#System_Object_Equals_System_Object_" target="_blank">Equals</a></td><td><div class="summary">Determines whether the specified <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a> is equal to the current <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.finalize#System_Object_Finalize" target="_blank">Finalize</a></td><td><div class="summary">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.gethashcode#System_Object_GetHashCode" target="_blank">GetHashCode</a></td><td><div class="summary">Serves as a hash function for a particular type. </div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="public;static;declared;notNetfw;SHFB_VBPI_Lbl_2D2816FE;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="8ba9722d-f42f-7aba-b3ee-8a85a44a6b24.htm">GetNetwork</a></td><td><div class="summary">
            Returns the <a href="a8a3fbeb-be10-ea75-d85b-1dab7cc002b8.htm">INetwork</a> which is assigned to <span class="parameter">channel</span> of the specified <span class="parameter">busType</span>.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.gettype#System_Object_GetType" target="_blank">GetType</a></td><td><div class="summary">Gets the <a href="https://docs.microsoft.com/dotnet/api/system.type" target="_blank">Type</a> of the current instance.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="public;static;declared;notNetfw;SHFB_VBPI_Lbl_2D2816FE;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="34a0fbce-90d7-4965-14f9-b1cc0fa74362.htm">LookupNetwork</a></td><td><div class="summary">
            Returns a <a href="a8a3fbeb-be10-ea75-d85b-1dab7cc002b8.htm">INetwork</a> representing the network which was qualified by <span class="parameter">name</span>.
            </div></td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.memberwiseclone#System_Object_MemberwiseClone" target="_blank">MemberwiseClone</a></td><td><div class="summary">Creates a shallow copy of the current <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.tostring#System_Object_ToString" target="_blank">ToString</a></td><td><div class="summary">Returns a string that represents the current object.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID5RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block;"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// The root namespace 'Networks' contains accessors for all configuration networks.</span>
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// This namespace is located in a generated assembly named after your CANoe</span>
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// configuration with the suffix '_networks.dll'</span>
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> StaticNetworkAccess()
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-comment">// You can access the network instance of 'MyNetwork'</span>
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  EthernetNetwork ethernet1 = Networks.MyNetwork.Instance;
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-comment">// You can also access its bus type and channel number</span>
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  BusType busType = Networks.MyNetwork.BusType;
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">byte</span>    channel = Networks.MyNetwork.Channel;
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-comment">// If the network is port based, also the ports have accessors</span>
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  EthernetPort ecu1Port = Networks.MyNetwork.HardwarePorts.ECU_1.Instance;
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}
<span class="highlight-lineno">16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> FindNetworksByChannel()
<span class="highlight-lineno">18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno">19</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-comment">// Find the CAN network with channel number 1</span>
<span class="highlight-lineno">20</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">byte</span> channel = <span class="highlight-number">1</span>;
<span class="highlight-lineno">21</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  CANNetwork canNetwork = Networks.CANNetworks.GetNetwork(channel);
<span class="highlight-lineno">22</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">if</span> (canNetwork != <span class="highlight-keyword">null</span>)
<span class="highlight-lineno">23</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  {
<span class="highlight-lineno">24</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Vector.Tools.Output.WriteLine(<span class="highlight-literal">"CAN network with channel number {0} has name '{1}'"</span>,
<span class="highlight-lineno">25</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>      channel, canNetwork.Name);
<span class="highlight-lineno">26</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno">27</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">else</span>
<span class="highlight-lineno">28</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  {
<span class="highlight-lineno">29</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Vector.Tools.Output.WriteLine(<span class="highlight-literal">"There is no CAN network with channel number {0}"</span>,
<span class="highlight-lineno">30</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>      channel);
<span class="highlight-lineno">31</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno">32</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">33</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-comment">// Alternative: find the same network by bus type and channel number</span>
<span class="highlight-lineno">34</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  BusType  busType    = BusType.CAN;
<span class="highlight-lineno">35</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  INetwork anyNetwork = Networks.Networks.GetNetwork(busType, channel);
<span class="highlight-lineno">36</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">if</span> (anyNetwork != <span class="highlight-keyword">null</span>)
<span class="highlight-lineno">37</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  {
<span class="highlight-lineno">38</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Vector.Tools.Output.WriteLine(<span class="highlight-literal">"Network with bus type {0} and channel number {1} has name '{2}'"</span>,
<span class="highlight-lineno">39</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>      busType, channel, anyNetwork.Name);
<span class="highlight-lineno">40</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno">41</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">else</span>
<span class="highlight-lineno">42</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  {
<span class="highlight-lineno">43</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Vector.Tools.Output.WriteLine(<span class="highlight-literal">"There is no network with bus type {0} and channel number {1}"</span>,
<span class="highlight-lineno">44</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>      busType, channel);
<span class="highlight-lineno">45</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno">46</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}
<span class="highlight-lineno">47</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">48</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> FindNetworksByName()
<span class="highlight-lineno">49</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno">50</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-comment">// Find the Ethernet network with name "Ethernet1"</span>
<span class="highlight-lineno">51</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">string</span> ethNetworkName = <span class="highlight-literal">"Ethernet1"</span>;
<span class="highlight-lineno">52</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  EthernetNetwork ethNetwork = Networks.EthernetNetworks.LookupNetwork(ethNetworkName);
<span class="highlight-lineno">53</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">if</span> (ethNetwork != <span class="highlight-keyword">null</span>)
<span class="highlight-lineno">54</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  {
<span class="highlight-lineno">55</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Vector.Tools.Output.WriteLine(<span class="highlight-literal">"Ethernet network with name '{0}' has channel number {1}"</span>,
<span class="highlight-lineno">56</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>      ethNetworkName, ethNetwork.Channel);
<span class="highlight-lineno">57</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno">58</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">else</span>
<span class="highlight-lineno">59</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  {
<span class="highlight-lineno">60</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Vector.Tools.Output.WriteLine(<span class="highlight-literal">"There is no Ethernet network with name '{0}'"</span>,
<span class="highlight-lineno">61</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>      ethNetworkName);
<span class="highlight-lineno">62</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno">63</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">64</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-comment">// Find any network with name "MyNetwork"</span>
<span class="highlight-lineno">65</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">string</span> networkName = <span class="highlight-literal">"MyNetwork"</span>;
<span class="highlight-lineno">66</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  INetwork anyNetwork = Networks.Networks.LookupNetwork(networkName);
<span class="highlight-lineno">67</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">if</span> (anyNetwork != <span class="highlight-keyword">null</span>)
<span class="highlight-lineno">68</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  {
<span class="highlight-lineno">69</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Vector.Tools.Output.WriteLine(<span class="highlight-literal">"Network with name '{0}' has BusType {1} and channel number {2}"</span>,
<span class="highlight-lineno">70</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>      networkName, anyNetwork.BusType, anyNetwork.Channel);
<span class="highlight-lineno">71</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno">72</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">else</span>
<span class="highlight-lineno">73</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  {
<span class="highlight-lineno">74</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Vector.Tools.Output.WriteLine(<span class="highlight-literal">"There is no network with name '{0}'"</span>,
<span class="highlight-lineno">75</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>      networkName);
<span class="highlight-lineno">76</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno">77</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}
<span class="highlight-lineno">78</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">79</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> IterateOverNetworks()
<span class="highlight-lineno">80</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno">81</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-comment">// You can iterate over all CAN networks</span>
<span class="highlight-lineno">82</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  Vector.Tools.Output.WriteLine(<span class="highlight-literal">"CAN networks:"</span>);
<span class="highlight-lineno">83</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">foreach</span> (CANNetwork canNetwork <span class="highlight-keyword">in</span> Networks.CANNetworks.Networks)
<span class="highlight-lineno">84</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  {
<span class="highlight-lineno">85</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Vector.Tools.Output.WriteLine(<span class="highlight-literal">"  {0}. '{1}'"</span>,
<span class="highlight-lineno">86</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>      canNetwork.Channel, canNetwork.Name);
<span class="highlight-lineno">87</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno">88</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">89</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-comment">// You can also iterate over all configuration networks, regardless of their bus type</span>
<span class="highlight-lineno">90</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  Vector.Tools.Output.WriteLine(<span class="highlight-literal">"All networks:"</span>);
<span class="highlight-lineno">91</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">foreach</span> (INetwork network <span class="highlight-keyword">in</span> Networks.Networks.AllNetworks)
<span class="highlight-lineno">92</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  {
<span class="highlight-lineno">93</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Vector.Tools.Output.WriteLine(<span class="highlight-literal">"  {0} {1} : '{2}'"</span>,
<span class="highlight-lineno">94</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>      network.BusType, network.Channel, network.Name);
<span class="highlight-lineno">95</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno">96</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">/*<![CDATA[*/
AddLanguageTabSet("ID1EAAABA");
/*]]>*/</script></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Version Information</span></div><div id="ID6RBSection" class="collapsibleSection"><h4 class="subHeading" />Supported from: 13.0 SP2<br /></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID7RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="c52a109e-d9a8-3382-973a-3e3fb60dda38.htm">Vector.CANoe.Runtime Namespace</a></div></div></div>
            </div>
        </div>
        <div id="pageFooter" class="pageFooter"> © Vector Informatik GmbH — <span class="mc-variable Vector.BuildTime variable">2023-09-26T19:08:13</span></div>
    </body>
</html>