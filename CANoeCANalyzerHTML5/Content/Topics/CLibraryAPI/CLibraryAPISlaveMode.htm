<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="CANoeCANalyzer.xml" data-mc-path-to-help-system="../../../" data-mc-conditions="vConditions.CANalyzerExclude" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../Skins/Favicons/browserconfig.xml" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../Skins/Favicons/favicon-16x16.png" /><title>CANoe in Slave Mode</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/vTableMasterPageHeader.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../Resources/Stylesheets/vStylesheet.css" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.expand-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.remove-highlight-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.collapse-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.needs-pie
{
	behavior: url('../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link rel="apple-touch-icon" sizes="180x180" href="../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../Skins/Favicons/favicon-16x16.png" />
        <script src="../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapGlobal.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapDom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapUtilities.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapXhr.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTextEffects.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapSlideshow.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapMessageBus.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapMessageBus.CrossFrame.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapDefault.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapMediaQueries.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapAccessibility.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapHelpSystem.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapAliasFile.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTopicFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapFeedbackHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapSkinHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.MiniToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.SideMenu.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapIndex.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapGlossary.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapParser.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapSearch.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapNavigateTopics.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapLms.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapELearning.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTopic.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapMicroContentComponent.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapSearchHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTopicElements.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTriPane.js" type="text/javascript" defer="defer">
        </script>
        <script type="text/jscript" src="../../Resources/vScripts/SyntaxHighlighting.js">
        </script>
        <script type="text/jscript" src="../../Resources/vScripts/TabSwitch.js">
        </script>
        <script type="text/javascript" src="../../Resources/vScripts/Vector.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../CANoeCANalyzer.htm#Topics/CLibraryAPI/CLibraryAPISlaveMode.htm">Open topic with navigation</a>
        </p>
        <div class="Body">
            <div role="main" id="mc-main-content">
                <p class="StructurePath"><a href="../CANoeCANalyzer/CANoeCANalyzer.htm" class="StructurePath" data-mc-conditions="vConditions.CANalyzerExclude,vConditions.CANoe4ServerExcluded,vConditions.CANoe4SWExcluded,vConditions.TestDataEditorExcluded,vConditions.vTESTstudioExcluded,vConditions.TestUnitRunnerExcluded,vConditions.CANoeNMExcluded"><img src="../../Resources/vImages/vToolIcons/CANoe_Icon16.png" alt="" />&#160;CANoe</a> » <a href="CLibraryAPI.htm" class="StructurePath MCXref xref xrefStructurePath">C Library API</a><br /><a href="../SampConf/Programming/CLibrary/CLibraryOverview.htm" class="StructurePath">Sample Configurations</a> » <span class="mc-variable System.Title variable">CANoe in Slave Mode</span></p>
                <h1><a name="kanchor3115"></a><span class="mc-variable System.Title variable">CANoe in Slave Mode</span>
                </h1>
                <p class="MenuPath">&#160;</p>
                <p class="AutoSearchFilterConcepts"><a name="aanchor4055"></a>
                    <MadCap:concept term="SFCLibraryAPI" />
                </p>
                <div>
                    <h2 class="SectionMain">Overview</h2>
                    <p>The C-Library can be used to interface <span class="Product">CANoe</span> in slave mode. The example consists of a <span class="Product">CANoe</span> configuration and sample code. In the following sections the configuration will be described as well as the sample code and how it is used within <span class="Product">CANoe</span>.</p>
                </div>
                <div>
                    <h2 class="SectionMain"><span class="Product">CANoe</span> Configuration</h2>
                    <p>The configuration is located under <span class="SourceCode">Programming\C_Library\Examples\SlaveMode\Configuration\CANoeSlaveMode.cfg</span> in the sample configurations directory (<a href="javascript:startCANoeLauncher('&quot;SAMPLES:\\Programming\\C_Library\\Examples\\SlaveMode&quot;')" class="ExecuteLink">Open Folder</a>).</p>
                    <p>The configuration features two CAN buses although only channel CAN 1 is used. Attached to the CAN bus is an Interactive Generator which generates CAN messages. Every 15 ms a CAN message with ID 0x101, and every 10 ms an Extended CAN message with ID 0x102x is sent on CAN 1.</p>
                    <p>The measurement runs on a simulated CAN bus. <span class="Product">CANoe</span> is configured to run in a so-called slave mode . That is, the simulation time must be set from outside of <span class="Product">CANoe</span>.</p>
                </div>
                <div>
                    <h2 class="SectionMain">Running the Example</h2>
                    <p>The example demonstrates how <span class="Product">CANoe</span> can be triggered from an external program. The triggers are used to showcase how the simulation time can be incremented and how CAN messages can be fed into <span class="Product">CANoe</span>.</p>
                    <p>To simulate the triggers from external programs, the executable <span class="SourceCode">TriggerCANoe.exe</span> is provided in directory <span class="SourceCode">Programming\C_Library\Examples\SlaveMode\Configuration\Exec32</span> with two different options:</p>
                    <ul>
                        <li>
                            <p class="ListItem"><![CDATA[	]]><span class="SourceCode">TriggerCANoe.exe message</span> to notify <span class="Product">CANoe</span> about a <span class="bold">new</span> CAN message</p>
                        </li>
                        <li>
                            <p class="ListItem"><![CDATA[	]]><span class="SourceCode">TriggerCANoe.exe time</span> to increment the simulation time of <span class="Product">CANoe</span></p>
                        </li>
                    </ul>
                    <p>The program triggers an event which is received by the C Library <span class="SourceCode">CANoeSlave.dll</span>. The source code of the program is also included.</p>
                    <p>To see everything in action, load the configuration in <span class="Product">CANoe</span> and start the measurement. You will not see anything yet (both <a href="../CANoeCANalyzer/Windows/Write/WriteWindow.htm">Write Window</a> and <a href="../CANoeCANalyzer/Windows/Trace/TraceWindow.htm">Trace Window</a>), as the simulation is waiting for an external trigger to increase its simulation time. Now, open a <span class="SourceCode">cmd.exe</span> inside the directory <span class="SourceCode">C_Library\Examples\SlaveMode\Configuration\Exec32</span> and run the command <span class="SourceCode">TriggerCANoe.exe time</span> once. This creates a <span class="Product">Windows</span> event, and the DLL receives that event and increases the simulation time by 100 milliseconds in one step. As a result, messages are generated by the Interactive Generator. More precisely, 9 messages with ID 0x102x and 6 messages with ID 0x101 (not all messages shown in screenshot):</p>
                    <p>
                        <img src="../../Resources/Images/CLibraryAPI/TraceCAN1.png" />
                    </p>
                    <p>Next, trigger a message creation by running the executable <span class="SourceCode">TriggerCANoe.exe message</span>. The event is received but no messages are put on the CAN bus yet because the simulation time hasn’t increased. Thus, call <span class="SourceCode">TriggerCANoe.exe time</span> once more. Now two things happened:</p>
                    <ol>
                        <li value="1">
                            <p class="ListItem">A message with ID 0x234 has been generated by the C Library and put on the CAN bus around timestamp 101 milliseconds.</p>
                        </li>
                        <li value="2">
                            <p class="ListItem">The Write Window has been updated with strings from the C Library example</p>
                        </li>
                    </ol>
                    <p>
                        <img src="../../Resources/Images/CLibraryAPI/TraceCAN1Write.png" />
                    </p>
                </div>
                <div>
                    <h2 class="SectionMain">About Multi-Threading</h2>
                    <p>The basic working principle of the C API is that you implement event handler functions, register those, and <span class="Product">CANoe</span> calls these functions whenever the registered event occurs. All functionality that interacts with <span class="Product">CANoe</span>, e.g., generating a message, or setting a timer, should be put into one of those handlers. The only exception is the incrementation of the simulation time (<a href="Functions/CAPLfunctioncclIncrementTimerBase.htm" class="SourceCode">cclIncrementTimerBase</a>), which must not be called from one of the handlers. The reason is that <span class="Product">CANoe</span> is running in slave mode and the event handlers will only be called when the simulation time elapses (e.g., in case of a timer event).</p>
                    <p>In the example, a thread is created which runs the function <span class="SourceCode">WaitForEvent</span>. This function waits for an event (new message or increment time) which is signaled through the executable <span class="SourceCode">TriggerCANoe.exe</span>. Depending on the event, either the simulation time is incremented (<a href="Functions/CAPLfunctioncclIncrementTimerBase.htm">cclIncrementTimerBase(gDeltaIncrementTime, 1);</a>) or a message is put into a queue for later processing (<span class="SourceCode">gMessageQueue.push_back(msg);</span>). This queue is required to decouple receiving data on the event thread from processing the data in <span class="Product">CANoe</span>. <span class="Product">CANoe</span> will pick up the data when the handler function <span class="SourceCode">OnMessageQueueTimer</span> is called.</p>
                </div>
                <div>
                    <h2 class="SectionMain">Code Walk Through</h2>
                    <p>Not all functions  will be described in detail in this document.</p>
                    <p>Part of the code is different for Windows and <span class="Product">Linux</span>. Only <span class="Product">Windows</span> code will be covered here.</p>
                    <p>Whenever the DLL is loaded, the function <a href="Functions/CAPLfunctioncclOnDllLoad.htm" class="SourceCode">cclOnDllLoad</a> is called. Inside this function these handlers are registered:</p>
                    <ul>
                        <li>
                            <p class="ListItem"><span class="SourceCode">OnMeasurementPreStart</span> which is called before the measurement starts.</p>
                        </li>
                        <li>
                            <p class="ListItem"><span class="SourceCode">OnMeasurementStart</span> which is called when the measurement is started</p>
                        </li>
                        <li>
                            <p class="ListItem"><span class="SourceCode">OnMeasurementStop</span> which is called when the measurement is stopped.</p>
                        </li>
                        <li>
                            <p class="ListItem"><span class="SourceCode">OnDllUnload</span> which is called when the DLL is unloaded.</p>
                        </li>
                    </ul>
                    <div>
                        <h2>OnMeasurementPreStart</h2>
                        <p>In the handler <span class="SourceCode">OnMeasurementPreStart</span> two timers are created. One is used to put messages into <span class="Product">CANoe</span>:</p>
                        <p class="SourceCode">gQueueTimerID = cclTimerCreate(&amp;OnMessageQueueTimer);</p>
                        <p>and the second one is used to get notified when the increment of time has finished:</p>
                        <p class="SourceCode">gIncrementTimerID = cclTimerCreate(&amp;OnTimerIncrementTimer);</p>
                        <p>Also, a handler for all CAN messages is registered:</p>
                        <p class="SourceCode">rc = cclCanSetMessageHandler(1, CCL_CAN_ALLMESSAGES, &amp;OnCanMessageReceived);</p>
                        <p>The generic ID CCL_CAN_ALLMESSAGES is used to capture all CAN IDs.</p>
                        <p>Finally, the event thread is started (<span class="SourceCode">StartEventThread();</span>).</p>
                    </div>
                    <div>
                        <h2>OnMeasurementStart</h2>
                        <p>In the handler <span class="SourceCode">OnMeasurementStart</span> the message queue timer is configured to fire after 1 nanosecond:</p>
                        <p class="SourceCode">rc = cclTimerSet(gQueueTimerID, 1);</p>
                        <p>This assures that the <span class="SourceCode">OnMessageQueueTimer</span> is called at the earliest possible time (<span class="Product">CANoe</span>’s clock works with nanosecond resolution) every time the simulation time is increased from the event-thread.</p>
                        <p>The second timer is configured to fire when the requested simulation increment is reached:</p>
                        <p class="SourceCode">rc = cclTimerSet(gIncrementTimerID, gDeltaIncrementTime);</p>
                        <p>In the handler <span class="SourceCode">OnMeasurementStop</span> the event thread is stopped.</p>
                        <p>The handler <span class="SourceCode">OnCanMessageReceived</span> is called with a pointer to the currently available CAN message. For demonstration purposes, the ID is retrieved and printed to the Write Window of <span class="Product">CANoe</span>.</p>
                        <p>The handler <span class="SourceCode">OnMessageQueueTimer</span> is signaled when the configured timespan has elapsed (simulation time), in this example after 1 nanosecond has passed. Inside this function, the message queue is checked for new data (while (!gMessageQueue.empty())) and the messages are placed on the CAN bus of <span class="Product">CANoe</span>:</p>
                        <p class="SourceCode">rc = cclCanOutputMessage(channel, id, flags, dataLength, data);</p>
                        <p>For sure, the message queue must be protected with a mutex (gMutex).</p>
                        <p>Since a timer is always a one-shot timer, it must be activated again:</p>
                        <p class="SourceCode">rc = cclTimerSet(gQueueTimerID, gDeltaIncrementTime);</p>
                        <p>This time we use the same time span as is used to increment the simulation time from the event thread. Since the initial value was 1 (nanosecond) the handler will always be called directly after the simulation time is incremented.</p>
                        <p>In general, time is always specified in nanoseconds and there exist functions to convert from human-readable times, e.g. <span class="SourceCode">cclTimeMilliseconds(100)</span> to specify 100 milliseconds.</p>
                    </div>
                </div>
                <div>
                    <h2 class="SectionMain">Timing and Execution Order</h2>
                    <p>The following figure visualizes the timing behavior. The simulation time starts at time point <span class="bold">t=0</span> and waits until it is increased through the event thread. This  activates the <span class="Product">CANoe</span> main thread and at time point t=1 the handler <span class="SourceCode">OnMessageQueueTimer</span> is called. Then, all other nodes of the simulation are triggered and may produce messages and events (not shown). Finally, the handler <span class="SourceCode">OnTimerIncrementTimer</span> is called.</p>
                    <p>
                        <img src="../../Resources/Images/CLibraryAPI/TimingBehavior.png" />
                    </p>
                </div>
                <p class="LinkList"><a href="CLibraryAPIExampleCAN.htm" class="LinkList">Example: CAN</a>&#160;&#160;•&#160;&#160;<a href="CLibraryAPIExampleEthernet.htm" class="LinkList">Example: Ethernet</a>&#160;&#160;•&#160;&#160;<a href="CLibraryAPIExampleLIN.htm" class="LinkList">Example: LIN</a>&#160;&#160;•&#160;&#160;<a href="CLibraryAPIExampleGlobalEventHandler.htm" class="LinkList">Example: GlobalEventHandler</a>&#160;&#160;•&#160;&#160;<a href="CLibraryAPIExampleSystemVariables.htm" class="LinkList">Example: SystemVariables</a>&#160;&#160;•&#160;&#160;<a href="CLibraryAPIExampleTimer.htm" class="LinkList">Example: Timer</a></p>
                <p class="LinkList">&#160;</p>
            </div>
        </div>
        <div class="Footer">
            <div class="FooterWhite">
                <table class="FooterWhite" style="border-collapse: collapse;margin-left: auto;margin-right: auto;">
                    <col style="width: 70px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col style="width: 16px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col />
                    <tbody>
                        <tr>
                            <td>
                                <div class="buttons popup-container clearfix topicToolbarProxy topicToolbarProxyFooter _Skins_HTML5TopicToolbar mc-component nocontent">
                                    <div class="button-group-container-left">
                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                            <div>
                                                <div role="img" class="button-icon-wrapper" aria-label="Expand all">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                        <button class="button needs-pie remove-highlight-button" title="Remove Highlights">
                                            <div>
                                                <div role="img" class="button-icon-wrapper">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <p class="vec_BuildInfo"><a href="../Shared/HowToUseOnlineHelp.htm" title="Tips for using the help" alt="Tips for using the help"><img src="../../Resources/vImages/vBackstage/vHelpInfo.png" /></a>
                                </p>
                            </td>
                            <td>
                                <p class="vec_BuildInfo" style="text-align: right;"><span class="mc-variable Vector.BuildTime variable">2023-09-26T19:49:32</span>
                                </p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <table style="width: 100%;border-collapse: separate;border-spacing: 3px 0px;margin-left: auto;margin-right: auto;caption-side: top;">
                <col />
                <col />
                <col />
                <col data-mc-conditions="vConditions.HTML5Link" />
                <tbody>
                    <tr>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;">
                            <p class="vec_Footer">©&#160;Vector Informatik GmbH</p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;text-align: right;">
                            <p class="vec_FooterBold">
                                <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded,vConditions.TestDataEditorExcluded">CANoe</MadCap:conditionalText> Version <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded">17 SP3</MadCap:conditionalText></p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="../Shared/ContactCopyrightLicense.htm" class="vec_Footer MCXref xref xrefvec_Footer">Contact/Copyright/License</a>
                            </p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="https://www.vector.com/int/en/company/get-info/privacy-policy/" target="_blank" class="vec_Footer">Data Privacy Notice</a>
                            </p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>
</html>