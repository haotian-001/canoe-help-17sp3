<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="CANoeCANalyzer.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../../Skins/Favicons/browserconfig.xml" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../Skins/Favicons/favicon-16x16.png" /><title>Distributed Objects (vCDL)</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Resources/Stylesheets/vTableMasterPageHeader.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../Resources/Stylesheets/vStylesheet.css" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.expand-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.remove-highlight-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.collapse-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.needs-pie
{
	behavior: url('../../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../../Resources/Stylesheets/vTableSymbol.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../Resources/Stylesheets/vTable.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../Skins/Favicons/favicon-16x16.png" />
        <script src="../../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapGlobal.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapDom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapUtilities.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapXhr.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTextEffects.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSlideshow.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMessageBus.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMessageBus.CrossFrame.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapDefault.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMediaQueries.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAccessibility.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapHelpSystem.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAliasFile.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopicFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapFeedbackHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSkinHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.MiniToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.SideMenu.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapIndex.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapGlossary.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapParser.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSearch.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapNavigateTopics.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapLms.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapELearning.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopic.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMicroContentComponent.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSearchHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopicElements.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTriPane.js" type="text/javascript" defer="defer">
        </script>
        <script type="text/jscript" src="../../../Resources/vScripts/SyntaxHighlighting.js">
        </script>
        <script type="text/jscript" src="../../../Resources/vScripts/TabSwitch.js">
        </script>
        <script type="text/javascript" src="../../../Resources/vScripts/Vector.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../CANoeCANalyzer.htm#Topics/vCDL/Language/vCDLDistributedObjects.htm">Open topic with navigation</a>
        </p>
        <div class="Body">
            <div role="main" id="mc-main-content">
                <div>
                    <p class="StructurePath"><a href="../../CANoeCANalyzer/CANoeCANalyzer.htm" class="StructurePath" data-mc-conditions="vConditions.CANalyzerExclude,vConditions.CANoe4ServerExcluded,vConditions.CANoe4SWExcluded,vConditions.TestDataEditorExcluded,vConditions.vTESTstudioExcluded,vConditions.TestUnitRunnerExcluded,vConditions.CANoeNMExcluded"><img src="../../../Resources/vImages/vToolIcons/CANoe_Icon16.png" alt="" />&#160;CANoe</a> » <a href="../vCDLStartpage.htm" class="StructurePath">vCDL</a> » <a href="../Concept/vCDLConcept.htm" class="StructurePath">vCDL 1.4</a> » <a href="vCDLLanguage.htm" class="StructurePath">Language</a> » Distributed Objects</p>
                    <h1>Distributed Objects</h1>
                    <p class="MenuPath">&#160;</p>
                    <p class="AutoSearchFilterConcepts"><a name="aanchor3979"></a>
                        <MadCap:concept term="SFvCDL" />
                    </p>
                    <p class="IndexConcept"><a name="kanchor3070"></a>
                    </p>
                </div>
                <p>Distributed objects (DOs) can be declared in two ways: </p>
                <ul>
                    <li>The <span class="bold">variable-like declaration</span> requires no additional keyword, but the DO interface needs to be declared explicitly.</li>
                    <li>The <span class="bold">communication object (CO) like declaration</span> starts with the keyword <span class="CodeKeyword">object</span> and allows the DO <a href="vCDLServiceInterfaces.htm">interface</a> to be declared implicitly within the body of the DO declaration. <MadCap:conditionalText data-mc-conditions="vConditions.CANoe4SWExcluded">In contrast to services a</MadCap:conditionalText> DO can implement multiple DO interfaces which are listed comma separated behind the colon. DOs are always declared on namespace level.</li>
                </ul>
                <p class="SourceCode"><span class="CodeKeyword">interface</span> DOInterface<br />{<br />&#160;&#160;<span class="CodeKeyword">internal data</span> Struct Member;<br />}<br /><br /><span class="CodeComment">// Recommended: Variable-like declaration</span><br /><br />DOInterface&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DistributedObject;<br /><span class="CodeKeyword">reverse</span>&lt;DOInterface&gt;&#160;&#160;ReversedDO;<br /><br />[<span class="CodeAttributeKey_Namespace">virtualNetwork</span>=Network1];<br /><span class="CodeKeyword">refine</span> ReversedDO.Member;<br /><br /><span class="CodeComment">// Not recommended: CO-like declaration</span><br /><br /><span class="CodeKeyword">object</span> Inlined<br />{<br />&#160;&#160;<span class="CodeKeyword">internal data</span> &#160;&#160;Struct &#160;&#160;&#160;&#160;&#160;DataMember;<br />&#160;&#160;<span class="CodeKeyword">provided method</span> Prototype &#160;&#160;MethodMember;<br />&#160;&#160;<span class="CodeKeyword">provided</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="CodeDataType">uint48</span> &#160;&#160;&#160;&#160;&#160;InlinedMethod(<span class="CodeDataType">float</span> Param);<br />&#160;&#160;<span class="CodeKeyword">consumed event</span> &#160;<span class="CodeDataType">void</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;EventMember;<br />&#160;&#160;<span class="CodeKeyword">consumed field</span> &#160;<span class="CodeDataType">list&lt;int32&gt;</span> FieldMember { <span class="CodeDataType">get</span>; <span class="CodeDataType">notify</span>; }<br />&#160;&#160;<span class="CodeKeyword">embedded</span> DOInterface&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;EmbeddedInstance;<br />&#160;&#160;<span class="CodeKeyword">embedded reference</span>&lt;DOInterface&gt; EmbeddedReference;<br />&#160;&#160;<span class="CodeKeyword">embedded</span> InlinedEmbeddedMember<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<span class="CodeKeyword">internal data int32</span> EmbeddedDataMember;<br />&#160;&#160;}<br />&#160;&#160;<span class="CodeKeyword">embedded</span> <span class="CodeDataType">array</span>&lt;DOInterface, <span class="CodeNumericalLiteral">6</span>&gt; EmbeddedMemberArray;<br />&#160;&#160;<span class="CodeKeyword">embedded</span> <span class="CodeDataType">list</span>&lt;DOInterface&gt; EmbeddedMemberListUnbounded;<br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">minSize</span>=<span class="CodeNumericalLiteral">5</span>, <span class="CodeAttributeKey_Namespace">initialSize</span>=<span class="CodeNumericalLiteral">7</span>];<br />&#160;&#160;<span class="CodeKeyword">embedded</span> <span class="CodeDataType">list</span>&lt;DOInterface, <span class="CodeNumericalLiteral">10</span>&gt; EmbeddedMemberListBounded;<br />}<br /><br /><br /><span class="CodeKeyword">object</span> ExplicitDO : DOInterface;<br /><br /><span class="CodeKeyword">object</span> ExplicitReversed : <span class="CodeKeyword">reverse</span>&lt;DOInterface&gt;<br />{<br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">virtualNetwork</span>=Network1];<br />&#160;&#160;<span class="CodeKeyword">refine</span> Member;<br />}</p>
                <p>Despite the seemingly benefits of the CO-like declaration (less code and multiple interfaces) we highly recommend using the variable-like declaration, especially when setting up new projects. It forces declaring DO interfaces explicitly. This way they have names through which they can be reused later in CANoe. Although inlined DO interfaces seem less to write, extending the project later requires more work as inlined DO interfaces cannot be used anywhere else and must be made explicit first. It is also not possible to refine inlined DO interfaces, e.g. to configure bindings and virtual networks. If a DO implements multiple DO interfaces, the latter are aggregated into a new DO interface which is then used by the DO. Again, this DO interface has a generated name and cannot be accessed within vCDL.</p>
                <p>Besides single DOs, vCDL also allows the definition of DO references, DO containers, and DO reference containers. These can only be declared variable-like, another reason to use the variable-like declaration for single DOs as well, so the overall configuration keeps a homogeneous look.</p>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Example: Defining DOs and DO references, both single and as containers</p>
                                    <p class="TableSourceCode"><span class="CodeComment">// Single DO</span>
                                        <br />DOInterface SingleDO;<br /><br /><span class="CodeComment">// DO reference using 'SingleDO' as initial value</span><br /><span class="CodeKeyword">reference</span>&lt;DOInterface&gt; DOReference = SingleDO;<br /><br /><span class="CodeComment">// Longer types can be given an alias</span><br /><span class="CodeKeyword">typedef</span> DORefType = <span class="CodeKeyword">reference</span>&lt;DOInterface&gt;;<br /><br /><span class="CodeComment">// DO instance container minimum, maximum and initial size</span><br />[<span class="CodeAttributeKey_Namespace">minSize</span>=<span class="CodeNumericalLiteral">10</span>, <span class="CodeAttributeKey_Namespace">initialSize</span>=<span class="CodeNumericalLiteral">15</span>]<br /><span class="CodeDataType">list</span>&lt;DORefType, <span class="CodeNumericalLiteral">20</span>&gt; DOInstanceContainer;<br /><br /><span class="CodeComment">// 2-dimensional DO reference container (array) with size 10x10 of reversed 'DOInterface'</span><br /><span class="CodeDataType">array</span>&lt;<span class="CodeDataType">array</span>&lt;<span class="CodeKeyword">reference</span>&lt;<span class="CodeKeyword">reverse</span>&lt;DOInterface&gt;&gt;, <span class="CodeNumericalLiteral">10</span>&gt;, <span class="CodeNumericalLiteral">10</span>&gt; DORefContainer;</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div>
                    <h2 class="SectionMain">Distributed Object Members</h2>
                    <p>
                        <MadCap:conditionalText data-mc-conditions="vConditions.CANoe4SWExcluded">As shown in the example above, distributed objects share some member types with services (events, fields, methods) while having some exclusively (data and embedded members). </MadCap:conditionalText>Except for embedded members all member types need to be preceded by a direction which can be either <span class="CodeKeyword">provided</span>, <span class="CodeKeyword">consumed</span> or <span class="CodeKeyword">internal</span>.</p>
                </div>
                <div>
                    <h2 class="SectionMain">DO References</h2>
                    <p>DO references are declared on namespace level the same way as embedded references are declared within DO interfaces. Using the assignment operator, the initial DO can be set, to which the reference points at the start of measurement.</p>
                </div>
                <div>
                    <h2 class="SectionMain">DO Containers</h2>
                    <p>Both DOs and DO references can be packed into containers of one or more dimensions. Array and list containers can be nested into each other without any restrictions. Note that array containers always have a fixed size, which must be specified in vCDL, whereas list containers may or may not have a maximum size specified. <a href="vCDLListDataTypes.htm">List containers</a> can also have a minimum size and an initial size which both are defined via attributes. This works as well for nested list containers:</p>
                    <p class="SourceCode"><span class="CodeDataType">array</span>&lt;[<span class="CodeAttributeKey_Namespace">minSize</span>=<span class="CodeNumericalLiteral">5</span>] <span class="CodeDataType">list</span>&lt;DOInterface&gt; [<span class="CodeAttributeKey_Namespace">initialSize</span>=<span class="CodeNumericalLiteral">8</span>], <span class="CodeNumericalLiteral">10</span>&gt; DOContainer;</p>
                </div>
                <div>
                    <h2 class="SectionMain">Nesting Order</h2>
                    <p>Combining DO containers and DO references can yield complex syntactic constructs as demonstrated by the examples above. The order, in which <span class="CodeKeyword">array</span>, <span class="CodeKeyword">list</span>, <span class="CodeKeyword">reference</span> and <span class="CodeKeyword">reverse</span> are nested, is crucial. Always stick to following rule of thumb:</p>
                    <p class="SourceCode">container&lt; reference&lt; reverse&lt; interface &gt; &gt; &gt;</p>
                    <p>The outer container represents both arrays and lists which can be nested in any order. Also keep the following rules in mind:</p>
                    <ul>
                        <li>Only interfaces and reversed interfaces can be reversed.</li>
                        <li>A reference can only be built based on a (reversed) interface, not based on containers.</li>
                        <li>Container types (array, list) can enclose both references and (reversed) interfaces.</li>
                    </ul>
                    <p><span class="bold">As a reminder</span>: A DO reference container is a container of DO references, not a reference to a container of DOs.</p>
                </div>
                <div>
                    <h2 class="SectionMain">Typedefs</h2>
                    <p>As previously shown in the example it is possible to assign names to DO interfaces, reversed interfaces, reference types and container types using the <span class="CodeKeyword">typedef</span> keyword. This turns out useful when either dealing with long type declarations such as nested containers or to assign a new name to a DO interface that suits better within the current context. However, based on what type the typedef points to (interface, reference or container) the result you see in <span class="Product">CANoe</span> varies:</p>
                    <ul>
                        <li><span class="bold">DO interfaces</span>
                            <br />The typedef is transparent meaning that the new name will not be visible in <span class="Product">CANoe</span>. The reason for this behavior is that both the original interface and the typedef can be used interchangeably within vCDL as they actually refer to the same interface in <span class="Product">CANoe</span>. If the new interface name shall exist also in <span class="Product">CANoe</span>, declare an empty interface (empty body or semicolon at the end) inheriting from the original interface.</li>
                        <li><span class="bold">Reversed DO interfaces</span>
                            <br />Having a typedef to a reversed DO interface yields a new interface in <span class="Product">CANoe</span> using the same technique described above as a workaround for DO interfaces by creating a new empty interface that inherits from the reversed original interface. However, this means that the reversed original interface and the typedef interface cannot be used interchangeably. Multiple typedefs to the same reversed interface are also incompatibly to each other.</li>
                        <li><span class="bold">DO reference and container types</span>
                            <br />These types always yield a new type in <span class="Product">CANoe</span> with the name given by the typedef.</li>
                    </ul>
                    <p>The asymmetry between typedefs to interfaces and typedefs to reversed interfaces is based on assumptions on how typedefs will be used by developers and what the expected behavior in the respective situation might be.</p>
                </div>
                <div>
                    <h2 class="SectionMain"><a name="BMInitialValues" id="BMInitialValues"></a>Initial Values</h2>
                    <p>Initial values are assigned to DO members and DO references at the start of measurement. They can be set for events, fields, methods, their parameters, data- and reference members, as well as for stand-alone DO references. This is done via refinements for both distributed objects and DO containers. Every expression can serve as initial value preceded by the assignment operator. It is also possible to initialize DO members with complex types such as arrays and structs using respective <a href="vCDLLiterals.htm">literals</a>. For methods the terminology is slightly different as they do not have initial values. Instead they are referred to as default return values and default out values for parameters. There are some special cases:</p>
                    <ul>
                        <li>Only <span class="bold">internal</span> and <span class="bold">provided</span> methods with a non-void return value can have a default return value.</li>
                        <li>Only <span class="bold">out</span> and <span class="bold">inout</span> parameters can have a default out value.</li>
                    </ul>
                    <div>
                        <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                            <col class="TableStyle-vTableSymbol-Column-Column1" />
                            <col class="TableStyle-vTableSymbol-Column-Column2" />
                            <tbody>
                                <tr>
                                    <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                        <p class="Table">
                                            <img src="../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                        </p>
                                    </td>
                                    <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                        <p class="TableSymbolHead">Example: Setting initial values at the DO interface definition</p>
                                        <p class="SourceCode"><span class="CodeKeyword">interface</span> DOInterface<br />{<br />&#160;&#160;<span class="CodeKeyword">consumed data</span>&#160;&#160;<span class="CodeDataType">int32</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DataMember &#160;= <span class="CodeNumericalLiteral">78</span>;<br />&#160;&#160;<span class="CodeKeyword">provided event</span> <span class="CodeDataType">bool</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;EventMember = <span class="CodeKeyword">false</span>;<br />&#160;&#160;<span class="CodeKeyword">provided field</span> <span class="CodeDataType">array</span>&lt;<span class="CodeKeyword">string</span>, <span class="CodeNumericalLiteral">3</span>&gt; FieldMember = { <span class="CodeStringLiteral">"1st"</span>, <span class="CodeStringLiteral">"2nd"</span>, <span class="CodeStringLiteral">"3rd"</span> }; <span class="CodeComment">// Array initial value</span><br /><br />&#160;&#160;<span class="CodeKeyword">embedded reference</span>&lt;OtherInterface&gt; ReferenceMember = OtherDO;<br /><br />&#160;&#160;<span class="CodeKeyword">provided</span>&#160;<span class="CodeDataType">float</span> InlinedMethodMember(<br />&#160;&#160;&#160;&#160;<span class="CodeKeyword">in</span> &#160;&#160;&#160;&#160;<span class="CodeDataType">int16</span> inParam, <span class="CodeComment">// Default out value is not allowed for in-parameter</span><br />&#160;&#160;&#160;&#160;<span class="CodeKeyword">inout</span>&#160;&#160;<span class="CodeDataType">float</span> ioParam &#160;= <span class="CodeNumericalLiteral">-5.9</span>,<br />&#160;&#160;&#160;&#160;<span class="CodeKeyword">out</span>&#160;&#160;&#160;&#160;<span class="CodeDataType">bool</span> &#160;outParam = <span class="CodeKeyword">true</span>) = <span class="CodeNumericalLiteral">5.6</span>;<br /><br />&#160;&#160;<span class="CodeComment">// Default out values for parameters of methods with explicitly defined function prototypes must be set via refinements</span><br />&#160;&#160;<span class="CodeKeyword">internal method</span> FunctionPrototype MethodMember = <span class="CodeNumericalLiteral">45</span>;<br />}</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div>
                    <h2 class="SectionMain">Refinements</h2>
                    <p>It is possible to attach attributes to distributed objects, their interfaces or their members directly at their definition or in refinement blocks. This way, the raw definition can be separated from its attributes – which is useful because the latter may become lengthy and thus may reduce readability of distributed object and interface definitions significantly. The following example shows different possibilities of how and where to attach attributes via refinements.</p>
                    <p>Consider an interface which is used by a distributed object. The interface defines the members but not any attributes for the members. These are attached within the distributed object using refinements.</p>
                    <p class="SourceCode"><span class="CodeKeyword">interface</span> DOInterface<br />{<br />&#160;&#160;<span class="CodeKeyword">provided data</span> <span class="CodeDataType">int32</span> MemberA;<br />&#160;&#160;<span class="CodeKeyword">provided data</span> <span class="CodeDataType">int32</span> MemberB;<br />}<br /><br /><span class="CodeKeyword">object</span> DO : DOInterface<br />{<br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">AutoSubscribe</span>]<br />&#160;&#160;<span class="CodeKeyword">refine</span> MemberA;<br />}</p>
                    <p>It is also possible to separate the refinement from the distributed object declaration. This way, readability can be increased in case of many distributed objects being declared inside the vCDL file. For DO references and containers refinement always takes place in separate refinement blocks.</p>
                    <p class="SourceCode">DOInterface DO;<br /><br />[<span class="CodeAttributeKey_Namespace">AutoSubscribe</span>]<br /><span class="CodeKeyword">refine</span> DO.MemberB;<br /><br /><span class="CodeKeyword">refine</span> DO<br />{<br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">AutoSubscribe</span>]<br />&#160;&#160;<span class="CodeKeyword">refine</span> MemberA;<br />}</p>
                    <p>Refinements can also be used to set initial values of DO members, either of DO interfaces or of distributed objects. The initial value can be any expression that evaluates to a value suitable for the member’s data type.</p>
                    <p class="SourceCode"><span class="CodeComment">// Refinement in single line</span>
                        <br /><span class="CodeKeyword">refine</span> DO.DataMember = <span class="CodeNumericalLiteral">7</span>;<br /><br /><span class="CodeComment">// Refine as block</span><br /><span class="CodeKeyword">refine</span> DO<br />{<br />&#160;&#160;<span class="CodeKeyword">refine</span> EventMember &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;= <span class="CodeKeyword">false</span>;<br />&#160;&#160;<span class="CodeKeyword">refine</span> FieldMember &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;= { <span class="CodeStringLiteral">"1st"</span>, <span class="CodeStringLiteral">"2nd"</span>, <span class="CodeStringLiteral">"3rd"</span> }; <span class="CodeComment">// Array initial value</span><br />&#160;&#160;<span class="CodeKeyword">refine</span> MethodMember &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;= <span class="CodeNumericalLiteral">5.6</span>; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;                   <span class="CodeComment">// Default return value</span><br />&#160;&#160;<span class="CodeKeyword">refine</span> Embedded.ReferenceMember = OtherDO;<br />}<br /><br /><span class="CodeKeyword">refine</span> DOReference = OtherDO;</p>
                    <p>Via refinements attributes can be attached to single elements of DO containers or indices within the container can be set to <span class="CodeKeyword">null</span>. The latter causes the container to not have a DO at this position at the start of measurement. References within a DO reference container can be initialized with a DO to refer to. Individual elements of the container are refined by first opening a refinement block for the container itself and then writing one or more comma separated indices followed by a colon. Note, that these indices are 0-based. Afterwards there comes the initial value for the container element itself (either null or a DO) and optionally a new refinement block referring only to the DOs at the specified indices prior to the colon. Within this refinement block you have all the opportunities mentioned above including setting initial values. Before, after, or instead of the container element’s initial value additional attributes are allowed.</p>
                    <p class="SourceCode"><span class="CodeKeyword">interface</span> DOInterface<br />{<br />&#160;&#160;<span class="CodeKeyword">provided data</span> <span class="CodeDataType">int32</span> Member;<br />}<br /><br /><span class="CodeDataType">array</span>&lt;DOInterface, <span class="CodeNumericalLiteral">10</span>&gt; DOContainer;<br /><br /><span class="CodeKeyword">refine</span> DOContainer<br />{<br />&#160;&#160;<span class="CodeNumericalLiteral">4</span>, <span class="CodeNumericalLiteral">8</span>: <span class="CodeKeyword">null</span>, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;         <span class="CodeComment">// Remove DOs at positions 4 and 8 (0-based)</span><br />&#160;&#160;<span class="CodeNumericalLiteral">5</span>: [<span class="CodeAttributeKey_Namespace">AutoConnect</span>]<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<span class="CodeKeyword">refine</span> Member = <span class="CodeNumericalLiteral">10</span>; <span class="CodeComment">// Set initial value</span><br />&#160;&#160;},<br />&#160;&#160;<span class="CodeNumericalLiteral">7</span>: [<span class="CodeAttributeKey_Namespace">AutoConnect</span>] &#160;&#160;&#160;&#160;     <span class="CodeComment">// Attach attribute only</span><br />}</p>
                    <p>The same syntax works for multidimensional containers as well. In this case the outer refinement block refers to the outer container while nested refinement blocks refer to the inner container.</p>
                    <p class="SourceCode"><span class="CodeDataType">array</span>&lt;<span class="CodeDataType">list</span>&lt;DOInterface&gt;, 10&gt; DOContainer;<br /><br /><span class="CodeKeyword">refine</span> DOContainer<br />{<br />&#160;&#160;<span class="CodeNumericalLiteral">4</span>, <span class="CodeNumericalLiteral">3</span>:<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<span class="CodeNumericalLiteral">2</span>: [<span class="CodeAttributeKey_Namespace">AutoConnect</span>]<br />&#160;&#160;},<br />&#160;&#160;<span class="CodeNumericalLiteral">5</span>:<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<span class="CodeNumericalLiteral">5</span>: <span class="CodeKeyword">null</span><br />&#160;&#160;},<br />&#160;&#160;<span class="CodeComment">// Error: Attributes can only be attached to either the whole DO container<br />&#160;&#160;// or a single DO within the container</span><br />&#160;&#160;<span class="CodeNumericalLiteral">6</span>: [<span class="CodeAttributeKey_Namespace">AutoConnect</span>]<br />}</p>
                    <p>If all elements of a container shall be refined, e.g., all initial DO references within a DO reference container shall be set, the refinement can be written without indices, thus making it more compact. The following example assigns eight DOs (DO00, ..., DO31) to all slots of a two-dimensional DO reference container.</p>
                    <p class="SourceCode"><span class="CodeDataType">array</span>&lt;<span class="CodeDataType">array</span>&lt;<span class="CodeKeyword">reference</span>&lt;DOIF&gt;, <span class="CodeNumericalLiteral">2</span>&gt;, <span class="CodeNumericalLiteral">4</span>&gt; DORefContainer;<br /><span class="CodeKeyword">refine</span> DORefContainer<br />{<br />&#160;&#160;{ DO00, DO01 },<br />&#160;&#160;{ DO10, DO11 },<br />&#160;&#160;{ DO20, DO21 },<br />&#160;&#160;{ DO30, DO31 },<br />}</p>
                    <p>Both refinement variants (with or without indices) can be combined as well for any type of DO container:</p>
                    <p class="SourceCode"><span class="CodeDataType">list</span>&lt;<span class="CodeDataType">array</span>&lt;<span class="CodeKeyword">reference</span>&lt;DOIF&gt;, <span class="CodeNumericalLiteral">2</span>&gt;&gt; DORefContainer;<br /><span class="CodeKeyword">refine</span> DORefContainer<br />{<br />&#160;&#160;<span class="CodeNumericalLiteral">5</span>:&#160;&#160;&#160;{ DO00, DO01 },<br />&#160;&#160;<span class="CodeNumericalLiteral">6</span>, <span class="CodeNumericalLiteral">7</span>:{ DO10, DO11 },<br />&#160;&#160;<span class="CodeNumericalLiteral">2</span>:&#160;&#160;&#160;{ DO20, DO21 },<br />&#160;&#160;<span class="CodeNumericalLiteral">9</span>:&#160;&#160;&#160;{ DO30, DO31 },<br />}</p>
                    <p>Each pair of brackets {...} forms a scope and for each scope you can decide individually whether to use indices or not. Like in the example above, it is totally fine to nest scopes using indices into scopes without indices. However, within the same scope either all elements must have an index or none. When using indices, no index must exceed the container size, without indices the number of elements must not exceed the container size. Specifying fewer elements thean the container can hold is allowed.</p>
                    <p class="SourceCode"><span class="CodeDataType">list</span>&lt;<span class="CodeDataType">array</span>&lt;<span class="CodeKeyword">reference</span>&lt;DOIF&gt;, <span class="CodeNumericalLiteral">2</span>&gt;&gt; DORefContainer;<br /><span class="CodeKeyword">refine</span> DORefContainer<br />{<br />&#160;&#160;<span class="CodeNumericalLiteral">5</span>:&#160;&#160;&#160;{ <span class="CodeNumericalLiteral">1</span>: DO00, <span class="CodeNumericalLiteral">0</span>: DO01 }, <span class="CodeComment">// OK</span><br />&#160;&#160;<span class="CodeNumericalLiteral">6</span>, <span class="CodeNumericalLiteral">7</span>:{ <span class="CodeNumericalLiteral">1</span>: DO10,&#160;&#160;&#160;&#160;DO11 }, <span class="CodeComment">// Error: There is an index for DO10, but not for DO11</span><br />&#160;&#160;<span class="CodeNumericalLiteral">2</span>:&#160;&#160;&#160;{&#160;&#160;&#160;&#160;DO20&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}, <span class="CodeComment">// OK</span><br />&#160;&#160;<span class="CodeNumericalLiteral">9</span>:&#160;&#160;&#160;{ DO30, DO31, DO32 }, <span class="CodeComment">// Error: Too many elements</span><br />}</p>
                    <p>Every container has a blueprint based on which new DOs within this container are created. The blueprint can be refined as well in vCDL.</p>
                    <p class="SourceCode"><span class="CodeKeyword">refine</span> DOContainer.blueprint.Member = <span class="CodeNumericalLiteral">6</span>;<br /><br /><span class="CodeKeyword">refine</span> DOContainer.blueprint<br />{<br />&#160;&#160;<span class="CodeKeyword">refine</span> Member = <span class="CodeNumericalLiteral">6</span>;<br />}<br /><br /><span class="CodeKeyword">refine</span> DOContainer<br />{<br />&#160;&#160;blueprint: <span class="CodeComment">// “blueprint” is used like a special index</span><br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<span class="CodeKeyword">refine</span> Member = <span class="CodeNumericalLiteral">6</span>;<br />&#160;&#160;}<br />}</p>
                </div>
                <div>
                    <h2 class="SectionMain">Attributes</h2>
                    <p>As shown in the examples above there are also distributed object specific attributes. In contrast to other attributes in vCDL these are loaded dynamically into the vCDL parser. All attributes that are allowed at distributed object instances or their members can also be attached to interfaces and their members, but not vice versa.</p>
                    <p>Distributed objects share a common set of attributes to configure their communication layer. They can be used at various levels, as stated in column <span class="bold">Target</span>. Note that attributes are propagated along the inheritance hierarchy: An attribute that can be attached to a distributed object can be attached to any of the object’s parent interfaces with the same effect.</p>
                    <div>
                        <table style="mc-table-style: url('../../../Resources/Stylesheets/vTable.css');margin-left: 0;margin-right: auto;" class="TableStyle_vTable" cellspacing="0">
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                            <thead>
                                <tr>
                                    <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                        <p class="TableHead">Name</p>
                                    </th>
                                    <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                        <p class="TableHead">Type</p>
                                    </th>
                                    <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                        <p class="TableHead">Default</p>
                                    </th>
                                    <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                        <p class="TableHead">Target</p>
                                    </th>
                                    <th class="TableStyle_vTable_Head_0_0_RowSep_ColEnd">
                                        <p class="TableHead">Semantics</p>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeAttributeKey_Namespace">Binding
</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">String</p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Empty</p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Members of distributed object interfaces of kinds:</p>
                                        <ul>
                                            <li>data</li>
                                            <li>method</li>
                                            <li>event</li>
                                            <li>field</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                        <p class="Table">The <a href="../../CANoeCANalyzer/CommunicationConcept/CCDistributedObjects.htm#BMBindings" data-mc-exclude-action="unbind" data-mc-conditions="vConditions.vTESTstudioExcluded">binding</a> to be used by a member. This setting cannot be changed at runtime.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeAttributeKey_Namespace">CommunicationPattern
</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Enum:</p>
                                        <ul>
                                            <li>SharedMemory</li>
                                            <li>PublishSubscribe</li>
                                            <li>SendReceive</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeNumericalLiteral">PublishSubscribe</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Members of distributed object interfaces of kinds:</p>
                                        <ul>
                                            <li>data</li>
                                            <li>event</li>
                                            <li>field</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                        <p class="Table">Hints bindings to use a particular communication for this member. This setting cannot be changed at runtime.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeAttributeKey_Namespace">Ownership
</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Enum:</p>
                                        <ul>
                                            <li>
Exclusive</li>
                                            <li>
Shared
</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeNumericalLiteral">Exclusive</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Provided members of distributed object interfaces of kinds:</p>
                                        <ul>
                                            <li>data</li>
                                            <li>event</li>
                                            <li>field</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                        <p class="Table">Whether the system data has exclusive ownership (only one provider) or shared ownership (multiple providers). Only relevant for patterns <span class="bold">PublishSubscribe</span> and <span class="bold">SharedMemory</span>. This setting cannot be changed at runtime.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeAttributeKey_Namespace">AutoConnect
</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Bool</p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeNumericalLiteral">True</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Members of distributed objects of kinds:</p>
                                        <ul>
                                            <li>data</li>
                                            <li>Method</li>
                                            <li>event</li>
                                            <li>field</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                        <p class="Table">Member shall be connected to its virtual network immediately when the containing object is instantiated. This setting cannot be changed at runtime.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeAttributeKey_Namespace">HasAnnounceAPI
</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Bool</p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeNumericalLiteral">False</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Provided members of distributed object interfaces of kinds:</p>
                                        <ul>
                                            <li>data</li>
                                            <li>event</li>
                                            <li>field</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                        <p class="Table">Demand that publishers need to announce themselves (e.g. at a registry). This setting cannot be changed at runtime.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeAttributeKey_Namespace">AutoSubscribe
</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Bool</p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeNumericalLiteral">True</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Consumed members of distributed objects of kinds:</p>
                                        <ul>
                                            <li>data</li>
                                            <li>event</li>
                                            <li>field</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                        <p class="Table">The consumed member shall be subscribed immediately when it is connected to the virtual network. This setting cannot be changed at runtime.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeAttributeKey_Namespace">AutoAnnounce
</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Enum:</p>
                                        <ul>
                                            <li>Never</li>
                                            <li>
OnConnect</li>
                                            <li>OnFirstTransmit</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeNumericalLiteral">OnConnect</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Provided members of distributed objects of kinds:</p>
                                        <ul>
                                            <li>data</li>
                                            <li>event</li>
                                            <li>field</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                        <p class="Table">The provided member shall be announced immediately when it is connected to the virtual network / when its first value is transmitted. This setting cannot be changed at runtime.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeAttributeKey_Namespace">TxTrigger
</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Enum:</p>
                                        <ul>
                                            <li>OnUpdate</li>
                                            <li>
OnChange</li>
                                            <li>
Cyclic
</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeNumericalLiteral">OnChange</span> for fields,<br /><![CDATA[
]]><span class="CodeNumericalLiteral">OnUpdate</span> for other member types
</p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Provided members of distributed objects of kinds:</p>
                                        <ul>
                                            <li>data</li>
                                            <li>event</li>
                                            <li>field</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                        <p class="Table">When a transmit of the data (at a high level) shall be triggered. This setting cannot be changed at runtime.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeAttributeKey_Namespace">TxCycleTime
</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Time</p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Empty</p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Provided members of distributed objects of kinds:</p>
                                        <ul>
                                            <li>data</li>
                                            <li>event</li>
                                            <li>field</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                        <p class="Table">Specify the cycle time for the high-level transmit when <span class="CodeAttributeKey_Namespace">TxTrigger</span> is set to cyclic. This setting cannot be changed at runtime.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeAttributeKey_Namespace">TxValueRepresentation
</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Enum:</p>
                                        <ul>
                                            <li>Impl</li>
                                            <li>Raw</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeNumericalLiteral">Impl</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Provided members of distributed objects of kinds:</p>
                                        <ul>
                                            <li>data</li>
                                            <li>method</li>
                                            <li>event</li>
                                            <li>field</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                        <p class="Table">Data for Tx values can internally be stored in <span class="bold">Impl</span> or in <span class="bold">Raw</span> representation. This setting cannot be changed at runtime.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeAttributeKey_Namespace">ValueAssignmentEvents
</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Enum:</p>
                                        <ul>
                                            <li>Last</li>
                                            <li>All</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeNumericalLiteral">Last</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Members of distributed objects of kinds:</p>
                                        <ul>
                                            <li>data</li>
                                            <li>method</li>
                                            <li>event</li>
                                            <li>field</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                        <p class="Table">If multiple values are assigned at the same point in time during simulation, events can be created for the last or all events. This setting cannot be changed at runtime.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeAttributeKey_Namespace">UsedForAnalysisResults<![CDATA[
]]></span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Bool</p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table"><span class="CodeNumericalLiteral">False</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                        <p class="Table">Distributed object interfaces, affects members of kinds:</p>
                                        <ul>
                                            <li>data</li>
                                            <li>method</li>
                                            <li>event</li>
                                            <li>field</li>
                                        </ul>
                                        <p class="Table">The interface must only contain internal members and no method members.</p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                        <p class="Table">Instance is used to store calculated analysis results based on the object’s values. This setting cannot be changed at runtime.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                        <p class="Table"><span class="CodeAttributeKey_Namespace">DistributionType
</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                        <p class="Table">Enum:</p>
                                        <ul>
                                            <li>Unicast,</li>
                                            <li>Multicast</li>
                                            <li>Broadcast
</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                        <p class="Table"><span class="CodeNumericalLiteral">Broadcast</span>
                                        </p>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                        <p class="Table">Provided members of distributed object interfaces of kinds:</p>
                                        <ul>
                                            <li>data</li>
                                            <li>event</li>
                                            <li>field</li>
                                        </ul>
                                    </td>
                                    <td class="TableStyle_vTable_Body_0_0_RowEnd_ColEnd">
                                        <p class="Table">The communication pattern used to distribute provided data when <span class="bold">CommunicationPattern</span> is set to <span class="bold">SendReceive</span>. This setting cannot be changed at runtime.</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <p class="LinkList">&#160;</p>
            </div>
        </div>
        <div class="Footer">
            <div class="FooterWhite">
                <table class="FooterWhite" style="border-collapse: collapse;margin-left: auto;margin-right: auto;">
                    <col style="width: 70px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col style="width: 16px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col data-mc-conditions="" />
                    <col />
                    <tbody>
                        <tr>
                            <td>
                                <div class="buttons popup-container clearfix topicToolbarProxy topicToolbarProxyFooter _Skins_HTML5TopicToolbar mc-component nocontent">
                                    <div class="button-group-container-left">
                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                            <div>
                                                <div role="img" class="button-icon-wrapper" aria-label="Expand all">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                        <button class="button needs-pie remove-highlight-button" title="Remove Highlights">
                                            <div>
                                                <div role="img" class="button-icon-wrapper">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <p class="vec_BuildInfo"><a href="../../Shared/HowToUseOnlineHelp.htm" title="Tips for using the help" alt="Tips for using the help"><img src="../../../Resources/vImages/vBackstage/vHelpInfo.png" /></a>
                                </p>
                            </td>
                            <td>
                                <p class="vec_BuildInfo">•&#160;&#160;Technical&#160;References are only&#160;available&#160;in&#160;English</p>
                            </td>
                            <td>
                                <p class="vec_BuildInfo" style="text-align: right;"><span class="mc-variable Vector.BuildTime variable">2023-09-26T19:49:32</span>
                                </p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <table style="width: 100%;border-collapse: separate;border-spacing: 3px 0px;margin-left: auto;margin-right: auto;caption-side: top;">
                <col />
                <col />
                <col />
                <col data-mc-conditions="vConditions.HTML5Link" />
                <tbody>
                    <tr>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;">
                            <p class="vec_Footer">©&#160;Vector Informatik GmbH</p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;text-align: right;">
                            <p class="vec_FooterBold">
                                <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded,vConditions.TestDataEditorExcluded">CANoe</MadCap:conditionalText> Version <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded">17 SP3</MadCap:conditionalText></p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="../../Shared/ContactCopyrightLicense.htm" class="vec_Footer MCXref xref xrefvec_Footer">Contact/Copyright/License</a>
                            </p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="https://www.vector.com/int/en/company/get-info/privacy-policy/" target="_blank" class="vec_Footer">Data Privacy Notice</a>
                            </p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>
</html>