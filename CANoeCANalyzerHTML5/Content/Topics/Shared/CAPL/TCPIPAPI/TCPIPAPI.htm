<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="" data-mc-search-type="Stem" data-mc-help-system-file-name="CANoeCANalyzer.xml" data-mc-path-to-help-system="../../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../../../Skins/Favicons/browserconfig.xml" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../../Skins/Favicons/favicon-16x16.png" /><title>TCP/IP API</title>
        <link href="../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Resources/Stylesheets/vTableMasterPageHeader.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../../Resources/Stylesheets/vStylesheet.css" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.expand-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.remove-highlight-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.collapse-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.needs-pie
{
	behavior: url('../../../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../../../Resources/Stylesheets/vTable.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../../Resources/Stylesheets/vTableSymbol.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../../Skins/Favicons/favicon-16x16.png" />
        <script src="../../../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapGlobal.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapDom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapUtilities.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapXhr.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTextEffects.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSlideshow.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMessageBus.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMessageBus.CrossFrame.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapDefault.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMediaQueries.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAccessibility.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapHelpSystem.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAliasFile.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTopicFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapFeedbackHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSkinHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.MiniToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.SideMenu.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapIndex.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapGlossary.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapParser.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSearch.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapNavigateTopics.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapLms.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapELearning.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTopic.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMicroContentComponent.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSearchHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTopicElements.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTriPane.js" type="text/javascript" defer="defer">
        </script>
        <script type="text/jscript" src="../../../../Resources/vScripts/SyntaxHighlighting.js">
        </script>
        <script type="text/jscript" src="../../../../Resources/vScripts/TabSwitch.js">
        </script>
        <script type="text/javascript" src="../../../../Resources/vScripts/Vector.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../../CANoeCANalyzer.htm#Topics/Shared/CAPL/TCPIPAPI/TCPIPAPI.htm">Open topic with navigation</a>
        </p>
        <div class="Body">
            <div role="main" id="mc-main-content">
                <p class="StructurePath">
                    <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded"><a href="../../../CANoeCANalyzer/Ethernet/Ethernet.htm" class="StructurePath">Ethernet</a> Â» </MadCap:conditionalText><span class="mc-variable System.Title variable">TCP/IP API</span>
                </p>
                <h1><a name="aanchor7094"></a>
                    <MadCap:concept term="TCPIPApi" /><a name="kanchor5385"></a><span class="mc-variable System.Title variable">TCP/IP API</span>
                </h1>
                <p class="MenuPath">&#160;</p>
                <p class="AutoSearchFilterConcepts"><a name="aanchor7095"></a>
                    <MadCap:concept term="SFCore" />
                </p>
                <div>
                    <table style="margin-left: 0;margin-right: auto;width: 100%;mc-table-style: url('../../../../Resources/Stylesheets/vTable.css');" class="TableStyle_vTable" cellspacing="0">
                        <col />
                        <col />
                        <thead>
                            <tr>
                                <th colspan="2" class="TableStyle_vTable_Head_0_0_RowSep_ColEnd">
                                    <p class="TableHead">General</p>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td colspan="2" class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p>You can use the <span class="bold">TCP/IP&#160;API</span> to implement end-to-end communications. Therefore you can create server and client sockets. The <a href="../../../CANoeCANalyzer/Ethernet/Protocols/ProtocolTCP.htm">TCP</a> and <a href="../../../CANoeCANalyzer/Ethernet/Protocols/ProtocolUDP.htm">UDP</a> protocols are supported for the sockets.</p>
                                    <p>To realize a socket communication between CAPL node, you have to activate option <span class="bold" data-mc-conditions="vConditions.CANoeOnly">Individual TCP/IP stack</span> on page <span class="bold">TCP/IP</span> in the <a href="../../../CANoeCANalyzer/Ethernet/TCPIPNetworkSettings/PageStackSelection.htm" class="Bold MCXref xref xrefBold" data-mc-exclude-action="unbind" data-mc-conditions="vConditions.vTESTstudioExcluded">Stack Selection</a> dialog. Then you have to configure the stack.</p>
                                    <h2 class="SectionSub"><a name="TCPClientSocket" id="TCPClientSocket"></a>Create TCP Client Socket</h2>
                                    <p>A TCP client socket builds the connection to a TCP server socket.</p>
                                    <p>To do this, use the CAPL function <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPOpen.htm">TcpOpen</a> to create a socket. You can set the parameters to zero or enter a specific local address and a specific local port. Then the socket is implicitly bound to that address. The function returns handle that is used in all socket functions of the TCP/IP&#160;API.</p>
                                    <p>Afterwards you can create the connection with <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPConnect.htm">TcpConnect</a>.Enter the destination address and destination port to be connected.</p>
                                    <p>To close the connection use function <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPClose.htm">TcpClose</a>.</p>
                                    <div>
                                        <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                            <col class="TableStyle-vTableSymbol-Column-Column1" />
                                            <col class="TableStyle-vTableSymbol-Column-Column2" />
                                            <tbody>
                                                <tr>
                                                    <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                        <p class="Table">
                                                            <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                        </p>
                                                    </td>
                                                    <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                        <p class="TableSymbolHead"><a targets="TOGTCPClientSocket" href="javascript:void(0)" class="MCToggler MCTogglerHead MCTogglerHotSpot MCToggler_Open toggler MCTogglerHotSpot_ MCHotSpotImage" data-mc-targets="TOGTCPClientSocket"><img class="MCToggler_Image_Icon" src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Example</a>
                                                        </p>
                                                        <div style="display: none;" data-mc-target-name="TOGTCPClientSocket">
                                                            <p class="Table">This example demonstrates in minimalistic form the TCP server client concept.</p>
                                                            <p class="TableSourceCode">variables<br />{<br />&#160;&#160;// error codes:<br />&#160;&#160;const dword SUCCESS = 0;<br />&#160;&#160;const dword WSA_IO_PENDING = 997;<br />&#160;&#160;const dword WSAEWOULDBLOCK = 10035;<br />&#160;&#160;const dword INVALID_SOCKET = ~0;<br /><br />&#160;&#160;// address and port of the server<br />&#160;&#160;ip_Endpoint TCP:192.168.1.3:1234 gServerEndpoint;<br />&#160;&#160;dword gConnection = INVALID_SOCKET;<br />}<br /><br />//<br />// open a tcp socket and begin to connect it to the server<br />//<br />on start<br />{<br />&#160;&#160;char errorText[200];<br />&#160;&#160;long result;<br /><br />&#160;&#160;// the connection will be implicit bound to a free port when it gets connected<br />&#160;&#160;gConnection = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPOpen.htm">TcpOpen</a>(ip_Endpoint(0.0.0.0:0));<br />&#160;&#160;if (gConnection == INVALID_SOCKET)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;writeLineEx(1,3,"&lt;%BASE_FILE_NAME%&gt; Failed to open tcp socket. Error: %d", <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastError.htm">IpGetLastError</a>());<br />&#160;&#160;&#160;&#160;return;<br />&#160;&#160;}<br />&#160;&#160;result = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPConnect.htm">TcpConnect</a>( gConnection, gServerEndpoint );<br />&#160;&#160;if (result != SUCCESS &amp;&amp; <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">ipGetLastSocketError</a>(gConnection) != WSAEWOULDBLOCK )<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketErrorAsString.htm">IpGetLastSocketErrorAsString</a>( gConnection, errorText, elcount(errorText) );<br />&#160;&#160;&#160;&#160;write( "&lt;%BASE_FILE_NAME%&gt; TcpConnect failed: %s (Result %d)", errorText, <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(gConnection) );<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPClose.htm">TcpClose</a>(gConnection);<br />&#160;&#160;}<br />}<br /><br />//<br />// This callback gets called when the connection is established.<br />//<br /><a href="../../../CAPLFunctions/TCPIPAPI/EventProcedures/CAPLfunctionTCPIPOnTcpConnect.htm">OnTcpConnect</a>(dword socket, long result)<br />{<br />&#160;&#160;char errorText[255];<br />&#160;&#160;char data[20] = "Hello Server";<br /><br />&#160;&#160;if(result != SUCCESS)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;writeLineEx(1, 3, "&lt;%BASE_FILE_NAME%&gt; Failed to connect tcp socket. Error: %d", result);<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPClose.htm" class="SourceCode">TcpClose</a>(socket);<br />&#160;&#160;&#160;&#160;return;<br />&#160;&#160;}<br /><br />&#160;&#160;// Start sending some data to the server.<br />&#160;&#160;result = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPSend.htm">TcpSend</a>(socket, data, strlen(data));<br />&#160;&#160;if (result != SUCCESS &amp;&amp; <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(socket) != WSA_IO_PENDING )<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketErrorAsString.htm">IpGetLastSocketErrorAsString</a>( socket, errorText, elcount(errorText) );<br />&#160;&#160;&#160;&#160;write( "&lt;%BASE_FILE_NAME%&gt; TcpSend failed: %s (Result %d)", errorText, <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(socket) );<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPClose.htm">TcpClose</a>(socket);<br />&#160;&#160;&#160;&#160;return;<br />&#160;&#160;}<br /><br />&#160;&#160;// Prepare socket to receive response.<br />&#160;&#160;result = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPReceive.htm">TcpReceive</a>(socket);<br />&#160;&#160;if (result != SUCCESS &amp;&amp; <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(socket) != WSA_IO_PENDING )<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketErrorAsString.htm">IpGetLastSocketErrorAsString</a>( socket, errorText, elcount(errorText) );<br />&#160;&#160;&#160;&#160;write( "&lt;%BASE_FILE_NAME%&gt; TcpReceive failed: %s (Result %d)", errorText, <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(socket) );<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPClose.htm">TcpClose</a>(socket);<br />&#160;&#160;}<br />}<br /><br />//<br />// receive data from server and close connection<br />//<br /><a href="../../../CAPLFunctions/TCPIPAPI/EventProcedures/CAPLfunctionTCPIPOnTcpReceive.htm">OnTcpReceive</a>(dword socket, long result, dword address, dword port, char buffer[], dword size)<br />{<br />&#160;&#160;if(result == SUCCESS)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;writeLineEx(1, 0, "&lt;%BASE_FILE_NAME%&gt; received: %s", buffer);<br />&#160;&#160;}<br />&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPClose.htm">TcpClose</a>(socket);<br />}<br /><br />//<br />// close the connection if the server closes the connection<br />//<br /><a href="../../../CAPLFunctions/TCPIPAPI/EventProcedures/CAPLfunctionTCPIPOnTcpClose.htm">OnTcpClose</a>(dword socket, long result)<br />{<br />&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPClose.htm">TcpClose</a>(socket);<br />&#160;&#160;socket = INVALID_SOCKET;<br />}<br /><br />//<br />// clean up sockets on measurement end<br />//<br />on preStop<br />{<br />&#160;&#160;if(gConnection != INVALID_SOCKET)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPClose.htm">TcpClose</a>(gConnection);<br />&#160;&#160;}<br />}</p>
                                                        </div>
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                    <h2 class="SectionSub"><a name="TCPServerSocket" id="TCPServerSocket"></a>Create TCP Server Socket</h2>
                                    <p>A TCP server socket waits for incoming connections.</p>
                                    <p>To create a socket, use the CAPL function <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPOpen.htm">TcpOpen</a>. With parameters you enter a specific local address and a specific local port. Then the socket is implicitly bound to that address. The function returns a handle that is used in all socket functions of the TCP/IP&#160;API.</p>
                                    <p><a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPListen.htm">TcpListen</a> is used to have a configured socket wait for incoming connections. The <a href="../../../CAPLFunctions/TCPIPAPI/EventProcedures/CAPLfunctionTCPIPOnTcpListen.htm">OnTcpListen</a> callback is used to signal an incoming connection request. In this request, <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPAccept.htm">TcpAccept</a> must be used to accept the connection. If this does not happen, the connection is refused.</p>
                                    <p>A new socket handle is created for the incoming connection, i.e. two sockets then exist, the server socket and a connection socket. The server socket can accept other incoming connections; a separate connection socket is set up for each connection.</p>
                                    <p><a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPClose.htm">TcpClose</a> is used to close a waiting socket.</p>
                                    <div>
                                        <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                            <col class="TableStyle-vTableSymbol-Column-Column1" />
                                            <col class="TableStyle-vTableSymbol-Column-Column2" />
                                            <tbody>
                                                <tr>
                                                    <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                        <p class="Table">
                                                            <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                        </p>
                                                    </td>
                                                    <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                        <p class="TableSymbolHead"><a targets="TOGTCPServerSocket" href="javascript:void(0)" class="MCToggler MCTogglerHead MCTogglerHotSpot MCToggler_Open toggler MCTogglerHotSpot_ MCHotSpotImage" data-mc-targets="TOGTCPServerSocket"><img class="MCToggler_Image_Icon" src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Example</a>
                                                        </p>
                                                        <div style="display: none;" data-mc-target-name="TOGTCPServerSocket">
                                                            <p class="Table">This example demonstrates in minimalistic form the TCP server client concept.</p>
                                                            <p class="TableSourceCode">variables<br />{<br />&#160;&#160;// some error codes<br />&#160;&#160;const dword SUCCESS = 0;<br />&#160;&#160;const dword WSA_IO_PENDING = 997;<br />&#160;&#160;const dword WSAEWOULDBLOCK = 10035;<br />&#160;&#160;const dword INVALID_SOCKET = ~0;<br /><br />&#160;&#160;// global variables<br />&#160;&#160;IP_Endpoint TCP:0.0.0.0:1234 localEndpoint;  // the server is listening on this endpoint<br />&#160;&#160;dword gListenSocket = INVALID_SOCKET;        // the listening socket<br />&#160;&#160;dword gConnections[int64];                   // list of active connections<br />}<br /><br />//<br />// open a tcp socket and start listening on the given endpoint<br />//<br />on start<br />{<br />&#160;&#160;char errorText[200];<br />&#160;&#160;long result;<br /><br />&#160;&#160;gListenSocket = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPOpen.htm">TcpOpen</a>(localEndpoint);<br />&#160;&#160;if (gListenSocket == INVALID_SOCKET)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;writeLineEx(1,3,"&lt;%BASE_FILE_NAME%&gt; Failed to open tcp socket. Error: %d", <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastError.htm">IpGetLastError</a>());<br />&#160;&#160;&#160;&#160;return;<br />&#160;&#160;}<br />&#160;&#160;result = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPListen.htm">TcpListen</a>( gListenSocket );<br />&#160;&#160;if (result != SUCCESS &amp;&amp; <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(gListenSocket) != WSAEWOULDBLOCK )<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketErrorAsString.htm">IpGetLastSocketErrorAsString</a>( gListenSocket, errorText, elcount(errorText) );<br />&#160;&#160;&#160;&#160;write( "&lt;%BASE_FILE_NAME%&gt; TcpListen failed: %s (Result %d)", errorText, <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(gListenSocket) );<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPClose.htm">TcpClose</a>(gListenSocket);<br />&#160;&#160;}<br />}<br /><br />//<br />// accept the incoming connection and start receiving data<br />//<br /><a href="../../../CAPLFunctions/TCPIPAPI/EventProcedures/CAPLfunctionTCPIPOnTcpListen.htm">OnTcpListen</a>( dword socket, long result)<br />{<br />&#160;&#160;char errorText[200];<br />&#160;&#160;dword connection;<br /><br />&#160;&#160;connection = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPAccept.htm">TcpAccept</a>( socket );<br />&#160;&#160;if (connection == INVALID_SOCKET)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketErrorAsString.htm">IpGetLastSocketErrorAsString</a>(socket, errorText, elcount(errorText) );<br />&#160;&#160;&#160;&#160;write( "&lt;%BASE_FILE_NAME%&gt; TcpAccept failed, %s (Result %d)", errorText, <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(socket) );<br />&#160;&#160;}<br />&#160;&#160;else<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;gConnections[connection] = connection; // remember the handle of this connection<br />&#160;&#160;&#160;&#160;result = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPReceive.htm">TcpReceive</a>(connection);<br />&#160;&#160;&#160;&#160;if (result != SUCCESS &amp;&amp; <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(connection) != WSA_IO_PENDING )<br />&#160;&#160;&#160;&#160;{<br />&#160;&#160;&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketErrorAsString.htm">IpGetLastSocketErrorAsString</a>( connection, errorText, elcount(errorText) );<br />&#160;&#160;&#160;&#160;&#160;&#160;write( "&lt;%BASE_FILE_NAME%&gt; TcpReceive failed: %s (Result %d)", errorText, <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(connection) );<br />&#160;&#160;&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPClose.htm">TcpClose</a>(connection);<br />&#160;&#160;&#160;&#160;}<br />&#160;&#160;}<br />}<br /><br />//<br />// receive data from client and send a response<br />//<br /><a href="../../../CAPLFunctions/TCPIPAPI/EventProcedures/CAPLfunctionTCPIPOnTcpReceive.htm">OnTcpReceive</a>(dword socket, long result, IP_Endpoint remoteEndpoint, char buffer[], dword size)<br />{<br />&#160;&#160;char errorText[255];<br />&#160;&#160;char response[20] = "Hello Client";<br />&#160;&#160;if(result == SUCCESS)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;writeLineEx(1, 0, "&lt;%BASE_FILE_NAME%&gt; received: %s", buffer);<br />&#160;&#160;}<br />&#160;&#160;else<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;write( "&lt;%BASE_FILE_NAME%&gt; OnTcpReceive failed, Result %d", result );<br />&#160;&#160;&#160;&#160;return;<br />&#160;&#160;}<br /><br />&#160;&#160;result = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPSend.htm">TcpSend</a>(socket, response, strlen(response));<br />&#160;&#160;if (result != 0 &amp;&amp; <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(socket) != WSA_IO_PENDING )<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketErrorAsString.htm">IpGetLastSocketErrorAsString</a>( socket, errorText, elcount(errorText) );<br />&#160;&#160;&#160;&#160;write( "&lt;%BASE_FILE_NAME%&gt; TcpSend failed: %s (Result %d)", errorText, <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(socket) );<br />&#160;&#160;}<br />}<br /><br />//<br />// close the connection when the client closes the connection and remove it from the map of connections<br />//<br /><a href="../../../CAPLFunctions/TCPIPAPI/EventProcedures/CAPLfunctionTCPIPOnTcpClose.htm">OnTcpClose</a>(dword socket, long result)<br />{<br />&#160;&#160;gConnections.remove(socket);<br />&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPClose.htm">TcpClose</a>(socket);<br />}<br /><br />//<br />// clean up sockets on measurement end<br />//<br />on preStop<br />{<br />&#160;&#160;for(int64 socket: gConnections)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPClose.htm">TcpClose</a>(socket);<br />&#160;&#160;}<br />&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionTCPClose.htm">TcpClose</a>(gListenSocket);<br />}</p>
                                                        </div>
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                    <h2 class="SectionSub"><a name="UDPClientSocket" id="UDPClientSocket"></a>Create UDP Client Socket</h2>
                                    <p>With an UDP client socket data can be sent to a server.</p>
                                    <p>To do this, use the CAPL function <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionUDPOpen.htm">UdpOpen</a> to create a socket. You can set the parameters to zero or enter a specific local address and a specific local port. Then the socket is implicitly bound to that address. If you don't enter a specific port the socket will automatically use a free port. The function returns handle that is used in all socket functions of the TCP/IP&#160;API.</p>
                                    <p>After configuration you can sent data to the server with <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionUDPSendTo.htm">UdpSendTo</a>.</p>
                                    <div>
                                        <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                            <col class="TableStyle-vTableSymbol-Column-Column1" />
                                            <col class="TableStyle-vTableSymbol-Column-Column2" />
                                            <tbody>
                                                <tr>
                                                    <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                        <p class="Table">
                                                            <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                        </p>
                                                    </td>
                                                    <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                        <p class="TableSymbolHead"><a targets="TOGUDPClientSocket" href="javascript:void(0)" class="MCToggler MCTogglerHead MCTogglerHotSpot MCToggler_Open toggler MCTogglerHotSpot_ MCHotSpotImage" data-mc-targets="TOGUDPClientSocket"><img class="MCToggler_Image_Icon" src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Example</a>
                                                        </p>
                                                        <div style="display: none;" data-mc-target-name="TOGUDPClientSocket">
                                                            <p class="Table">This example demonstrates an UDP client socket to send data via UDP and receive data via UDP as response from an UDP server socket. In particular the sequence of the function calls and additional functions for error handling are shown. The relevant UDP socket functions are highlighted.</p>
                                                            <p class="TableSourceCode">variables<br />{<br />&#160;&#160;// some error codes<br />&#160;&#160;const dword SUCCESS = 0;<br />&#160;&#160;const dword WSA_IO_PENDING = 997;<br />&#160;&#160;const dword INVALID_SOCKET = ~0;<br /><br />&#160;&#160;// global variables<br />&#160;&#160;ip_Endpoint UDP:192.168.1.3:12345 gServerEndpoint;<br />&#160;&#160;dword gUdpSocketHandle = INVALID_SOCKET;<br />&#160;&#160;char gErrorText[200];<br />&#160;&#160;char gRxBuffer[1472]; // Max. UDP payload without fragmentation<br />}<br /><br />//<br />// open a UDP Socket and send data to the server<br />//<br />on start<br />{<br />&#160;&#160;long result;<br />&#160;&#160;char textData[20] = "Hello UDP Server";<br /><br />&#160;&#160;// Open UDP socket<br />&#160;&#160;gUdpSocketHandle = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionUDPOpen.htm">UdpOpen</a>(ip_Endpoint(0.0.0.0:0)); // The port parameter is set to zero. =&gt; A free local port is selected by the stack.<br /><br />&#160;&#160;// Check for valid socket handle<br />&#160;&#160;if (gUdpSocketHandle == INVALID_SOCKET)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;write("&lt;%BASE_FILE_NAME%&gt; UdpOpen failed (Result %d)", <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastError.htm">IpGetLastError</a>());<br />&#160;&#160;&#160;&#160;return;<br />&#160;&#160;}<br /><br />&#160;&#160;// Send UDP data<br />&#160;&#160;result = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionUDPSendTo.htm">UdpSendTo</a>(gUdpSocketHandle, gServerEndpoint, textData, strlen(textData));<br />&#160;&#160;if ( (result != SUCCESS) &amp;&amp; (<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(gUdpSocketHandle) != WSA_IO_PENDING) )<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketErrorAsString.htm">IpGetLastSocketErrorAsString</a>(gUdpSocketHandle, gErrorText, elcount(gErrorText) );<br />&#160;&#160;&#160;&#160;write( "&lt;%BASE_FILE_NAME%&gt; UdpSendTo failed: %s (Result %d)", gErrorText, <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(gUdpSocketHandle) );<br />&#160;&#160;}<br /><br />&#160;&#160;// Receive answer from UDP server<br />&#160;&#160;result = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionUDPReceiveFrom.htm">UdpReceiveFrom</a>(gUdpSocketHandle, gRxBuffer, elcount(gRxBuffer));<br />&#160;&#160;if ( (result != SUCCESS) &amp;&amp; (<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(gUdpSocketHandle) != WSA_IO_PENDING) )<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketErrorAsString.htm">IpGetLastSocketErrorAsString</a>(gUdpSocketHandle, gErrorText, elcount(gErrorText));<br />&#160;&#160;&#160;&#160;write("&lt;%BASE_FILE_NAME%&gt; UdpReceiveFrom failed: %s (Result %d)", gErrorText, <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(gUdpSocketHandle));<br />&#160;&#160;}<br />}<br /><br />//<br />// Callback function for reception of data from server<br />//<br /><a href="../../../CAPLFunctions/TCPIPAPI/EventProcedures/CAPLfunctionTCPIPOnUdpReceiveFrom.htm">OnUdpReceiveFrom</a>(dword socket, long result, IP_Endpoint remoteEndpoint, char buffer[], dword size)<br />{<br />&#160;&#160;char endpointText[30];<br /><br />&#160;&#160;if ( result == SUCCESS )<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;remoteEndpoint.PrintEndpointToString(endpointText);<br />&#160;&#160;&#160;&#160;write("&lt;%BASE_FILE_NAME%&gt; received: %s from %s", buffer, endpointText);<br />&#160;&#160;&#160;&#160;// do something with the data<br />&#160;&#160;}<br />&#160;&#160;else<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;write("&lt;%BASE_FILE_NAME%&gt; Error in OnUdpReceiveFrom (Result %d)", result);<br />&#160;&#160;}<br /><br />&#160;&#160;// prepare for next data to receive<br />&#160;&#160;result = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionUDPReceiveFrom.htm">UdpReceiveFrom</a>(socket, gRxBuffer, elcount(gRxBuffer));<br /><br />&#160;&#160;// Check for error<br />&#160;&#160;if ( result != SUCCESS &amp;&amp; <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(socket) != WSA_IO_PENDING )<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketErrorAsString.htm">IpGetLastSocketErrorAsString</a>(socket, gErrorText, elcount(gErrorText));<br />&#160;&#160;&#160;&#160;write("&lt;%BASE_FILE_NAME%&gt; UdpReceiveFrom failed: %s (Result %d)", gErrorText, <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(socket));<br />&#160;&#160;}<br />}<br /><br />//<br />// Close socket on measurement stop<br />//<br />on preStop<br />{<br />&#160;&#160;if(gUdpSocketHandle != INVALID_SOCKET)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionUDPClose.htm">UdpClose</a>(gUdpSocketHandle);<br />&#160;&#160;}<br />}</p>
                                                        </div>
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                    <div>
                                        <h2 class="SectionSub"><a name="UDPServerSocket" id="UDPServerSocket"></a>Create UDP Server Socket</h2>
                                        <p>An UDP server socket waits for incoming data.</p>
                                        <p>To create a socket, use the CAPL function <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionUDPOpen.htm">UdpOpen</a>. Then enter a specific local address and a specific local port. Then the socket is implicitly bound to that address. The function returns handle that is used in all socket functions of the TCP/IP&#160;API.</p>
                                        <p>After configuration you can get received data with <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionUDPReceiveFrom.htm">UdpReceiveFrom</a>. If no data has been received until that time the function returns with value -1. In this case use <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a> to check if the last error code was WSA_IO_PENDING (997). As soon as data are received the callback <a href="../../../CAPLFunctions/TCPIPAPI/EventProcedures/CAPLfunctionTCPIPOnUdpReceiveFrom.htm">OnUdpReceiveFrom</a> is called.</p>
                                        <p>With <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionUDPSendTo.htm">UdpSendTo</a> data can be sent on the socket.</p>
                                        <div>
                                            <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                                <col class="TableStyle-vTableSymbol-Column-Column1" />
                                                <col class="TableStyle-vTableSymbol-Column-Column2" />
                                                <tbody>
                                                    <tr>
                                                        <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                            <p class="Table">
                                                                <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                            </p>
                                                        </td>
                                                        <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                            <p class="TableSymbolHead"><a targets="TOGUDPServerSocket" href="javascript:void(0)" class="MCToggler MCTogglerHead MCTogglerHotSpot MCToggler_Open toggler MCTogglerHotSpot_ MCHotSpotImage" data-mc-targets="TOGUDPServerSocket"><img class="MCToggler_Image_Icon" src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Example</a>
                                                            </p>
                                                            <div style="display: none;" data-mc-target-name="TOGUDPServerSocket">
                                                                <p class="Table">This example demonstrates an UDP server socket to receive data via UDP and sent data via UDP as response to an UDP client socket. In particular the sequence of the function calls and additional functions for error handling are shown. The relevant UDP socket functions are highlighted.</p>
                                                                <p class="TableSourceCode">variables<br />{<br />&#160;&#160;// some error codes<br />&#160;&#160;const dword SUCCESS = 0;<br />&#160;&#160;const dword WSA_IO_PENDING = 997;<br />&#160;&#160;const dword INVALID_SOCKET = ~0;<br /><br />&#160;&#160;// global variables<br />&#160;&#160;ip_Endpoint UDP:0.0.0.0:12345 localEndpoint;<br />&#160;&#160;dword gUdpSocketHandle = INVALID_SOCKET;<br />&#160;&#160;char gRxBuffer[1472]; // Max. UDP payload without fragmentation<br />&#160;&#160;char gErrorText[200];<br />}<br /><br />//<br />// Open a UDP socket and start receiving data<br />//<br />on start<br />{<br />&#160;&#160;long result;<br /><br />&#160;&#160;// Open UDP socket<br />&#160;&#160;gUdpSocketHandle = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionUDPOpen.htm">UdpOpen</a>(localEndpoint);<br /><br />&#160;&#160;// Check for valid socket handle<br />&#160;&#160;if (gUdpSocketHandle == INVALID_SOCKET)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;write("&lt;%BASE_FILE_NAME%&gt; UdpOpen failed (Result %d)", <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastError.htm">IpGetLastError</a>());<br />&#160;&#160;&#160;&#160;return;<br />&#160;&#160;}<br /><br />&#160;&#160;// start receive data<br />&#160;&#160;result = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionUDPReceiveFrom.htm">UdpReceiveFrom</a>(gUdpSocketHandle, gRxBuffer, elcount(gRxBuffer));<br />&#160;&#160;if ( result != SUCCESS &amp;&amp; <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(gUdpSocketHandle) != WSA_IO_PENDING )<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketErrorAsString.htm">IpGetLastSocketErrorAsString</a>(gUdpSocketHandle, gErrorText, elcount(gErrorText));<br />&#160;&#160;&#160;&#160;write("&lt;%BASE_FILE_NAME%&gt; UdpReceiveFrom failed, %s (Result %d)", gErrorText, <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(gUdpSocketHandle));<br />&#160;&#160;}<br />}<br /><br />//<br />// Callback function for reception of data<br />//<br /><a href="../../../CAPLFunctions/TCPIPAPI/EventProcedures/CAPLfunctionTCPIPOnUdpReceiveFrom.htm">OnUdpReceiveFrom</a>(dword socket, long result, IP_Endpoint remoteEndpoint, char buffer[], dword size)<br />{<br />&#160;&#160;char endpointText[30];<br />&#160;&#160;char textData[20] = "Hello UDP Client";<br />&#160;&#160;if ( result == SUCCESS )<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;remoteEndpoint.PrintEndpointToString(endpointText);<br />&#160;&#160;&#160;&#160;write("&lt;%BASE_FILE_NAME%&gt; received: %s from %s", buffer, endpointText);<br />&#160;&#160;&#160;&#160;// Do something with the data, e.g. send answer to UDP client<br />&#160;&#160;&#160;&#160;result = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionUDPSendTo.htm">UdpSendTo</a>(socket, remoteEndpoint, textData, strlen(textData));<br />&#160;&#160;&#160;&#160;if ( (result != SUCCESS) &amp;&amp; (<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(socket) != WSA_IO_PENDING) )<br />&#160;&#160;&#160;&#160;{<br />&#160;&#160;&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketErrorAsString.htm">IpGetLastSocketErrorAsString</a>(socket, gErrorText, elcount(gErrorText));<br />&#160;&#160;&#160;&#160;&#160;&#160;write("&lt;%BASE_FILE_NAME%&gt; UdpSendTo failed, %s (Result %d)", gErrorText, <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(socket));<br />&#160;&#160;&#160;&#160;}<br />&#160;&#160;}<br />&#160;&#160;else<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;write("&lt;%BASE_FILE_NAME%&gt; OnUdpReceiveFrom failed (Result %d)", result);<br />&#160;&#160;}<br /><br />&#160;&#160;// Prepare for next receive<br />&#160;&#160;result = <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionUDPReceiveFrom.htm">UdpReceiveFrom</a>(socket, gRxBuffer, elcount(gRxBuffer));<br />&#160;&#160;if ( result != SUCCESS &amp;&amp; <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(gUdpSocketHandle) != WSA_IO_PENDING )<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketErrorAsString.htm">IpGetLastSocketErrorAsString</a>(gUdpSocketHandle, gErrorText, elcount(gErrorText));<br />&#160;&#160;&#160;&#160;write("&lt;%BASE_FILE_NAME%&gt; UdpReceiveFrom failed, %s (Result %d)", gErrorText, <a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionIPGetLastSocketError.htm">IpGetLastSocketError</a>(gUdpSocketHandle));<br />&#160;&#160;}<br />}<br /><br />//<br />// Close socket on measurement stop<br />//<br />on preStop<br />{<br />&#160;&#160;if(gUdpSocketHandle != INVALID_SOCKET)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<a href="../../../CAPLFunctions/TCPIPAPI/Functions/CAPLfunctionUDPClose.htm">UdpClose</a>(gUdpSocketHandle);<br />&#160;&#160;}<br />}</p>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <th colspan="2" class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="TableHead">Topics Overview</p>
                                </th>
                            </tr>
                            <tr data-mc-conditions="vConditions.vTESTstudioExcluded">
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><a href="../../../CANoeCANalyzer/Ethernet/TCPIPNetworkSettings/TCPIPNetworkSettings.htm" class="MCXref xref">TCP/IP Stack</a>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">On this page you can find information about the configuration of TCP/IP stacks.</p>
                                </td>
                            </tr>
                            <tr data-mc-conditions="">
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><a href="SocketBasedCommunication.htm" class="MCXref xref">Socket based Communication</a>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">On this page you can find information about the socked based communication.</p>
                                </td>
                            </tr>
                            <tr data-mc-conditions="">
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><a href="SocketInCANoe.htm" class="MCXref xref">Use Sockets</a>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">On this page you can find information about using sockets (client and server side).</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><a href="IPAddressByteOrdering.htm">IP Address Byte Ordering</a>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">On this page you can find information about the byte order of IPv4 and IPv6 addresses.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><a href="../../../CAPLFunctions/TCPIPAPI/CAPLfunctionsTCPIPOverview.htm">TCP/IP CAPL Functions</a>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">On this page you can find an overview of all TCP/IP CAPL&#160;functions. </p>
                                </td>
                            </tr>
                            <tr data-mc-conditions="vConditions.vTESTstudioExcluded,vConditions.CANoeOnly">
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table"><a href="../../../SampConf/Ethernet/CANoe/Chat/ChatTCPcn.htm">Sample Configuration <span class="bold">TCP Chat</span></a>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColEnd">
                                    <p class="Table">In the example <span class="bold">TCP Chat</span> the functions of the TCP/IP API are used.</p>
                                    <p class="Table">The sample configuration can only be loaded with a installed <span class="Product">Ethernet</span> option.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <p class="LinkList">&#160;</p>
            </div>
        </div>
        <div class="Footer">
            <div class="FooterWhite">
                <table class="FooterWhite" style="border-collapse: collapse;margin-left: auto;margin-right: auto;">
                    <col style="width: 70px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col style="width: 16px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col />
                    <tbody>
                        <tr>
                            <td>
                                <div class="buttons popup-container clearfix topicToolbarProxy topicToolbarProxyFooter _Skins_HTML5TopicToolbar mc-component nocontent">
                                    <div class="button-group-container-left">
                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                            <div>
                                                <div role="img" class="button-icon-wrapper" aria-label="Expand all">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                        <button class="button needs-pie remove-highlight-button" title="Remove Highlights">
                                            <div>
                                                <div role="img" class="button-icon-wrapper">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <p class="vec_BuildInfo"><a href="../../HowToUseOnlineHelp.htm" title="Tips for using the help" alt="Tips for using the help"><img src="../../../../Resources/vImages/vBackstage/vHelpInfo.png" /></a>
                                </p>
                            </td>
                            <td>
                                <p class="vec_BuildInfo" style="text-align: right;"><span class="mc-variable Vector.BuildTime variable">2023-09-26T19:49:32</span>
                                </p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <table style="width: 100%;border-collapse: separate;border-spacing: 3px 0px;margin-left: auto;margin-right: auto;caption-side: top;">
                <col />
                <col />
                <col />
                <col data-mc-conditions="vConditions.HTML5Link" />
                <tbody>
                    <tr>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;">
                            <p class="vec_Footer">Â©&#160;Vector Informatik GmbH</p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;text-align: right;">
                            <p class="vec_FooterBold">
                                <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded,vConditions.TestDataEditorExcluded">CANoe</MadCap:conditionalText> Version <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded">17 SP3</MadCap:conditionalText></p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="../../ContactCopyrightLicense.htm" class="vec_Footer MCXref xref xrefvec_Footer">Contact/Copyright/License</a>
                            </p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="https://www.vector.com/int/en/company/get-info/privacy-policy/" target="_blank" class="vec_Footer">Data Privacy Notice</a>
                            </p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>
</html>