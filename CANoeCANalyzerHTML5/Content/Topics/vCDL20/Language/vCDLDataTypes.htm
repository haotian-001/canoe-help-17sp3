<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="CANoeCANalyzer.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../../Skins/Favicons/browserconfig.xml" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../Skins/Favicons/favicon-16x16.png" /><title>Data Types (vCDL 2.0)</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Resources/Stylesheets/vTableMasterPageHeader.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../Resources/Stylesheets/vStylesheet.css" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.expand-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.remove-highlight-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.collapse-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.needs-pie
{
	behavior: url('../../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../../Resources/Stylesheets/vTableSymbol.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../Resources/Stylesheets/vTablePageTOC.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../Resources/Stylesheets/vTable.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../Resources/Stylesheets/vTableLight.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../Skins/Favicons/favicon-16x16.png" />
        <script src="../../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapGlobal.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapDom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapUtilities.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapXhr.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTextEffects.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSlideshow.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMessageBus.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMessageBus.CrossFrame.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapDefault.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMediaQueries.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAccessibility.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapHelpSystem.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAliasFile.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopicFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapFeedbackHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSkinHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.MiniToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.SideMenu.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapIndex.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapGlossary.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapParser.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSearch.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapNavigateTopics.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapLms.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapELearning.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopic.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMicroContentComponent.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSearchHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopicElements.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTriPane.js" type="text/javascript" defer="defer">
        </script>
        <script type="text/jscript" src="../../../Resources/vScripts/SyntaxHighlighting.js">
        </script>
        <script type="text/jscript" src="../../../Resources/vScripts/TabSwitch.js">
        </script>
        <script type="text/javascript" src="../../../Resources/vScripts/Vector.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../CANoeCANalyzer.htm#Topics/vCDL20/Language/vCDLDataTypes.htm">Open topic with navigation</a>
        </p>
        <div class="Body">
            <div role="main" id="mc-main-content">
                <div>
                    <p class="StructurePath"><a href="../../CANoeCANalyzer/CANoeCANalyzer.htm" class="StructurePath" data-mc-conditions="vConditions.CANalyzerExclude,vConditions.CANoe4ServerExcluded,vConditions.CANoe4SWExcluded,vConditions.TestDataEditorExcluded,vConditions.vTESTstudioExcluded,vConditions.TestUnitRunnerExcluded,vConditions.CANoeNMExcluded"><img src="../../../Resources/vImages/vToolIcons/CANoe_Icon16.png" alt="" />&#160;CANoe</a> » <a href="../../vCDL/vCDLStartpage.htm" class="StructurePath">vCDL</a> » <a href="../Concept/vCDL20.htm" class="StructurePath">vCDL 2.0</a> » Language » Data Types</p>
                    <h1>Data Types</h1>
                    <p class="MenuPath">Navigation: <a href="vCDLAttributes.htm" class="MenuPath">« Attributes</a>&#160;&#160;•&#160;&#160;<a href="vCDLDistributedObjects.htm" class="MenuPath">Distributed Objects »</a></p>
                    <p class="AutoSearchFilterConcepts"><a name="aanchor743"></a>
                        <MadCap:concept term="SFvCDL" />
                    </p>
                    <p class="IndexConcept"><a name="kanchor623"></a>
                    </p>
                </div>
                <p>Data types are the backbone of most more sophisticated artefacts such as distributed objects and system variables and thus make up a fairly large part of vCDL.</p>
                <div>
                    <p class="TableCOM"><a name="Shortcuts" id="Shortcuts"></a><span class="red">ON THIS&#160;PAGE:</span>
                    </p>
                    <table style="mc-table-style: url('../../../Resources/Stylesheets/vTablePageTOC.css');" class="TableStyle-vTablePageTOC" cellspacing="2">
                        <col class="TableStyle-vTablePageTOC-Column-Column1" />
                        <col class="TableStyle-vTablePageTOC-Column-Column1" />
                        <tbody>
                            <tr class="TableStyle-vTablePageTOC-Body-Body1">
                                <td class="TableStyle-vTablePageTOC-BodyB-Column1-Body1">
                                    <p class="PageTOC"><a href="#BMPlainTypes" class="PageTOC">Plain Types</a>
                                    </p>
                                    <p class="PageTOC"><a href="#BMContainerTypes" class="PageTOC">Container Types</a>
                                    </p>
                                    <p class="PageTOC"><a href="#BMCompositeTypes" class="PageTOC">Composite Types</a>
                                    </p>
                                    <p class="PageTOC"><a href="#BMEncodings" class="PageTOC">Encodings</a>
                                    </p>
                                </td>
                                <td class="TableStyle-vTablePageTOC-BodyA-Column1-Body1">
                                    <p class="PageTOC"><a href="#BMEnumerations" class="PageTOC">Enumerations</a>
                                    </p>
                                    <p class="PageTOC"><a href="#BMBitFields" class="PageTOC">Bitfields</a>
                                    </p>
                                    <p class="PageTOC"><a href="#BMTypedefs" class="PageTOC">Typedefs</a>
                                    </p>
                                    <p class="PageTOC"><a href="#BMFunctionPrototypes" class="PageTOC">Function Prototypes</a>
                                    </p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionMain"><a name="BMPlainTypes" id="BMPlainTypes"></a>Plain Types <a href="#Shortcuts" class="TopOfPage">[▲ back]</a></h2>
                <p>vCDL supports the standard plain types such as void, bool, int, float, double, time, string, and bytes.</p>
                <h2 class="SectionSub">Example</h2>
                <p class="SourceCode"><span class="CodeDataType">void</span>
                    <br /><span class="CodeDataType">bool</span>
                    <br /><span class="CodeDataType">int</span> <span class="CodeComment">// = int64</span><br /><span class="CodeDataType">int3</span><br /><span class="CodeDataType">int32</span><br /><span class="CodeDataType">int64</span><br /><span class="CodeDataType">uint</span> <span class="CodeComment">// = uint64</span><br /><span class="CodeDataType">uint7</span><br /><span class="CodeDataType">uint16</span><br /><span class="CodeDataType">uint64</span><br /><span class="CodeDataType">float</span><br /><span class="CodeDataType">double</span><br /><span class="CodeDataType">time</span><br /><span class="CodeDataType">string</span> <span class="CodeComment">// = string_utf8</span><br /><span class="CodeDataType">string_utf8</span><br /><span class="CodeDataType">string_utf16</span><br /><span class="CodeDataType">string_win1252</span><br /><span class="CodeDataType">string_win1252</span><br /><span class="CodeDataType">string_iso88591</span><br /><span class="CodeDataType">string_iso88592</span><br /><span class="CodeDataType">bytes</span></p>
                <p>Integer types without bit width are assumed to have the maximum bit width of 64. They have been introduced in vCDL 2.0 to eliminate a pitfall which many developers encountered that are used to languages like C, C#, and Java. The string type also comes in different variants where the respective Encoding attribute is already part of string type which allows for cleaner code.</p>
                <h2 class="SectionSub">Attributes</h2>
                <p>Many attributes are allowed at multiple plain types, but not at all of them which is reflected in this table. Some attributes such as Min and Max accept different values depending on the data type they are attached to.</p>
                <div>
                    <table style="mc-table-style: url('../../../Resources/Stylesheets/vTable.css');margin-left: 0;margin-right: auto;" class="TableStyle_vTable" cellspacing="0">
                        <col />
                        <col />
                        <col />
                        <col />
                        <col />
                        <col />
                        <col />
                        <col />
                        <col />
                        <col />
                        <col />
                        <thead>
                            <tr>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep" rowspan="2">
                                    <p class="TableHead">Name</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep" rowspan="2">
                                    <p class="TableHead">Type</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep" rowspan="2">
                                    <p class="TableHead">Default</p>
                                </th>
                                <th colspan="7" class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Allowed At</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColEnd" rowspan="2">
                                    <p class="TableHead">Description</p>
                                </th>
                            </tr>
                            <tr>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">void</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">bool</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">time</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">int</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">float</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">string</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">bytes</p>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">ByteOrder</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax">{Intel,  Motorola}</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax">Intel</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Whether Motorola or Intel byte order should be used.</p>
                                </td>
                            </tr>
                            <tr>
                                <td rowspan="2" colspan="1" class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">RawType</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Any integer type</p>
                                </td>
                                <td rowspan="2" colspan="1" class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Implementation type</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td rowspan="2" colspan="1" class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Data type to be used for serialization or the implementation type if omitted.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Any float type</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                            </tr>
                            <tr>
                                <td rowspan="2" colspan="1" class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">ImplType</span>
                                    </p>
                                </td>
                                <td rowspan="2" colspan="1" class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Any integer type</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax">uint1</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">—</td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">—</td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td rowspan="2" colspan="1" class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Integer type for internal value representation.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax">int64</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                            </tr>
                            <tr>
                                <td rowspan="3" colspan="1" class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">Min</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="TableSyntax"><span class="CodeDataType">time</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td rowspan="3" colspan="1" class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Minimum value in physical representation.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="TableSyntax"><span class="CodeDataType">int</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="TableSyntax"><span class="CodeDataType">float</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                            </tr>
                            <tr>
                                <td rowspan="3" colspan="1" class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">Max</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="TableSyntax"><span class="CodeDataType">time</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td rowspan="3" colspan="1" class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Maximum value in physical representation.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="TableSyntax"><span class="CodeDataType">int</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="TableSyntax"><span class="CodeDataType">float</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">Impl2Phys</span>
                                    </p>
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">Raw2Phys</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Textual encodings (by reference) and/or linear encodings (by reference or inline)</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table"><a href="#BMEncodings">Encodings</a> for converting the implementation (impl) and network (raw) representation into the physical representation.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">Unit</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax">string</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">""</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">The unit for any inline defined linear encoding at Impl2Phys and/or Raw2Phys.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">BitFields</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Reference to bitfields</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table"><a href="#BMBitFields">Bit fields</a> for identifying named masked values.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">Encoding</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax">{UTF8, UTF16, ISO88591, ISO88592,  Windows1252}</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax">UTF8</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Character encoding of the string.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">MaxBytes</span>
                                    </p>
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">MaxChars</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Syntax">nullable&lt;uint&gt;</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Syntax">null</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table">✔</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColEnd">
                                    <p class="Table">Maximum number of bytes or characters that can be stored in the string including any terminal \0 character. Both attributes must not be used at the same time. MaxChars is translated into MaxBytes considering Encoding. For variable length encodings (UTF8 and UTF16) each character is assumed to cover 4 bytes.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionSub">Syntax</h2>
                <table style="width: 100%;mc-table-style: url('../../../Resources/Stylesheets/vTableLight.css');" class="TableStyle-vTableLight" cellspacing="0">
                    <col class="TableStyle-vTableLight-Column-Column1" style="width: 165px;" />
                    <col class="TableStyle-vTableLight-Column-Column1" />
                    <tbody>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">data-type:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="Table"><span class="SourceCode"> void-type | bool-type | int-type | float-type | time-type | string-type | bytes-type |</span> (other data types)</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">void-type:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"><span class="Keyword">void</span>
                                </p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">bool-type:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"><span class="Keyword">bool</span>
                                </p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">int-type:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="Table"><span class="SourceCode">(<span class="Keyword">int</span>|<span class="Keyword">uint</span>)(n)?</span> 1 ≤ n ≤ 64</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">float-type:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"><span class="Keyword"> float</span> | <span class="Keyword">double</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">time-type:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"><span class="Keyword">time</span>
                                </p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">string-type:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"><span class="Keyword">string</span>(<span class="Keyword">_utf8</span>|<span class="Keyword">_utf16</span>|<span class="Keyword">_win1252</span>|<span class="Keyword">_iso88591</span>|<span class="Keyword">_iso88592</span>)?</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyB-Column1-Body1">
                                <p class="TableSyntax">bytes-type:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyA-Column1-Body1">
                                <p class="TableSyntax"><span class="Keyword">bytes</span>
                                </p>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <h2 class="SectionMain"><a name="BMContainerTypes" id="BMContainerTypes"></a>Container Types <a href="#Shortcuts" class="TopOfPage">[▲ back]</a></h2>
                <p>Sequences can be modeled with arrays and lists. Both are very similar, but an array always has the same minimum and maximum length while for a list these do not need to be equal or can be skipped completely. The minimum length will default to 0 while a missing maximum length will make the list unbound. Container types are used inline.</p>
                <h2 class="SectionSub">Example</h2>
                <p class="SourceCode"><span class="CodeDataType">array</span>&lt;<span class="CodeDataType">int32</span>, <span class="CodeNumericalLiteral">6</span>&gt; <span class="CodeComment">// Array of length 6</span><br /><br /><span class="CodeDataType">list</span>&lt;<span class="CodeDataType">float</span>&gt;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="CodeComment">// Unbounded list</span><br /><span class="CodeDataType">list</span>&lt;<span class="CodeDataType">float</span>, <span class="CodeNumericalLiteral">20</span>&gt; &#160;&#160;&#160;<span class="CodeComment">// List with only a maximum length</span><br /><span class="CodeDataType">list</span>&lt;<span class="CodeDataType">float</span>, <span class="CodeNumericalLiteral">5</span>, <span class="CodeNumericalLiteral">20</span>&gt;&#160;<span class="CodeComment">// List with minimum and maximum length</span><br /><span class="CodeDataType">list</span>&lt;<span class="CodeDataType">float</span>, <span class="CodeNumericalLiteral">5</span>, _&gt;&#160;&#160;<span class="CodeComment">// List with only a minimum length</span><br /><br /><span class="CodeDataType">list</span>&lt;<span class="CodeDataType">array</span>&lt;<span class="CodeDataType">string</span>, SomeLengthConstant&gt;&gt; <span class="CodeComment">// Nested container types</span><br /><br /><span class="CodeDataType">array</span>&lt;<span class="CodeDataType">bool</span>, <span class="CodeNumericalLiteral">5</span>+<span class="CodeNumericalLiteral">7</span>&gt;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="CodeComment">// Array with expression as length</span><br /><span class="CodeDataType">array</span>&lt;<span class="CodeDataType">bool</span>, (<span class="CodeNumericalLiteral">32</span> &gt;&gt; <span class="CodeNumericalLiteral">1</span>)&gt;&#160;<span class="CodeComment">// Parantheses required around length expression</span></p>
                <p>An array always requires two parameters in laced brackets (type and length) while the number of parameters for a list may vary between one and three. In contrast to vCDL 1.4 minimum and maximum length are treated equally, meaning both are defined within the laced brackets and there is no attribute for the minimum length. To keep the option of just specifying the minimum length an ellipsis (underscore) can be used instead of the maximum length.</p>
                <p>The example also demonstrates how to use expressions within the laced brackets. Keep in mind that if any operators other than the line (+,-) and point (*,/,%) operators are used, e.g., a shift operator, the whole expression must be surrounded by parentheses.</p>
                <h2 class="SectionSub">Attributes</h2>
                <div>
                    <table style="mc-table-style: url('../../../Resources/Stylesheets/vTable.css');margin-left: 0;margin-right: auto;" class="TableStyle_vTable" cellspacing="0">
                        <col />
                        <col />
                        <col />
                        <col />
                        <thead>
                            <tr>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Name</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Type</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Default</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColEnd">
                                    <p class="TableHead">Semantics</p>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">ByteOrder</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="TableSyntax">{Intel,&#160;Motorola}</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="TableSyntax">Intel</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Whether Motorola or Intel byte order should be used.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">FixLayout</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="TableSyntax"><span class="CodeDataType">bool</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="TableSyntax"><span class="CodeKeyword">false</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColEnd">
                                    <p class="Table">Whether the container type’s layout is fixed. A fixed layout is only possible if the element type itself has a fixed layout and minimum and maximum length of the container are equal (always true for arrays).</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionSub">Syntax</h2>
                <table style="width: 100%;mc-table-style: url('../../../Resources/Stylesheets/vTableLight.css');" class="TableStyle-vTableLight" cellspacing="0">
                    <col class="TableStyle-vTableLight-Column-Column1" style="width: 165px;" />
                    <col class="TableStyle-vTableLight-Column-Column1" />
                    <tbody>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">data-type:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">array-type | list-type | (other data types)</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">array-type:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"><span class="Keyword">array</span> <span class="Keyword">&lt;</span> container-type <span class="Keyword">,</span> expression[uint-value] <span class="Keyword">&gt;</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">list-type:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"><span class="Keyword">list</span> <span class="Keyword">&lt;</span> container-type ( <span class="Keyword">,</span> opt-expression ( <span class="Keyword">,</span> opt-expression )? )? <span class="Keyword">&gt;</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">container-type:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">attributes data-type attributes</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyB-Column1-Body1">
                                <p class="TableSyntax">opt-expression:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyA-Column1-Body1">
                                <p class="TableSyntax">expression[uint-value] | <span class="Keyword">_</span></p>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <h2 class="SectionMain"><a name="BMCompositeTypes" id="BMCompositeTypes"></a>Composite Types (Structs and Unions) <a href="#Shortcuts" class="TopOfPage">[▲ back]</a></h2>
                <p>Composite types are based on simpler types. While struct types aggregate data of different types into a new larger type, union types are designed to only hold one piece of data at a time. While struct types are at least as large as the sum of all their members’ data types, union types are only as large as the members’ largest data type. Composite types can be declared only on namespace level.</p>
                <h2 class="SectionSub">Example</h2>
                <h2>Structs</h2>
                <p class="SourceCode">[<span class="CodeAttributeKey_Namespace">FixLayout</span>]<br /><span class="CodeKeyword">struct</span> Position<br />{<br />&#160;&#160;<span class="CodeDataType">float</span> x;<br />&#160;&#160;<span class="CodeDataType">float</span> y, z; <span class="CodeComment">// Multiple members on same line</span><br />}<br /><br />[!<span class="CodeAttributeKey_Namespace">FixLayout</span>]<br /><span class="CodeKeyword">struct</span> ExtendedPosition<br />{<br />&#160;&#160;<span class="CodeKeyword">embed</span> Position;<br /><br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">Optional</span>]<br />&#160;&#160;<span class="CodeDataType">time</span> lastUpdate;<br /><br />&#160;&#160;<span class="CodeComment">// Refinement does not affect the original type 'Position'</span><br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">RelOffset</span>=<span class="CodeNumericalLiteral">2</span>]<br />&#160;&#160;<span class="CodeKeyword">refine</span> x, y, z;<br />}</p>
                <p>With vCDL 2.0 it is possible to embed struct types into other struct types. Although CANoe holds some meta information about the embedding it is semantically the same as rewriting all the embedded members within the new struct type. However, it helps in keeping your code consistent and ensuring that if the embedded struct type is updated, all the other struct types use the updated members as well. Embedded struct members do not exist syntactically in the vCDL file, thus requiring refinements to add or change their attributes.</p>
                <h2>Unions</h2>
                <p class="SourceCode"><span class="CodeKeyword">union</span> GenericValue<br />{<br />&#160;&#160;<span class="CodeDataType">int32</span>&#160;&#160;intValue;<br />&#160;&#160;<span class="CodeDataType">float</span>&#160;&#160;floatValue;<br />&#160;&#160;<span class="CodeDataType">string</span>&#160;stringValue;<br />}<br /></p>
                <p>Union types are declared in a comparable way to structs but lag the option of embedding other union types. To make a union type work as intended, it needs to be used as member inside of a struct type. The latter provides a member which serves as discriminator meaning depending on its value a specific member of the union type is considered valid.</p>
                <p class="SourceCode"><span class="CodeKeyword">union</span> GenericValue<br />{<br />&#160;&#160;<span class="CodeComment">// Single discriminator value</span><br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">DiscriminatorValue</span>=<span class="CodeNumericalLiteral">1</span>]<br />&#160;&#160;<span class="CodeDataType">int32</span> IntValue;<br /><br />&#160;&#160;<span class="CodeComment">// Single range of discriminator values yielding 2,3,4</span><br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">DiscriminatorValues</span>={{<span class="CodeNumericalLiteral">2</span>,<span class="CodeNumericalLiteral">4</span>}}]<br />&#160;&#160;<span class="CodeDataType">float</span> FloatValue;<br /><br />&#160;&#160;<span class="CodeComment">// Multiple ranges combined with a single value</span><br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">DiscriminatorValues</span>={{<span class="CodeNumericalLiteral">5</span>,<span class="CodeNumericalLiteral">9</span>},<span class="CodeNumericalLiteral">13</span>,{<span class="CodeNumericalLiteral">15</span>,<span class="CodeNumericalLiteral">20</span>}}]<br />&#160;&#160;<span class="CodeDataType">string</span> StringValue;<br />}<br /><br /><span class="CodeKeyword">struct</span> GenericStruct<br />{<br />&#160;&#160;<span class="CodeDataType">uint16</span> IntMember;<br /><br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">Discriminator</span>=IntMember]<br />&#160;&#160;GenericValue Value;<br />}</p>
                <p>Each union member can be assigned an arbitrary amount of discriminator value ranges where each is either a single value or a pair of lower and upper bound, both inclusive. Note that in order to specify a single value range two curly brackets are required on each side. If in the example above the attribute value was only {2,4}, it would have been equivalent to {{2,2},{4,4}} meaning 3 would be excluded. In this concrete example {2,3,4} is probably the most readable solution anyway.</p>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../Resources/vImages/vInfo.png" style="width: 48px;height: 45px;" title="Note" alt="Note" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Note</p>
                                    <p class="Table">Union types can be used in struct types without an explicit discriminator (and discriminator values at union members). In this case the struct type has an additional member that serves as an implicit discriminator. Note that the struct type can then no longer have a fixed layout.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionSub">Attributes</h2>
                <p>Attributes that are allowed at both struct and union types:</p>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../Resources/vImages/vInfo.png" style="width: 48px;height: 45px;" title="Note" alt="Note" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Note</p>
                                    <p class="Table">Please note that some attributes are integrated in namespaces and the call must be adapted accordingly.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div>
                    <table style="mc-table-style: url('../../../Resources/Stylesheets/vTable.css');margin-left: 0;margin-right: auto;" class="TableStyle_vTable" cellspacing="0">
                        <col />
                        <col />
                        <col />
                        <col />
                        <col />
                        <thead>
                            <tr>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Name</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Type</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Default</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Allowed At</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColEnd">
                                    <p class="TableHead">Semantics</p>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">ByteOrder</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax">{Intel, Motorola}</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax">Intel</p>
                                </td>
                                <td rowspan="3" colspan="1" class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Struct and union type</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Whether Motorola or Intel byte order should be used.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">FixLayout</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax"><span class="CodeDataType">bool</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax">false</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Whether the composite type’s layout is fixed. A fixed layout is only possible if all members’ data types have also a fixed layout and in case of struct types no struct member is optional.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">BitCount</span>
                                    </p>
                                    <p class="Table"> <span class="CodeAttributeKey_Namespace">RawBitCount</span></p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax">nullable&lt;uint&gt;</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax">null</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Bit count of the type's internal representation (BitCount) or network representation (RawBitCount)  which is only relevant when the type’s layout is fixed. If set it must be at least as large as the sum of all struct members’ (raw) bit counts / the largest union member’s (raw) bit count.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">RelOffset</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax"><span class="CodeDataType">uint</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeNumericalLiteral">0</span>
                                    </p>
                                </td>
                                <td rowspan="2" colspan="1" class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Struct member</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Offset in bits of a struct member relative to its predecessor or the beginning of the struct type in case of the first struct member.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">Optional</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax"><span class="CodeDataType">bool</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax">false</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Whether the struct member is optional.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">Discriminator</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Reference to struct member</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Union typed struct member</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Another (integer typed)  struct member of the same  struct type that serves as discriminator for this union typed struct member. If not specified, the struct type will contain an additional (implicit) member to be used as discriminator.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">DiscriminatorValue</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax"><span class="CodeDataType">uint</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td rowspan="2" colspan="1" class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Union member</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">A single discriminator value to select this member.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">DiscriminatorValues</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="SourceCode">list&lt;uint</span> or <span class="SourceCode">pair&lt;uint&gt;&gt;</span></p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">One or more  discriminator value ranges to select this member.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">DeriveDiscriminatorValues</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax"><span class="CodeDataType">bool</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax">false</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Union type</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">When an explicit discriminator is specified, it is mandatory for the union members to have discriminator values. However, they can be omitted in favor of specifying this attribute which is short for specifying DiscriminatorValue=member-index at each union member.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="SourceCode">SerializationAttributes::GoogleProtobuf::</span><span class="CodeAttributeKey_Namespace">MessageFieldIndex</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeDataType">uint</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Struct and union member</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Determines which index is used for the corresponding field in the GPB message.</p>
                                    <p class="Table">Import of namespace necessary: <span class="SourceCode">import module "SerializationAttributes";</span></p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="SourceCode">SerializationAttributes::GoogleProtobuf::</span><span class="CodeAttributeKey_Namespace">ScalarValueMode</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="TableSyntax">{Default, Normal, Signed, Fixed}</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Default</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Struct and union member</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">The serialization mode to be used for int and uint in GPB serialization.</p>
                                    <p class="Table">Import of namespace necessary: <span class="SourceCode">import module "SerializationAttributes";</span></p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table"><span class="SourceCode">SerializationAttributes::</span><span class="CodeAttributeKey_Namespace">Name</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table"><span class="CodeDataType">string</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table">—</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table">Struct and union member</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColEnd">
                                    <p class="Table">The name to be used in the serialization instead of the member’s name.</p>
                                    <p class="Table">Import of namespace necessary: <span class="SourceCode">import module "SerializationAttributes";</span></p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionSub">Syntax</h2>
                <table style="width: 100%;mc-table-style: url('../../../Resources/Stylesheets/vTableLight.css');" class="TableStyle-vTableLight" cellspacing="0">
                    <col class="TableStyle-vTableLight-Column-Column1" style="width: 165px;" />
                    <col class="TableStyle-vTableLight-Column-Column1" />
                    <tbody>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">struct-type:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">attributes <span class="Keyword">struct</span> identifier <span class="Keyword">{</span> struct-member* <span class="Keyword">}</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">struct-member:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">value-members | embedded-struct | refinement</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">value-members:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">attributes data-type value-member ( <span class="Keyword">,</span> value-member )* <span class="Keyword">;</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">value-member:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">attributes identifier attributes</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">embedded-struct:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"><span class="Keyword">embed</span> reference ( <span class="Keyword">,</span> reference )* <span class="Keyword">;</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="Table">&#160;</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="Table">&#160;</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">union-type:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">attributes <span class="Keyword">union</span> identifier <span class="Keyword">{</span> union-members* <span class="Keyword">}</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">union-members:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">attributes data-type union-member ( <span class="Keyword">,</span> union-member )* <span class="Keyword">;</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyB-Column1-Body1">
                                <p class="TableSyntax">union-member:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyA-Column1-Body1">
                                <p class="TableSyntax">attributes identifier attributes</p>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <h2 class="SectionMain"><a name="BMEncodings" id="BMEncodings"></a>Encodings <a href="#Shortcuts" class="TopOfPage">[▲ back]</a></h2>
                <p>When setting an element’s data type, e.g., a struct member or a DO data member, this data type is internally referred to as the implementation type which basically is the data type that is used for simulation. However, there is also the raw data type to define how data is represented, e.g., on a bus, and the physical data type. For numerical data types both may differ from each other and from the implementation data type. The physical data type is always derived, but the raw data type can be set explicitly via an attribute.</p>
                <p>All three data types represent the same data within different contexts. Encodings can be used to describe how these representations are related to each other. There are two types of encodings: Linear and textual encodings. Linear encodings provide a numerical transformation rule on how to convert from one representation to another whereas textual encodings assign meaningful names to single values or intervals. Both encodings divide the data type’s representable value range into one or more intervals where each interval can have a different transformation rule (linear encoding) or textual representation (textual encoding). Intervals are defined using the comparison operators in combination with the predefined variable x.</p>
                <p>When encodings are defined explicitly it must be done on namespace level.</p>
                <h2 class="SectionSub">Example</h2>
                <p class="SourceCode">[<span class="CodeAttributeKey_Namespace">Unit</span>=<span class="CodeStringLiteral">"°C"</span>]<br /><span class="CodeKeyword">encoding</span> LinearEncoding : <span class="CodeDataType">int32</span><br />{<br />&#160;&#160;<span class="CodeNumericalLiteral">2</span> * <span class="CodeFormulaVariable">x</span> <span class="CodeKeyword">where</span> x &lt; <span class="CodeNumericalLiteral">0</span>,<br />&#160;&#160;-<span class="CodeFormulaVariable">x</span>&#160;&#160;&#160;&#160;<span class="CodeKeyword">where</span> 0 &lt;= x &lt;= <span class="CodeNumericalLiteral">10</span> [<span class="CodeAttributeKey_Namespace">Unit</span>=<span class="CodeStringLiteral">"°F"</span>],<br />&#160;&#160;<span class="CodeNumericalLiteral">2</span> * <span class="CodeFormulaVariable">x</span> - <span class="CodeNumericalLiteral">30</span>, <span class="CodeComment">// default</span><br />}<br /><br /><span class="CodeKeyword">encoding</span> TextualEncoding : <span class="CodeDataType">int32</span><br />{<br />&#160;&#160;<span class="CodeStringLiteral">"null"</span>&#160;&#160;&#160;&#160;<span class="CodeKeyword">where</span> <span class="CodeFormulaVariable">x</span> == <span class="CodeNumericalLiteral">0</span> &#160;&#160;&#160;[<span class="CodeAttributeKey_Namespace">Display</span>=<span class="CodeStringLiteral">"freezing point"</span>],<br />&#160;&#160;<span class="CodeStringLiteral">"minimum"</span> <span class="CodeKeyword">where</span> <span class="CodeFormulaVariable">x</span> == <span class="CodeNumericalLiteral">-273</span> [<span class="CodeAttributeKey_Namespace">Display</span>=<span class="CodeStringLiteral">"absolute zero"</span>],<br />}<br /><br />[<span class="CodeAttributeKey_Namespace">Impl2Phys</span>=(LinearEncoding, TextualEncoding), <span class="CodeAttributeKey_Namespace">Raw2Phys</span>=<span class="CodeNumericalLiteral">3</span>*<span class="CodeFormulaVariable">x</span>+<span class="CodeNumericalLiteral">2</span>, <span class="CodeAttributeKey_Namespace">Unit</span>=<span class="CodeStringLiteral">"°C"</span>]<br /><span class="CodeKeyword">typedef</span> Temperature = <span class="CodeDataType">int32</span>;</p>
                <p>Linear and textual encodings are defined the same way with the only difference in the type of value specified for each interval. Textual encodings expect expressions that evaluate to a string value while linear encodings expect any zero- or first-degree polynom with respect to x. Trying to mix both encoding types will yield an error.</p>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../Resources/vImages/vInfo.png" style="width: 48px;height: 45px;" title="Note" alt="Note" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Note</p>
                                    <p class="Table">With vCDL 2.0 it is mandatory to specify the encoded data type which can be any of int32, int64, uint32, uint64, float, or double.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <p>Linear encodings can also be defined inline in which case only one interval is generated spanning over the whole data type’s value range. The is unit is then specified inline as well. If both linear encodings (Impl2Phys and Raw2Phys) are defined inline the unit applies to both encodings. If this is not desired, one or both encodings need to be defined explicitly.</p>
                <h2 class="SectionSub">Attributes</h2>
                <div>
                    <table style="mc-table-style: url('../../../Resources/Stylesheets/vTable.css');margin-left: 0;margin-right: auto;" class="TableStyle_vTable" cellspacing="0">
                        <col />
                        <col />
                        <col />
                        <col />
                        <thead>
                            <tr>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Name</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Type</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Default</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColEnd">
                                    <p class="TableHead">Semantics</p>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">Display</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax"><span class="CodeDataType">string</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">The encoding item's textual value</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">A verbose description of a textual encoding item.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">Unit</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Syntax"><span class="CodeDataType">string</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table"><span class="CodeStringLiteral">""</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColEnd">
                                    <p class="Table">The physical unit to use for displaying an encoded value.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionSub">Additional Information</h2>
                <p>Encodings in vCDL 2.0 have many breaking changes compared to vCDL 1.4 which appear to make encodings more restrictive and less powerful. However, this is not the case:</p>
                <ul>
                    <li>The encoded data type must be specified explicitly: In vCDL 1.4 the encoded data type has been derived by the usage of the encoding meaning that if being used at an int16, the base type will be int32. If being used at float or double, it will be double. This, however, means that changing the data type at the encoding’s usage, e.g., a struct member, the encoding itself may be affected as well. Another downside comes with multiple usages of the same encoding which all must have the same data type. E.g., an encoding cannot be used at a struct member of type int32 and another struct member of type int64 at the same time. With vCDL 2.0 the user is then forced to create a second encoding for the second data type and explicitly assigning it a new name.</li>
                    <li>Operators lower, greater, and not equal cannot be used for float encodings: CANoe can only handle intervals where the boundaries are both included. The operators above effectively exclude the interval boundary. For integer encodings this is not a problem as any excluded boundary can be transformed into an included boundary, by incrementing or decrementing the boundary’s integer value. For float values in general there is no such distinct predecessor or successor. vCDL 1.4 tried to approximate these values, but this is not always accurate and might lead to encodings still having a small gap although in theory there should be none. vCDL 2.0 tends to be more honest towards the user by not offering functionality which in fact is not present.</li>
                    <li>Float encodings cannot have default values: The reason for this decision is basically the same as for the limited set of interval operators. CANoe cannot handle default values for an encoding. Instead, additional intervals are generated to fill all the gaps left by the explicitly defined intervals. These gap filling intervals would require the same interval operators that have been removed for float encodings.</li>
                </ul>
                <h2 class="SectionSub">Syntax</h2>
                <table style="width: 100%;mc-table-style: url('../../../Resources/Stylesheets/vTableLight.css');" class="TableStyle-vTableLight" cellspacing="0">
                    <col class="TableStyle-vTableLight-Column-Column1" style="width: 165px;" />
                    <col class="TableStyle-vTableLight-Column-Column1" />
                    <tbody>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">encoding:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">attributes <span class="Keyword">encoding</span> identifier <span class="Keyword">:</span> data-type <span class="Keyword">{</span> encoding-items <span class="Keyword">}</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">encoding-items:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">( encoding-item <span class="Keyword">,</span> )* ( encoding-item <span class="Keyword">,</span>? )?</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">encoding-item:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">attributes expression ( <span class="Keyword">where</span> enc-condition )?</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">enc-condition:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">enc-condition1 | enc-condition2 | enc-condition3 | enc-condition4</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">enc-condition1:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"><span class="Keyword">x</span> ( <span class="Keyword">&lt;</span> | <span class="Keyword">&lt;=</span> | <span class="Keyword">==</span> | <span class="Keyword">!=</span> | <span class="Keyword">&gt;=</span> | <span class="Keyword">&gt;</span> ) expression</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">enc-condition2:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">expression ( <span class="Keyword">&lt;</span> | <span class="Keyword">&lt;=</span> | <span class="Keyword">==</span> | <span class="Keyword">!=</span> | <span class="Keyword">&gt;=</span> | <span class="Keyword">&gt;</span> ) <span class="Keyword">x</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">enc-condition3:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">expression ( <span class="Keyword">&lt;</span> | <span class="Keyword">&lt;=</span> ) <span class="Keyword">x</span> ( <span class="Keyword">&lt;</span> | <span class="Keyword">&lt;=</span> ) expression</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyB-Column1-Body1">
                                <p class="TableSyntax">enc-condition4:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyA-Column1-Body1">
                                <p class="TableSyntax">expression ( <span class="Keyword">&gt;</span> | <span class="Keyword">&gt;=</span> ) <span class="Keyword">x</span> ( <span class="Keyword">&gt;</span> | <span class="Keyword">&gt;=</span> ) expression</p>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <h2 class="SectionMain"><a name="BMEnumerations" id="BMEnumerations"></a>Enumerations <a href="#Shortcuts" class="TopOfPage">[▲ back]</a></h2>
                <p>Enumerations are integer types that come with their own textual encoding. Each enumeration value translates into a textual encoding interval which includes only the assigned integer value and uses the enumeration value’s name as textual value for this interval. They can be declared only on namespace level.</p>
                <h2 class="SectionSub">Example</h2>
                <p class="SourceCode"><span class="CodeKeyword">enum</span> State : <span class="CodeDataType">int8</span><br />{<br />&#160;&#160;SwitchedOff, &#160;<span class="CodeComment">// 0</span><br />&#160;&#160;Initializing, <span class="CodeComment">// 1 (= 0+1)</span><br />&#160;&#160;Running, &#160;&#160;&#160;&#160;&#160;<span class="CodeComment">// 2 (= 0+2)</span><br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">Display</span>=<span class="CodeStringLiteral">"nothing to do"</span>]<br />&#160;&#160;Waiting = <span class="CodeNumericalLiteral">-2</span>, <span class="CodeComment">// -2</span><br />&#160;&#160;ShuttingDown, <span class="CodeComment">// -1 (= -2+1)</span><br />}</p>
                <p>Integer values may be assigned to all, some, or none of the enumeration values. In the end, each enumeration value gets an integer value assigned either by explicitly setting it or by deriving it based on the previous integer value. In the latter case the previous enumeration value’s integer value is incremented by 1 and then used for the next enumeration value. The first enumeration value gets 0 assigned if there is no explicit integer value. An enumeration value is treated as a special form of integer value and thus can be used the same way a normal integer value is used. If no base integer type is specified, int64 is assumed. Enumerations can be used anywhere in vCDL where an integer type is allowed and their values can be used whenever an integer expression is allowed, e.g., as initial value or array size.</p>
                <h2 class="SectionSub">Attributes</h2>
                <div>
                    <table style="mc-table-style: url('../../../Resources/Stylesheets/vTable.css');margin-left: 0;margin-right: auto;" class="TableStyle_vTable" cellspacing="0">
                        <col />
                        <col />
                        <col />
                        <col />
                        <thead>
                            <tr>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Name</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Type</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Default</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColEnd">
                                    <p class="TableHead">Semantics</p>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">Display</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Syntax"><span class="CodeDataType">string</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table">Name of the enumeration value</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColEnd">
                                    <p class="Table">A verbose description for the resulting textual encoding item.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionSub">Syntax</h2>
                <table style="width: 100%;mc-table-style: url('../../../Resources/Stylesheets/vTableLight.css');" class="TableStyle-vTableLight" cellspacing="0">
                    <col class="TableStyle-vTableLight-Column-Column1" style="width: 165px;" />
                    <col class="TableStyle-vTableLight-Column-Column1" />
                    <tbody>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">enum-type:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">explicit-enum | derived-enum</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">explicit-enum:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">attributes <span class="Keyword">enum</span> identifier ( <span class="Keyword">=</span> integer-type )? <span class="Keyword">{</span> enum-values <span class="Keyword">}</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">enum-values:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">( enum-value <span class="Keyword">,</span> )* ( enum-value <span class="Keyword">,</span>? )?</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">enum-value:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">attributes identifier ( <span class="Keyword">=</span> expression[int-value] )?</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyB-Column1-Body1">
                                <p class="TableSyntax">derived-enum:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyA-Column1-Body1">
                                <p class="TableSyntax"><span class="Keyword">enum</span> <span class="Keyword">&lt;</span> reference[union-type] ( <span class="Keyword">,</span> data-type )? <span class="Keyword">&gt;</span></p>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <h2 class="SectionMain"><a name="BMBitFields" id="BMBitFields"></a>Bitfields <a href="#Shortcuts" class="TopOfPage">[▲ back]</a></h2>
                <p>Bitfields allow grouping multiple (possibly nonadjacent) bits together and assigning semantics to various combinations of bit states within this group. The masks of multiple groups within the same bit fields must not overlap. Bitfields can be declared only on namespace level.</p>
                <h2 class="SectionSub">Example</h2>
                <p class="SourceCode"><span class="CodeKeyword">bitfields</span> Speakers<br />{<br />&#160;&#160;<span class="CodeKeyword">group</span> <span class="CodeNumericalLiteral">0x0F</span><br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<span class="CodeStringLiteral">"FL"</span> &#160;<span class="CodeKeyword">where</span> <span class="CodeFormulaVariable">x</span> == <span class="CodeNumericalLiteral">1</span> &lt;&lt; <span class="CodeNumericalLiteral">0</span> [<span class="CodeAttributeKey_Namespace">Display</span>=<span class="CodeStringLiteral">"Front Left"</span>],<br />&#160;&#160;&#160;&#160;<span class="CodeStringLiteral">"FR"</span> &#160;<span class="CodeKeyword">where</span> <span class="CodeFormulaVariable">x</span> == <span class="CodeNumericalLiteral">1</span> &lt;&lt; <span class="CodeNumericalLiteral">1</span> [<span class="CodeAttributeKey_Namespace">Display</span>=<span class="CodeStringLiteral">"Front Right"</span>],<br />&#160;&#160;&#160;&#160;<span class="CodeStringLiteral">"RL"</span> &#160;<span class="CodeKeyword">where</span> <span class="CodeFormulaVariable">x</span> == <span class="CodeNumericalLiteral">1</span> &lt;&lt; <span class="CodeNumericalLiteral">2</span> [<span class="CodeAttributeKey_Namespace">Display</span>=<span class="CodeStringLiteral">"Rear Left"</span>],<br />&#160;&#160;&#160;&#160;<span class="CodeStringLiteral">"RR"</span> &#160;<span class="CodeKeyword">where</span> <span class="CodeFormulaVariable">x</span> == <span class="CodeNumericalLiteral">1</span> &lt;&lt; <span class="CodeNumericalLiteral">3</span> [<span class="CodeAttributeKey_Namespace">Display</span>=<span class="CodeStringLiteral">"Rear Right"</span>],<br />&#160;&#160;&#160;&#160;<span class="CodeStringLiteral">"All"</span> <span class="CodeKeyword">where</span> <span class="CodeFormulaVariable">x</span> == <span class="CodeNumericalLiteral">0x0F</span>,<br />&#160;&#160;}<br />}</p>
                <p>Values of different items within the same group may overlap but must all be within the group mask. In particular, no item must have a value where a bit is set which is not set in the group mask. The group mask is optional and will be derived from its items if not explicitly set.</p>
                <h2 class="SectionSub">Attributes</h2>
                <div>
                    <table style="mc-table-style: url('../../../Resources/Stylesheets/vTable.css');margin-left: 0;margin-right: auto;" class="TableStyle_vTable" cellspacing="0">
                        <col />
                        <col />
                        <col />
                        <col />
                        <thead>
                            <tr>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Name</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Type</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Default</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColEnd">
                                    <p class="TableHead">Semantics</p>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">Display</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table"><span class="CodeDataType">string</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table">The bitfields item's textual value</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColEnd">
                                    <p class="Table">A verbose description of a bitfields item.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionSub">Syntax</h2>
                <table style="width: 100%;mc-table-style: url('../../../Resources/Stylesheets/vTableLight.css');" class="TableStyle-vTableLight" cellspacing="0">
                    <col class="TableStyle-vTableLight-Column-Column1" style="width: 165px;" />
                    <col class="TableStyle-vTableLight-Column-Column1" />
                    <tbody>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">bit-fields:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">attributes <span class="Keyword">bitfields</span> identifier <span class="Keyword">{</span> bit-fields-group* <span class="Keyword">}</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">bit-fields-group:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">attributes group expression[uint-value]? <span class="Keyword">{</span> bf-group-items <span class="Keyword">}</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">bf-group-items:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">( bf-group-item <span class="Keyword">,</span> )* ( bf-group-item <span class="Keyword">,</span>? )?</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">bf-group-item:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">attributes expression[int-value] <span class="Keyword">where</span> ( item-condition1 | item-condition2 )</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">item-condition1:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"><span class="Keyword">x</span> <span class="Keyword">==</span> expression[uint-value]</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyB-Column1-Body1">
                                <p class="TableSyntax">item-condition2:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyA-Column1-Body1">
                                <p class="TableSyntax">expression[uint-value] <span class="Keyword">==</span> <span class="Keyword">x</span></p>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <h2 class="SectionMain"><a name="BMTypedefs" id="BMTypedefs"></a>Typedefs <a href="#Shortcuts" class="TopOfPage">[▲ back]</a></h2>
                <p>Type definitions, typedefs for short, are used to bundle plain types and container types with possibly many attributes into new data types with distinct and meaningful names. They can be declared only on namespace level. There are no specific attributes for typedefs. Instead, all attributes that are allowed at the original data type can be attached to the typedef as well. When data types defined by typedefs are used in other places it is possible to attach new attributes there, even when they override attributes at the typedef itself. Keep in mind that this might lead to a new data type with a generated name being created implicitly and the data type from the typedef is not used at all.</p>
                <h2 class="SectionSub">Example</h2>
                <p class="SourceCode"><span class="CodeComment">// A new type to have expressiveness in the name</span>
                    <br /><span class="CodeKeyword">typedef</span> Temperature = <span class="CodeDataType">int16</span>;<br /><br /><span class="CodeComment">// A new type to specify attributes only once</span><br />[<span class="CodeAttributeKey_Namespace">ByteOrder</span>=Motorola, <span class="CodeAttributeKey_Namespace">Min</span>=<span class="CodeNumericalLiteral">-100</span>, <span class="CodeAttributeKey_Namespace">Max</span>=<span class="CodeNumericalLiteral">100</span>]<br /><span class="CodeKeyword">typedef</span> MotorolaInt = <span class="CodeDataType">int32</span>;<br /><br /><span class="CodeComment">// A new type for better readability</span><br /><span class="CodeKeyword">typedef</span> FloatList2D = <span class="CodeDataType">list</span>&lt;<span class="CodeDataType">list</span>&lt;<span class="CodeDataType">float</span>&gt;&gt;;</p>
                <h2 class="SectionSub">Syntax</h2>
                <table style="width: 100%;mc-table-style: url('../../../Resources/Stylesheets/vTableLight.css');" class="TableStyle-vTableLight" cellspacing="0">
                    <col class="TableStyle-vTableLight-Column-Column1" style="width: 92px;" />
                    <col class="TableStyle-vTableLight-Column-Column1" />
                    <tbody>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyB-Column1-Body1">
                                <p class="TableSyntax">typedef:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyA-Column1-Body1">
                                <p class="TableSyntax">attributes <span class="Keyword">typedef</span> identifier <span class="Keyword">=</span> data-type <span class="Keyword">;</span></p>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <h2 class="SectionMain"><a name="BMFunctionPrototypes" id="BMFunctionPrototypes"></a>Function Prototypes <a href="#Shortcuts" class="TopOfPage">[▲ back]</a></h2>
                <p>Function prototypes are mainly used for DO methods. Since vCDL 2.0 they can also be used to explicitly define getter and setter functions of DO fields. Function prototypes can be declared only on namespace level.</p>
                <h2 class="SectionSub">Example</h2>
                <p class="SourceCode">[<span class="CodeAttributeKey_Namespace">OneWay</span>]<br /><span class="CodeKeyword">typedef</span> MyPrototype1 = <span class="CodeDataType">void</span>();<br /><br /><span class="CodeKeyword">typedef</span> MyPrototype2 = <span class="CodeDataType">float</span>(<span class="CodeDataType">int32</span> param, [<span class="CodeAttributeKey_Namespace">Optional</span>] <span class="CodeDataType">string</span> optParam);<br /><br /><span class="CodeComment">// Combining in, out, and inout parameters</span><br /><span class="CodeKeyword">typedef</span> MyPrototype3 = <span class="CodeDataType">float</span>(<br />&#160;&#160;<span class="CodeKeyword">in</span> &#160;&#160;&#160;<span class="CodeDataType">int32</span> &#160;inParam,<br />&#160;&#160;<span class="CodeKeyword">out</span> &#160;&#160;<span class="CodeDataType">bool</span> &#160;&#160;outParam,<br />&#160;&#160;<span class="CodeKeyword">inout</span> <span class="CodeDataType">string</span> ioParam);<br /><br /><span class="CodeKeyword">interface</span> DOInterface<br />{<br />&#160;&#160;<span class="CodeComment">// Inline function prototype</span><br />&#160;&#160;<span class="CodeKeyword">provided</span> <span class="CodeKeyword">method</span> <span class="CodeDataType">float</span> MyMethod(<span class="CodeKeyword">out</span> <span class="CodeDataType">string</span> param = <span class="CodeStringLiteral">"InitialValue"</span>);<br /><br />&#160;&#160;<span class="CodeComment">// Using an explicit function prototype</span><br />&#160;&#160;<span class="CodeKeyword">provided</span> <span class="CodeKeyword">method</span> MyPrototype MyExplicitMethod = <span class="CodeNumericalLiteral">4</span>.<span class="CodeNumericalLiteral">5</span>;<br />}</p>
                <p>Function prototypes can be declared explicitly using an extended variant of the typedef syntax or they can be declared inline at a DO method. Note that for inline prototypes the return type goes before the method name while for explicit prototypes it follows the assignment operator.</p>
                <p>DO method parameters can have initial values, but these default values are bound to the DO method and its parameters, not to the function prototype itself. Therefore, they can only be specified at DO methods with inline function prototypes. If a DO method is used with an explicit function prototype, initial values for the parameters can be specified only via refinements.</p>
                <h2 class="SectionSub">Attributes</h2>
                <div>
                    <table style="mc-table-style: url('../../../Resources/Stylesheets/vTable.css');margin-left: 0;margin-right: auto;" class="TableStyle_vTable" cellspacing="0">
                        <col />
                        <col />
                        <col />
                        <col />
                        <col />
                        <thead>
                            <tr>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Name</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Type</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Default</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Allowed At</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColEnd">
                                    <p class="TableHead">Semantics</p>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">OneWay</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax"><span class="CodeDataType">bool</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Syntax">false</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Function prototype</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Whether the prototype has <span class="bold">fire and forget</span> semantics which is only possible if the return type is void and there are no <span class="CodeKeyword">out</span> or <span class="CodeKeyword">inout</span> parameters.</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table"><span class="CodeAttributeKey_Namespace">Optional</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Syntax"><span class="CodeDataType">bool</span>
                                    </p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Syntax">false</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table">Function parameter</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColEnd">
                                    <p class="Table">Whether the parameter is optional.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionSub">Syntax</h2>
                <table style="width: 100%;mc-table-style: url('../../../Resources/Stylesheets/vTableLight.css');" class="TableStyle-vTableLight" cellspacing="0">
                    <col class="TableStyle-vTableLight-Column-Column1" style="width: 165px;" />
                    <col class="TableStyle-vTableLight-Column-Column1" />
                    <tbody>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">func-prototype:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">attributes <span class="Keyword">typedef</span> identifier <span class="Keyword">=</span> data-type func-params <span class="Keyword">;</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">func-params:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"><span class="Keyword">(</span> ( func-param ( <span class="Keyword">,</span> func-param )* )? <span class="Keyword">)</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">func-param:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">attributes param-direction data-type identifier</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyB-Column1-Body1">
                                <p class="TableSyntax">param-direction:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyA-Column1-Body1">
                                <p class="TableSyntax">( <span class="Keyword">in</span> | <span class="Keyword">out</span> | <span class="Keyword">inout</span> )?</p>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <p class="LinkList">&#160;</p>
            </div>
        </div>
        <div class="Footer">
            <div class="FooterWhite">
                <table class="FooterWhite" style="border-collapse: collapse;margin-left: auto;margin-right: auto;">
                    <col style="width: 70px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col style="width: 16px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col data-mc-conditions="" />
                    <col />
                    <tbody>
                        <tr>
                            <td>
                                <div class="buttons popup-container clearfix topicToolbarProxy topicToolbarProxyFooter _Skins_HTML5TopicToolbar mc-component nocontent">
                                    <div class="button-group-container-left">
                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                            <div>
                                                <div role="img" class="button-icon-wrapper" aria-label="Expand all">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                        <button class="button needs-pie remove-highlight-button" title="Remove Highlights">
                                            <div>
                                                <div role="img" class="button-icon-wrapper">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <p class="vec_BuildInfo"><a href="../../Shared/HowToUseOnlineHelp.htm" title="Tips for using the help" alt="Tips for using the help"><img src="../../../Resources/vImages/vBackstage/vHelpInfo.png" /></a>
                                </p>
                            </td>
                            <td>
                                <p class="vec_BuildInfo">•&#160;&#160;Technical&#160;References are only&#160;available&#160;in&#160;English</p>
                            </td>
                            <td>
                                <p class="vec_BuildInfo" style="text-align: right;"><span class="mc-variable Vector.BuildTime variable">2023-09-26T19:49:32</span>
                                </p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <table style="width: 100%;border-collapse: separate;border-spacing: 3px 0px;margin-left: auto;margin-right: auto;caption-side: top;">
                <col />
                <col />
                <col />
                <col data-mc-conditions="vConditions.HTML5Link" />
                <tbody>
                    <tr>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;">
                            <p class="vec_Footer">©&#160;Vector Informatik GmbH</p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;text-align: right;">
                            <p class="vec_FooterBold">
                                <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded,vConditions.TestDataEditorExcluded">CANoe</MadCap:conditionalText> Version <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded">17 SP3</MadCap:conditionalText></p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="../../Shared/ContactCopyrightLicense.htm" class="vec_Footer MCXref xref xrefvec_Footer">Contact/Copyright/License</a>
                            </p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="https://www.vector.com/int/en/company/get-info/privacy-policy/" target="_blank" class="vec_Footer">Data Privacy Notice</a>
                            </p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>
</html>