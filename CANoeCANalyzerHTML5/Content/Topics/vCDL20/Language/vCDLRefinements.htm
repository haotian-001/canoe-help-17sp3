<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="CANoeCANalyzer.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../../Skins/Favicons/browserconfig.xml" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../Skins/Favicons/favicon-16x16.png" /><title>Refinements (vCDL 2.0)</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Resources/Stylesheets/vTableMasterPageHeader.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../Resources/Stylesheets/vStylesheet.css" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.expand-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.remove-highlight-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.collapse-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.needs-pie
{
	behavior: url('../../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../../Resources/Stylesheets/vTableLight.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../Skins/Favicons/favicon-16x16.png" />
        <script src="../../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapGlobal.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapDom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapUtilities.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapXhr.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTextEffects.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSlideshow.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMessageBus.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMessageBus.CrossFrame.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapDefault.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMediaQueries.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAccessibility.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapHelpSystem.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAliasFile.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopicFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapFeedbackHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSkinHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.MiniToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.SideMenu.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapIndex.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapGlossary.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapParser.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSearch.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapNavigateTopics.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapLms.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapELearning.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopic.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMicroContentComponent.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSearchHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopicElements.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTriPane.js" type="text/javascript" defer="defer">
        </script>
        <script type="text/jscript" src="../../../Resources/vScripts/SyntaxHighlighting.js">
        </script>
        <script type="text/jscript" src="../../../Resources/vScripts/TabSwitch.js">
        </script>
        <script type="text/javascript" src="../../../Resources/vScripts/Vector.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../CANoeCANalyzer.htm#Topics/vCDL20/Language/vCDLRefinements.htm">Open topic with navigation</a>
        </p>
        <div class="Body">
            <div role="main" id="mc-main-content">
                <div>
                    <p class="StructurePath"><a href="../../CANoeCANalyzer/CANoeCANalyzer.htm" class="StructurePath" data-mc-conditions="vConditions.CANalyzerExclude,vConditions.CANoe4ServerExcluded,vConditions.CANoe4SWExcluded,vConditions.TestDataEditorExcluded,vConditions.vTESTstudioExcluded,vConditions.TestUnitRunnerExcluded,vConditions.CANoeNMExcluded"><img src="../../../Resources/vImages/vToolIcons/CANoe_Icon16.png" alt="" />&#160;CANoe</a> » <a href="../../vCDL/vCDLStartpage.htm" class="StructurePath">vCDL</a> » <a href="../Concept/vCDL20.htm" class="StructurePath">vCDL 2.0</a> » Language » Refinements</p>
                    <h1>Refinements</h1>
                    <p class="MenuPath">Navigation: <a href="vCDLSystemVariables.htm" class="MenuPath">« System Variables</a>&#160;&#160;•&#160;&#160;<a href="vCDLPreprocessor.htm" class="MenuPath">Preprocessor »</a></p>
                    <p class="AutoSearchFilterConcepts"><a name="aanchor11108"></a>
                        <MadCap:concept term="SFvCDL" />
                    </p>
                    <p class="IndexConcept"><a name="kanchor8928"></a>
                    </p>
                </div>
                <p>Refinements allow assigning and changing both attributes and values of any referable object. Although the concept may seem like additional effort at first there are two reasons why to use refinements nevertheless:</p>
                <ul>
                    <li>
                        <p class="ListItem"><span class="bold">Separation of Concerns</span>: Data can be modeled in one place while communication related attributes are attached somewhere else, even in a separate file. The latter can be seen as some form of configuration file which can easily be replaced by a different configuration, e.g., through preprocessor directives.</p>
                    </li>
                    <li>
                        <p class="ListItem"><span class="bold">Objects without syntactic representation</span>: Some objects can be refined but cannot be defined explicitly within the vCDL file. These are objects which are either defined implicitly (e.g., members of Distributed Objects) or only exist within CANoe and cannot be defined at all by the user, e.g., the default network for distributed objects.</p>
                    </li>
                </ul>
                <h2 class="SectionMain">Examples</h2>
                <p>There are four different variants of refinements which are covered separately but can also be combined by nesting them into each other as shown at last.</p>
                <h2 class="SectionSub">Refinements without Scope</h2>
                <p>In their most basic form refinements add or modify information of a single artefact:</p>
                <p class="SourceCode">[<span class="CodeAttributeKey_Namespace">Binding</span>=<span class="CodeStringLiteral">"Abstract"</span>]<br /><span class="CodeKeyword">refine</span> DOInterface.DataMember = <span class="CodeNumericalLiteral">6</span>;<br /><br />[<span class="CodeAttributeKey_Namespace">Optional</span>]<br /><span class="CodeKeyword">refine</span> MyStruct.Member1, MyStruct.Member2;</p>
                <p>It is also possible to refine multiple artefacts at once which comes in handy if many attributes are set which then must be done only once.</p>
                <h2 class="SectionSub">Sub-Member Refinements</h2>
                <p>When multiple sub-members of any artefact, e.g., a struct type shall be refined, it can be done by nesting refinements.</p>
                <p class="SourceCode"><span class="CodeKeyword">refine</span> MyStruct<br />{<br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">RelOffset</span>=<span class="CodeNumericalLiteral">2</span>]<br />&#160;&#160;<span class="CodeKeyword">refine</span> Member1;<br /><br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">RelOffset</span>=<span class="CodeNumericalLiteral">4</span>]<br />&#160;&#160;<span class="CodeKeyword">refine</span> Member2;<br /><br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">RelOffset</span>=<span class="CodeNumericalLiteral">1</span>]<br />&#160;&#160;<span class="CodeKeyword">refine</span> Member3;<br /><br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">Optional</span>]<br />&#160;&#160;<span class="CodeKeyword">refine</span> Member1, Member2, Member3;<br />}</p>
                <p>All references within the scope are relative to the object referenced by the outer refinement. It is also possible to refine any artefact multiple times as long as different refinements do not contradict each other, e.g., by setting the same attribute twice in different refinements.</p>
                <h2 class="SectionSub">Full Container Refinements</h2>
                <p>This form of refinement can only be used with DO (reference-)containers to set data for each element of the container. Thus, the number of elements in the refinement must be within the minimum and maximum size boundaries of the refined container.</p>
                <p class="SourceCode"><span class="CodeComment">// Some DOs to use for initialization</span>
                    <br /><span class="CodeKeyword">interface</span> DOInterface;<br />DOInterface DO1, DO2, DO3;<br /><br />list&lt;<span class="CodeKeyword">reference</span>&lt;DOInterface&gt;&gt; DORefContainer;<br /><br /><span class="CodeKeyword">refine</span> DORefContainer { DO1, DO2, DO3, DO1 }<br /><br /><span class="CodeComment">// Shorter alternative:</span><br />list&lt;<span class="CodeKeyword">reference</span>&lt;DOInterface&gt;&gt; DORefContainer { DO1, DO2, DO3, DO1 }</p>
                <p>It is possible to combine declaration and refinement of the DO (reference-)container into a single statement. This works for single DOs and single DO references as well, in which case sub-member refinements are expected within the scope.</p>
                <p>Full container refinements can also be used on DO containers with much more possibilities: A DO within the container can be set to ‘null’ or attributes may be attached and/or sub-member can be refined.</p>
                <p class="SourceCode">array&lt;DOInterface, <span class="CodeNumericalLiteral">4</span>&gt; DOContainer<br />{<br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">Binding</span>=<span class="CodeStringLiteral">"Abstract"</span>], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="CodeComment">// Set an attribute for the first DO</span><br />&#160;&#160;<span class="CodeKeyword">null</span>, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="CodeComment">// Prevent the second DO from being created</span><br />&#160;&#160;{ <span class="CodeKeyword">refine</span> DataMember = <span class="CodeNumericalLiteral">6</span>; }, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="CodeComment">// Apply sub-member refinements</span><br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">Binding</span>=<span class="CodeStringLiteral">"MQTT"</span>] { <span class="CodeKeyword">refine</span> DataMember = <span class="CodeNumericalLiteral">5</span>; } <span class="CodeComment">// Attributes and sub-member refinements</span><br />}</p>
                <h2 class="SectionSub">Sparse Container Refinements</h2>
                <p>For large or even unbounded containers it is infeasible to refine every element. Instead, a similar syntax as for sparse struct and list literals can be used with some restrictions regarding the indices: Each index must be an integer literal (no constants or expressions allowed) or the blueprint keyword. However, each entry may have multiple indices.</p>
                <p class="SourceCode">list&lt;DOInterface&gt; DOContainer;<br /><br /><span class="CodeKeyword">refine</span> DOContainer<br />{<br />&#160;&#160;<span class="CodeNumericalLiteral">4</span>: [<span class="CodeAttributeKey_Namespace">Binding</span>=<span class="CodeStringLiteral">"Abstract"</span>],<br />&#160;&#160;<span class="CodeNumericalLiteral">1</span>, <span class="CodeNumericalLiteral">5</span>: <span class="CodeKeyword">null</span>,<br />&#160;&#160;<span class="CodeNumericalLiteral">10</span>, <span class="CodeFormulaVariable">blueprint</span>: { <span class="CodeKeyword">refine</span> DataMember = <span class="CodeNumericalLiteral">6</span>; },<br />&#160;&#160;<span class="CodeNumericalLiteral">11</span>: [<span class="CodeAttributeKey_Namespace">Binding</span>=<span class="CodeStringLiteral">"MQTT"</span>] { <span class="CodeKeyword">refine</span> DataMember = <span class="CodeNumericalLiteral">5</span>; }<br />}</p>
                <h2 class="SectionSub">Nesting Container Refinements</h2>
                <p>If a DO (reference-)container is multidimensional, the container refinements must have the same multidimensionality, which results in the refinements being nested into each other. In this case, sparse and full container refinements can be combined as suits best.</p>
                <p class="SourceCode"><span class="CodeComment">// Full container refinement nested in full container refinement</span>
                    <br />list&lt;array&lt;<span class="CodeKeyword">reference</span>&lt;DOInterface&gt;, <span class="CodeNumericalLiteral">3</span>&gt;&gt; DORefContainer1<br />{<br />&#160;&#160;{ DO1, DO2, DO3 },<br />&#160;&#160;{ DO2, DO3, DO1 },<br />&#160;&#160;{ DO3, DO1, DO2 },<br />}<br /><br /><span class="CodeComment">// Full container refinement nested in sparse container refinement</span><br />list&lt;array&lt;<span class="CodeKeyword">reference</span>&lt;DOInterface&gt;, <span class="CodeNumericalLiteral">3</span>&gt;&gt; DORefContainer2<br />{<br />&#160;&#160;<span class="CodeNumericalLiteral">3</span>, <span class="CodeNumericalLiteral">6</span>: { DO1, DO2, DO3 },<br />&#160;&#160;<span class="CodeNumericalLiteral">7</span>: &#160;&#160;&#160;{ DO2, DO3, DO1 },<br />&#160;&#160;<span class="CodeFormulaVariable">blueprint</span>: DO2,<br />}</p>
                <p>Blueprints are the only exception as multidimensional containers as well have only one blueprint which is a sub-member of the container. Thus, no nested refinement is required there.</p>
                <h2 class="SectionSub">Regular Refinements with Containers</h2>
                <p>With vCDL 2.0 it is possible to reference elements of a DO (reference-)container writing their index in square brackets as part of the reference. Therefore, containers can also be refined using non-container refinements.</p>
                <p class="SourceCode"><span class="CodeKeyword">const</span> int32 BaseIndex = <span class="CodeNumericalLiteral">6</span>;<br />list&lt;DOInterface&gt; DOContainer;<br /><br />[<span class="CodeAttributeKey_Namespace">Binding</span>=<span class="CodeStringLiteral">"Abstract"</span>]<br /><span class="CodeKeyword">refine</span> DOContainer[<span class="CodeNumericalLiteral">5</span>];<br /><br /><span class="CodeComment">// Any expression can be used as index</span><br /><span class="CodeKeyword">refine</span> DOContainer[BaseIndex + <span class="CodeNumericalLiteral">4</span>].DataMember = <span class="CodeNumericalLiteral">3</span>;<br /><br /><span class="CodeKeyword">refine</span> DOContainer<br />{<br />&#160;&#160;[<span class="CodeAttributeKey_Namespace">Binding</span>=<span class="CodeStringLiteral">"Abstract"</span>]<br />&#160;&#160;<span class="CodeKeyword">refine</span> [<span class="CodeNumericalLiteral">2</span>];<br /><br />&#160;&#160;<span class="CodeKeyword">refine</span> <span class="CodeFormulaVariable">blueprint</span>, [BaseIndex + <span class="CodeNumericalLiteral">1</span>]<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<span class="CodeKeyword">refine</span> DataMember = <span class="CodeNumericalLiteral">6</span>;<br />&#160;&#160;}<br />}</p>
                <p>This form has the advantage that indices are not restricted to integer literals, but any expression can be used.</p>
                <h2 class="SectionMain">Syntax</h2>
                <table style="width: 100%;mc-table-style: url('../../../Resources/Stylesheets/vTableLight.css');" class="TableStyle-vTableLight" cellspacing="0">
                    <col class="TableStyle-vTableLight-Column-Column1" style="width: 165px;" />
                    <col class="TableStyle-vTableLight-Column-Column1" />
                    <tbody>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">refinement:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">attributes <span class="Keyword">refine</span> targets content</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">targets:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">reference ( <span class="Keyword">,</span> reference )*</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">content:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"> basic-rfmt | scoped-rfmt</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">basic-rfmt:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">( <span class="Keyword">=</span> expression )? <span class="Keyword">;</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">scoped-rfmt:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"><span class="Keyword"> {</span> ( refinements | full-container | sparse-container ) <span class="Keyword">}</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">refinements:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"> refinement*</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">full-container:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"> element ( <span class="Keyword">,</span> element )*</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">sparse-container:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax">sparse-item ( <span class="Keyword">,</span> sparse-item )*</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">sparse-item:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"> item-keys <span class="Keyword">:</span> element</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">item-keys:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"> item-key ( <span class="Keyword">,</span> item-key )*</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyE-Column1-Body1">
                                <p class="TableSyntax">item-key:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyD-Column1-Body1">
                                <p class="TableSyntax"> int-literal | <span class="Keyword">blueprint</span></p>
                            </td>
                        </tr>
                        <tr class="TableStyle-vTableLight-Body-Body1">
                            <td class="TableStyle-vTableLight-BodyB-Column1-Body1">
                                <p class="TableSyntax">element:</p>
                            </td>
                            <td class="TableStyle-vTableLight-BodyA-Column1-Body1">
                                <p class="TableSyntax"> attributes ( reference | scope )?</p>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <p class="LinkList">&#160;</p>
            </div>
        </div>
        <div class="Footer">
            <div class="FooterWhite">
                <table class="FooterWhite" style="border-collapse: collapse;margin-left: auto;margin-right: auto;">
                    <col style="width: 70px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col style="width: 16px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col data-mc-conditions="" />
                    <col />
                    <tbody>
                        <tr>
                            <td>
                                <div class="buttons popup-container clearfix topicToolbarProxy topicToolbarProxyFooter _Skins_HTML5TopicToolbar mc-component nocontent">
                                    <div class="button-group-container-left">
                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                            <div>
                                                <div role="img" class="button-icon-wrapper" aria-label="Expand all">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                        <button class="button needs-pie remove-highlight-button" title="Remove Highlights">
                                            <div>
                                                <div role="img" class="button-icon-wrapper">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <p class="vec_BuildInfo"><a href="../../Shared/HowToUseOnlineHelp.htm" title="Tips for using the help" alt="Tips for using the help"><img src="../../../Resources/vImages/vBackstage/vHelpInfo.png" /></a>
                                </p>
                            </td>
                            <td>
                                <p class="vec_BuildInfo">•&#160;&#160;Technical&#160;References are only&#160;available&#160;in&#160;English</p>
                            </td>
                            <td>
                                <p class="vec_BuildInfo" style="text-align: right;"><span class="mc-variable Vector.BuildTime variable">2023-09-26T19:49:32</span>
                                </p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <table style="width: 100%;border-collapse: separate;border-spacing: 3px 0px;margin-left: auto;margin-right: auto;caption-side: top;">
                <col />
                <col />
                <col />
                <col data-mc-conditions="vConditions.HTML5Link" />
                <tbody>
                    <tr>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;">
                            <p class="vec_Footer">©&#160;Vector Informatik GmbH</p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;text-align: right;">
                            <p class="vec_FooterBold">
                                <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded,vConditions.TestDataEditorExcluded">CANoe</MadCap:conditionalText> Version <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded">17 SP3</MadCap:conditionalText></p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="../../Shared/ContactCopyrightLicense.htm" class="vec_Footer MCXref xref xrefvec_Footer">Contact/Copyright/License</a>
                            </p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="https://www.vector.com/int/en/company/get-info/privacy-policy/" target="_blank" class="vec_Footer">Data Privacy Notice</a>
                            </p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>
</html>