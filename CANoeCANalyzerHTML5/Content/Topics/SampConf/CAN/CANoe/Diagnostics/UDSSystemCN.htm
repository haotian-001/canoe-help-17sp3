<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="CANoeCANalyzer.xml" data-mc-path-to-help-system="../../../../../../" data-mc-conditions="vConditions.CANoeOnly" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../../../../Skins/Favicons/browserconfig.xml" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../../../Skins/Favicons/favicon-16x16.png" /><title>UDS Diagnostic System Configuration</title>
        <link href="../../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Resources/Stylesheets/vTableMasterPageHeader.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../../../Resources/Stylesheets/vStylesheet.css" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.expand-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.remove-highlight-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.collapse-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.needs-pie
{
	behavior: url('../../../../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../../../../Resources/Stylesheets/vTableSymbol.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../../../Skins/Favicons/favicon-16x16.png" />
        <script src="../../../../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../../../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapGlobal.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapDom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapUtilities.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapXhr.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapTextEffects.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapSlideshow.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapMessageBus.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapMessageBus.CrossFrame.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapDefault.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapMediaQueries.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapAccessibility.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapHelpSystem.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapAliasFile.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapTopicFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapFeedbackHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapSkinHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapToc.MiniToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapToc.SideMenu.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapIndex.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapGlossary.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapParser.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapSearch.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapNavigateTopics.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapLms.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapELearning.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapTopic.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapMicroContentComponent.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapSearchHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapTopicElements.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapTriPane.js" type="text/javascript" defer="defer">
        </script>
        <script type="text/jscript" src="../../../../../Resources/vScripts/SyntaxHighlighting.js">
        </script>
        <script type="text/jscript" src="../../../../../Resources/vScripts/TabSwitch.js">
        </script>
        <script type="text/javascript" src="../../../../../Resources/vScripts/Vector.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../../../CANoeCANalyzer.htm#Topics/SampConf/CAN/CANoe/Diagnostics/UDSSystemCN.htm">Open topic with navigation</a>
        </p>
        <div class="Body">
            <div role="main" id="mc-main-content">
                <p class="StructurePath"><a href="../../../CANoeCANalyzerSampleConfigurations.htm" class="StructurePath"><a href="../../../../CANoeCANalyzer/CANoeCANalyzer.htm" class="StructurePath" data-mc-conditions="vConditions.CANalyzerExclude,vConditions.CANoe4ServerExcluded,vConditions.CANoe4SWExcluded,vConditions.TestDataEditorExcluded,vConditions.vTESTstudioExcluded,vConditions.TestUnitRunnerExcluded,vConditions.CANoeNMExcluded"><img src="../../../../../Resources/vImages/vToolIcons/CANoe_Icon16.png" alt="" />&#160;CANoe</a> Â» Sample Configurations</a> Â» <a href="../../SampConfsCAN.htm" class="StructurePath">CAN</a> Â» CAN Diagnostics Â» <span class="mc-variable System.Title variable">UDS Diagnostic System Configuration</span></p>
                <h1><a name="kanchor4371"></a><a name="kanchor4372"></a><span class="mc-variable System.Title variable">UDS Diagnostic System Configuration</span>
                </h1>
                <p class="MenuPath">&#160;</p>
                <p class="AutoSearchFilterConcepts"><a name="aanchor5795"></a>
                    <MadCap:concept term="SFSampConf" />
                </p>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="TableHead">
                                        <img src="../../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="Table">Click on the blue link to load the sample configuration in <span class="Product">CANoe</span>.</p>
                                    <ul>
                                        <li><span class="bold">UDS Diagnostic System Configuration</span> â <span class="bold"><a href="javascript:startCANoeLauncher('&quot;SAMPLES:\\CAN\\Diagnostics\\UDSsystem\\UDSSystem.cfg&quot;')" class="ExecuteLink">UDSSystem.cfg</a></span><br />UDS based ECU simulation demonstrating the interactive diagnostic windows (Diagnostic Console, Fault Memory Window and Diagnostic Session Control) as well as analysis and test features for diagnostics.</li>
                                    </ul>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2>Introduction</h2>
                <p>This sample configuration shows the following use cases and features:</p>
                <ul>
                    <li>Using the diagnostic windows (Diagnostic Console, Fault Memory Window, ECU Control, Diagnostic Parameters Window and Variant Coding Window).</li>
                    <li>Using Functional Groups in combination with Diagnostic Console and Fault Memory Window.</li>
                    <li>Using the analysis windows (State Tracker, Data Window and Graphics Window) for displaying diagnostic parameter values.</li>
                    <li>Using Panels to trigger diagnostic requests and display diagnostic parameter values.</li>
                    <li>Using Macros and .NET snippets to execute diagnostic sequences.</li>
                    <li>Using an XML test module with CAPL library to perform diagnostic tests.</li>
                    <li>Using a Test Unit created with vTESTstudio to perform diagnostic tests.</li>
                    <li>Using CDD, ODX/PDX and Basic Diagnostic descriptions.</li>
                    <li>Using Additional Descriptions.</li>
                    <li>Security access using a Seed &amp; Key DLL from within CAPL, from a Test Unit and interactively via the ECU Control.</li>
                    <li>Tester authentication using a security profile based on UDS Service 0x29.</li>
                    <li>Simulating an ECU on diagnostic layer.</li>
                </ul>
                <p>The sample configuration consists of two simulated ECUs implementing complex diagnostic functionality (nodes <span class="GUI">DoorFL</span> and <span class="GUI">DoorFR</span>), a simulation node implementing interactive test functionality provided by panels (<span class="GUI">Tester</span> and <span class="GUI">VariantCoding</span>) and an XML test module (<span class="GUI">XML_Tester</span>) performing diagnostic tests based on a CAPL library. Additionally, it contains a Test Unit using the same CAPL library and additionally using vTESTstudio diagnostic test commands.</p>
                <p>The ECU simulation for <span class="GUI">DoorFL</span> includes the state transitions between different sessions (Default, Extended and Programming Session) as defined in the Diagnostic Description (CDD file) and different security access lock levels. Some service requests require tester authentication, certain sessions and/or lock states. Additionally, the following behavior is implemented:</p>
                <ul>
                    <li>Accessing the variant coding data is only possible in the extended session. Additionally, the tester needs to authenticate itself at the ECU.</li>
                    <li>Unlocking the ECU is not possible in the default session.</li>
                    <li data-mc-conditions="vConditions.ForTranslation">The ECU will be locked in the following cases, so that no further valid requests can be received:</li>
                    <li class="Indent" data-mc-conditions="vConditions.ForTranslation">session changed</li>
                    <li class="Indent" data-mc-conditions="vConditions.ForTranslation">negative response received</li>
                    <li class="Indent" data-mc-conditions="vConditions.ForTranslation">timeout occurs</li>
                    <li>A hardware reset of the ECU will take longer than a software reset. In case of a hardware reset, <span class="GUI">DoorFL</span> will therefore respond with a negative response code 0x78 (Request correctly received - response pending) before sending the positive response.</li>
                </ul>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="TableHead">
                                        <img src="../../../../../Resources/vImages/vInfo.png" style="width: 48px;height: 45px;" title="Note" alt="Note" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Note</p>
                                    <p class="Table">The programming code for the <span class="bold">SeednKey.dll</span> used in this sample configuration can be found in the <span class="bold">SecurityAccess</span> folder of the configuration. For details on Security Access, see <a href="../../../../CANoeCANalyzer/Diagnostics/Special/DiagSecurityDLLAccess.htm">Seed &amp; Key DLL / Security Access</a>. Note that for this example, the implemented security algorithm in this DLL is kept very simple. Seed &amp; Key DLLs are OEM specific and are typically provided by the OEM.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div>
                    <h2 class="SectionMain">Further Examples in Connection With This Sample Configuration</h2>
                    <p>In the <span class="bold">C#</span> folder of the configuration you will find various programming examples:</p>
                    <ul>
                        <li>
                            <p>Subfolder <span class="bold">COM_Example</span>: <a href="javascript:startCANoeLauncher('&quot;SAMPLES:\\CAN\\Diagnostics\\UDSsystem\\C#\\COM_Example&quot;')" class="ExecuteLink">Open Folder</a></p>
                        </li>
                    </ul>
                    <p>This folder contains a complete project including source code, in which the execution of diagnostic sequences is controlled via the <span class="Product">CANoe</span> COM server. The program <span class="bold">COM_Example.exe</span> in the subfolder <span class="bold">COM_Example\bin\Release</span> can be executed directly and in turn starts <span class="Product">CANoe</span> together with the UDSSystem sample configuration. In the dialog, the ECUs represented by the associated diagnostic descriptions can be selected, simple diagnostic requests can be sent by <span class="Product">CANoe</span>, and their responses can be evaluated directly in the dialog. In addition, the test unit contained in the sample configuration <span class="bold">UDS Diagnostic System Configuration</span> can be started with the <span class="GUI">Execute Diag Test</span> button. The verdict for the executed test is also displayed in the dialog.</p>
                    <ul>
                        <li>
                            <p>Subfolder <span class="bold">VDS_Example</span>: <a href="javascript:startCANoeLauncher('&quot;SAMPLES:\\CAN\\Diagnostics\\UDSsystem\\C#\\VDS_Example&quot;')" class="ExecuteLink">Open Folder</a></p>
                        </li>
                    </ul>
                    <p>This folder contains a .NET test module based on <span class="bold">Vector Diagnostic Scripting (VDS)</span> â for further information please refer to the <a href="../../../../../../Subsystems/VDSLibrary/Content/html/2884526b-fa44-c3fc-4112-a0bffa514949.htm" data-mc-conditions="vConditions.HTML5Link">API Description Vector.Diagnostics Namespace</a> and <a href="javascript:startDemoLoader('VDS_Library_QuickStart.pdf')" class="ExecuteLink">VDS Library Quickstart Guide</a> <span class="blue">VDS_Library_QuickStart.pdf</span>. The module can be included in the Simulation Setup as follows:</p>
                    <ul>
                        <li>
                            <p>Inserting a .NET test module in the Simulation Setup (right-click on the network in the Simulation Setup).</p>
                        </li>
                    </ul>
                    <ul>
                        <li>
                            <p>Right click on the .NET test module, then after clicking <span class="GUI">Configuration|General|Test Script|File</span> select the <span class="bold">DotNetTester.cs</span> file in the <span class="bold">C#\VDS_Example</span> subfolder.</p>
                        </li>
                    </ul>
                    <p>The .NET test module <span class="bold">DotNetTester</span> can then be started like other test modules and automatically executes various diagnostic test cases.</p>
                    <ul>
                        <li>
                            <p>Subfolder <span class="bold">XILAPI_DiagPortExample</span>: <a href="javascript:startCANoeLauncher('&quot;SAMPLES:\\CAN\\Diagnostics\\UDSsystem\\C#\\XILAPI_DiagPortExample&quot;')" class="ExecuteLink">Open Folder</a></p>
                        </li>
                    </ul>
                    <p>In order to be able to use the example located in this folder, some prerequisites must first be created:</p>
                    <ul>
                        <li>
                            <p>Install the additional components for the ASAM XIL API. The corresponding setup can be found in the installation directory of your <span class="Product">CANoe</span> installation under <span class="bold">Installer Additional Components\XILAPI</span>: <a href="javascript:startDemoLoader('&quot;EXEC:..\\Installer Additional Components\\XILAPI&quot;')" class="ExecuteLink">Open Setup Folder</a></p>
                        </li>
                    </ul>
                    <ul>
                        <li>
                            <p>Activate the XIL API server port in <span class="Product">CANoe</span>. The corresponding check box can be found under <span class="GUI">CANoe Options | Extensions | XIL API &amp; FDX Protocol | <a href="../../../../CANoeCANalyzer/Ribbon/File/Options/Extensions/ExtensionsFDX.htm">XIL API Settings</a></span>.</p>
                        </li>
                    </ul>
                    <p>The folder contains a complete project where, similar to the <span class="Product">CANoe</span> COM Server example, the diagnostic functionality in <span class="Product">CANoe</span> is controlled by another application. The executable application <span class="bold">XILAPI_DiagPortClientExample.exe</span> is located in the subfolder <span class="bold">XILAPI_DiagPortExample\XILAPI_DiagPortClientExample\bin\Release</span>.</p>
                    <p>After starting, this application (XILAPI Client) connects to <span class="Product">CANoe</span> when you click the <span class="GUI">Connect</span> button, i.e. <span class="Product">CANoe</span> is loaded and started if necessary, in turn loads the sample configuration <span class="bold">UDSSystem</span> and starts the measurement. After that, various diagnostic functions can be executed in <span class="Product">CANoe</span> from within the application. In order for DTCs/diagnostic errors to be displayed in the application, you must first save one or more DTCs in the <span class="GUI">DoorFL_FaultMemory</span> panel.</p>
                </div>
                <div>
                    <h2 class="SectionMain">Panels and Windows</h2>
                    <p>This panels and windows appear in several desktops of this sample configuration.</p>
                    <div>
                        <h2 class="SectionSub">DoorFL_Application</h2>
                        <p>Indicates the internal states of the ECU controlling the front left door and can be used for storing Diagnostic Trouble Codes (DTCs) in its simulated fault memory.</p>
                        <div>
                            <h3>Status</h3>
                            <p>Some ECU internal information is displayed, including ECU internal states as the current <span class="bold">session</span> and the <span class="bold">lock level</span>. Note that the ECU falls back into the locked default session if no requests are received for P3 time or in case of a negative response. If you manually deactivate <span class="GUI">Tester Present</span> sending, you have to activate it again manually to keep the ECU in a non-default session. The ECU can be locked, i.e. certain services may not be executed, and the ECU will deny security access.</p>
                        </div>
                        <div>
                            <h3>Rewritable data</h3>
                            <p>The <span class="bold">serial number</span> of <span class="GUI">DoorFL</span> and its variant coding data is displayed. In case <span class="GUI">DoorFL</span> is configured not to support a window lift via variant coding (e.g. using the <span class="GUI">VariantCoding</span> panel), the services reading or writing the window position will reply with negative responses.</p>
                        </div>
                        <div>
                            <h3>Internal values</h3>
                            <p>The values of the simulated ECU internal data is shown (a sine and a saw tooth waveform, the measured voltage and the window position).</p>
                        </div>
                        <div>
                            <h3>DoorFL_FaultMemory</h3>
                            <p>The current content of the ECU fault memory is shown. Additionally, you can add up to 6 DTCs to the simulated ECU fault memory, setting the corresponding status byte individually for each DTC. When storing a DTC, the current odometer value and supply voltage is stored as environment data and as snapshot with this DTC.</p>
                        </div>
                    </div>
                    <div>
                        <h2 class="SectionSub">DoorFR_FaultMemory</h2>
                        <p>This is the same panel like <span class="GUI">DoorFL_FaultMemory</span>, just for the ECU <span class="bold">DoorFR</span>.</p>
                    </div>
                    <div>
                        <h2 class="SectionSub">ExternalSignals</h2>
                        <p data-mc-conditions="vConditions.ForTranslation">Allows to manually modify external signals to stimulate the ECU.</p>
                        <p>You can modify the current <span class="GUI">Odometer Value</span>, the supply <span class="GUI">Voltage</span> as well as the (simulated) hardware door contact status of all 4 doors.</p>
                    </div>
                    <div>
                        <h2 class="SectionSub">Tester</h2>
                        <p>Allows to initiate simple diagnostic request sequences and to send predefined diagnostic requests to the ECU.</p>
                        <h3>Window Position</h3>
                        <p>The user can set the window position to open (0%), half open (50%) and closed (100%).</p>
                        <h3>Read cyclically</h3>
                        <p>Clicking the <span class="GUI">Internals</span> button, you can request so-called <span class="bold">Unacknowledged Unsegmented Data Transfer (UUDT)</span> frames from the simulated ECU. <MadCap:conditionalText data-mc-conditions="vConditions.ForTranslation">With the other two buttons, the tester node will cyclically request the current window position as well as the ECU-internal voltage values.</MadCap:conditionalText> The values of the parameters are then displayed in the State Tracker, the Data Window and the Graphics Window.</p>
                        <p>Via the <span class="GUI">Read contacts + Serial No.</span> button you can request the serial number of <span class="GUI">DoorFL</span> and the status of the door contacts. Note that the value of the door contacts not only depends on the status of the (simulated) HW door contacts but also on the ECU-internal state (e.g. in case the door contact values were overwritten using a diagnostic service).</p>
                    </div>
                    <div>
                        <h2 class="SectionSub">VariantCoding</h2>
                        <p>Similar to the panel <span class="GUI">Tester</span>, a diagnostic request sequence can be initiated. In this case including a tester authentication and a security access sequence.</p>
                        <div>
                            <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                <col class="TableStyle-vTableSymbol-Column-Column1" />
                                <col class="TableStyle-vTableSymbol-Column-Column2" />
                                <tbody>
                                    <tr>
                                        <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                            <p class="Table">
                                                <img src="../../../../../Resources/vImages/vInfo.png" style="width: 48px;height: 45px;" title="Note" alt="Note" />
                                            </p>
                                        </td>
                                        <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                            <p class="TableSymbolHead">Note</p>
                                            <p class="Table">The tester authentication is done according to the security profile which is configured for network <span class="bold">CAN1</span>. This security profile uses UDS Service 0x29 for authentication.</p>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <p>Pressing the buttons <span class="GUI">Read Variant Coding</span> or <span class="GUI">Write Variant Coding</span>, you can write selected coding into the simulated ECU memory. The result of the coding process is displayed (<span class="GUI">OK</span>/<span class="GUI">not OK</span>). Note that the variant coding will fail if the chosen <span class="GUI">Speed to lock door</span> exceeds 50 km/h. Like a real ECU, the simulated ECU will generate a random seed; therefore also the key needed for unlocking the ECU differs for each coding process.</p>
                    </div>
                    <div>
                        <h2 class="SectionSub">TraceOnlyDiagNoTesterPresent</h2>
                        <p>This Trace Window is filtering out the CAN frames and their transport protocol interpretation as well as the <span class="GUI">Tester present</span> diagnostic messages.</p>
                    </div>
                </div>
                <div>
                    <h2 class="SectionMain"><a name="Shortcuts" id="Shortcuts"></a>Desktops</h2>
                    <p>Each <span class="Product">CANoe</span> desktop represents one of the main use cases/features (Console/Fault Memory/Functional Group/ECU Control/Analysis/Test).</p>
                    <p>In this example, two Trace Windows with different filter settings are configured. The Trace Window <span class="GUI">TraceOnlyDiagNoTesterPresent</span> only shows the observed diagnostic messages, while the other window (<span class="GUI">Trace</span>) has no filter activated and therefore shows all CAN frames as well as their OSEK TP  interpretation (&lt;OTP&gt; in the <span class="GUI">Name</span> column) and the observed diagnostic messages (the requests are colored black, while positive and negative responses are colored green and red, respectively).</p>
                    <p>This configuration contains the following desktops:</p>
                    <div>
                        <table style="width: 100%;border-collapse: separate;border-spacing: 2px 0px;border-left-style: none;border-left-width: 1px;border-right-style: none;border-right-width: 1px;border-top-style: none;border-top-width: 1px;border-bottom-style: none;border-bottom-width: 1px;margin-left: 0;margin-right: auto;">
                            <col style="width: 120px;">
                            </col>
                            <col style="width: 120px;">
                            </col>
                            <col style="width: 120px;">
                            </col>
                            <col style="width: 120px;">
                            </col>
                            <col style="width: 120px;">
                            </col>
                            <col style="width: 120px;">
                            </col>
                            <col style="width: 120px;">
                            </col>
                            <col style="width: 120px;">
                            </col>
                            <col>
                            </col>
                            <tbody>
                                <tr>
                                    <td style="background-color: #F0F5F5;vertical-align: middle;border-left-style: solid;border-left-width: 1px;border-left-color: #bebebe;border-right-style: solid;border-right-width: 1px;border-right-color: #bebebe;border-top-style: solid;border-top-width: 1px;border-top-color: #bebebe;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #00a2e8;padding-left: 2pt;padding-right: 5pt;padding-top: 1pt;padding-bottom: 1pt;">
                                        <p class="Table"><a href="#Console" class="Tab">Console and ECU Control</a>
                                        </p>
                                    </td>
                                    <td style="background-color: #F0F5F5;vertical-align: middle;border-left-style: solid;border-left-width: 1px;border-left-color: #bebebe;border-right-style: solid;border-right-width: 1px;border-right-color: #bebebe;border-top-style: solid;border-top-width: 1px;border-top-color: #bebebe;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #00a2e8;padding-left: 2pt;padding-right: 5pt;padding-top: 1pt;padding-bottom: 1pt;">
                                        <p class="Table"><a href="#FaultMemory" class="Tab">Fault Memory</a>
                                        </p>
                                    </td>
                                    <td style="background-color: #F0F5F5;vertical-align: middle;border-left-style: solid;border-left-width: 1px;border-left-color: #bebebe;border-right-style: solid;border-right-width: 1px;border-right-color: #bebebe;border-top-style: solid;border-top-width: 1px;border-top-color: #bebebe;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #00a2e8;padding-left: 2pt;padding-right: 5pt;padding-top: 1pt;padding-bottom: 1pt;">
                                        <p class="Table"><a href="#FunctionalGroup" class="Tab">Functional Group</a>
                                        </p>
                                    </td>
                                    <td style="background-color: #F0F5F5;vertical-align: middle;border-left-style: solid;border-left-width: 1px;border-left-color: #bebebe;border-right-style: solid;border-right-width: 1px;border-right-color: #bebebe;border-top-style: solid;border-top-width: 1px;border-top-color: #bebebe;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #00a2e8;padding-left: 2pt;padding-right: 5pt;padding-top: 1pt;padding-bottom: 1pt;">
                                        <p class="Table"><a href="#Analysis" class="Tab">Analysis</a>
                                        </p>
                                    </td>
                                    <td style="background-color: #F0F5F5;vertical-align: middle;border-left-style: solid;border-left-width: 1px;border-left-color: #bebebe;border-right-style: solid;border-right-width: 1px;border-right-color: #bebebe;border-top-style: solid;border-top-width: 1px;border-top-color: #bebebe;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #00a2e8;padding-left: 2pt;padding-right: 5pt;padding-top: 1pt;padding-bottom: 1pt;">
                                        <p class="Table"><a href="#Parameters" class="Tab">Parameters</a>
                                        </p>
                                    </td>
                                    <td style="background-color: #F0F5F5;vertical-align: middle;border-left-style: solid;border-left-width: 1px;border-left-color: #bebebe;border-right-style: solid;border-right-width: 1px;border-right-color: #bebebe;border-top-style: solid;border-top-width: 1px;border-top-color: #bebebe;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #00a2e8;padding-left: 2pt;padding-right: 5pt;padding-top: 1pt;padding-bottom: 1pt;">
                                        <p class="Table"><a href="#Test" class="Tab">Test</a>
                                        </p>
                                    </td>
                                    <td style="background-color: #F0F5F5;vertical-align: middle;border-left-style: solid;border-left-width: 1px;border-left-color: #bebebe;border-right-style: solid;border-right-width: 1px;border-right-color: #bebebe;border-top-style: solid;border-top-width: 1px;border-top-color: #bebebe;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #00a2e8;padding-left: 2pt;padding-right: 5pt;padding-top: 1pt;padding-bottom: 1pt;">
                                        <p class="Table"><a href="#VariantCoding" class="Tab">Variant Coding</a>
                                        </p>
                                    </td>
                                    <td style="background-color: #F0F5F5;vertical-align: middle;border-left-style: solid;border-left-width: 1px;border-left-color: #bebebe;border-right-style: solid;border-right-width: 1px;border-right-color: #bebebe;border-top-style: solid;border-top-width: 1px;border-top-color: #bebebe;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #00a2e8;padding-left: 2pt;padding-right: 5pt;padding-top: 1pt;padding-bottom: 1pt;">
                                        <p class="Table"><a href="#Setup" class="Tab">Setup</a>
                                        </p>
                                    </td>
                                    <td style="vertical-align: middle;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #00a2e8;padding-left: 5pt;padding-right: 5pt;padding-top: 2pt;padding-bottom: 2pt;">
                                        <p class="Table">&#160;</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div>
                        <h2 class="NavigationM"><a name="Console" id="Console"></a>Console and ECU Control <a href="#Shortcuts" class="TopOfPage">[â² back]</a></h2>
                        <p>This desktop contains the <span class="GUI">DoorFL_Application</span> panel, the <span class="GUI">DoorFL_FaultMemory</span> panel, a Diagnostic Window with the Diagnostic Features <span class="bold">ECU Control</span> and <span class="bold">Diagnostic Console</span> for the ECUs <span class="bold">DoorFL</span> and <span class="bold">DoorFR</span> and the Trace Window <span class="GUI">TraceOnlyDiagNoTesterPresent</span>.</p>
                        <div>
                            <h2 class="SectionSub">DoorFL/FR Console</h2>
                            <p>In this Diagnostic Window the Diagnostic Features <span class="bold">Diagnostic Console</span> and <span class="bold">ECU Control</span> are configured.</p>
                            <p>In the <span class="bold">Diagnostic Console</span>, all diagnostic services defined in the respective diagnostic description (CDD and PDX file) are displayed and can be selected, parameterized and transmitted. The responses of the simulated ECU are displayed in the Diagnostic Trace within the same Diagnostic Window.</p>
                            <p>In the <span class="bold">ECU Control</span>, the state of the ECU in question is displayed from the tester's point of view and can be changed by sending the request in question.</p>
                            <p>You can perform an authentication sequence and unlock the simulated ECU <span class="GUI">DoorFL</span> interactively by using the ECU Control. Note that some buttons might be deactivated or a different number of sessions, security access levels and ECU Reset types may be shown, depending on the definition of the respective diagnostic description. Since a Seed &amp; Key DLL is configured for the simulated ECU <span class="GUI">DoorFL</span>, this DLL will be used for automatically executing the Request <span class="GUI">Seed</span> / <span class="GUI">Generate Key</span> / <span class="GUI">Send Key</span> sequence upon security session changes from this window. The configured Security Profile in the Security Configuration (CANoe UDS System Demo) determines the properties shown in the ECU Control.</p>
                            <p>Example of performing an authentication sequence with the <span class="GUI">ECU DoorFL</span> using the ECU Control:</p>
                            <div class="Procedure">
                                <ol>
                                    <li value="1">click <img src="../../../../../Resources/vImages/vIconsFlat/PlayOrangeBig_Icon16.png"></img> at <span class="GUI">Authenticate</span></li>
                                    <li value="2">Now the authentication sequence can be observed in the Trace Window. The Security Profile determines the behavior of this sequence. In this sample configuration it will change to the extended session and then perform an authentication using <span class="bold">UDS service 0x29</span>, using the <span class="bold">Role</span> value entered in the <span class="GUI">Properties</span> section. The Panel <span class="GUI">DoorFL</span> shows that the Tester was authenticated and in the <span class="GUI">ECU Cockpit</span> area of <span class="GUI">DoorFL</span>, the symbol indicates that the authentication was successful.</li>
                                </ol>
                            </div>
                            <p>Example of unlocking the ECU <span class="GUI">DoorFL</span> using the ECU Control:</p>
                            <div class="Procedure">
                                <ol>
                                    <li value="1">click <img src="../../../../../Resources/vImages/vIconsFlat/PlayOrangeBig_Icon16.png" /> at <span class="GUI">[Type 0x03] Extended Diagnostic Session Start</span></li>
                                    <li value="2">click <img src="../../../../../Resources/vImages/vIconsFlat/PlayOrangeBig_Icon16.png" /> at <span class="GUI">[Level 0x01] Request Seed 0x01 Request</span></li>
                                    <li value="3">Now the Request <span class="GUI">Seed</span> / <span class="GUI">Send Key</span> sequence can be observed in the Trace Window. The Panel <span class="GUI">DoorFL</span> shows that the simulated ECU is unlocked and the unlock level of <span class="GUI">DoorFL</span>.</li>
                                </ol>
                            </div>
                        </div>
                    </div>
                    <div>
                        <h2 class="NavigationM"><a name="FaultMemory" id="FaultMemory"></a>Fault Memory <a href="#Shortcuts" class="TopOfPage">[â² back]</a></h2>
                        <p>This desktop contains the <span class="GUI">DoorFL - Fault Memory Window</span>, the <span class="GUI">DoorFL_Application</span> panel, the <span class="GUI">DoorFL_FaultMemory</span> panel, the <span class="GUI">ExternalSignals</span> panel, the <span class="GUI">Tester</span> panel and the Trace Window <span class="GUI">TraceOnlyDiagNoTesterPresent</span>.</p>
                        <div>
                            <h2 class="SectionSub">DoorFL â Fault Memory</h2>
                            <p>When you stored one or more DTCs using the panel <span class="GUI">DoorFL</span>, the respective DTCs will be shown in the Fault Memory Window after clicking the <span class="GUI">Update fault memory list</span> button. Additionally, you can see the snapshot data stored with each DTC when the <span class="GUI">Display DTC details</span> button is activated.</p>
                        </div>
                    </div>
                    <div>
                        <h2 class="NavigationM"><a name="FunctionalGroup" id="FunctionalGroup"></a>Functional Group <a href="#Shortcuts" class="TopOfPage">[â² back]</a></h2>
                        <p>This desktop contains the <span class="GUI">FunctionalGroup - Diagnostic Console</span>, the <span class="GUI">FunctionalGroup - Fault Memory Window</span>, the <span class="GUI">DoorFL_Application</span> panel, the <span class="GUI">DoorFL_FaultMemory panel</span>, the <span class="GUI">DoorFR</span> panel and the Trace Window <span class="GUI">TraceOnlyDiagNoTesterPresent</span>.</p>
                        <div>
                            <h2 class="SectionSub">Functional Group â Fault Memory</h2>
                            <p>When you stored one or more DTCs using the <span class="GUI">DoorFL</span> or <span class="GUI">DoorFR</span>, the respective DTCs of both simulated ECUs will be shown in the Fault Memory Window after clicking the <span class="GUI">Update fault memory list</span> button. Note that for a functional group it is not possible to activate the <span class="GUI">Display DTC details</span> button.</p>
                        </div>
                        <div>
                            <h2 class="SectionSub">Functional Group â Console</h2>
                            <p>This Diagnostic-Window displays all diagnostic services, which are defined in the diagnostic description with the ECU qualifier <span class="bold">FunctionalGroup</span>. This diagnostic description is configured with the usage <span class="GUI">Diagnostics tester: Functional Group Requests</span>. Like in theDiagnostic Console for <span class="GUI">DoorFL</span> and <span class="GUI">DoorFR</span>, Services can be selected and parameterized. However, instead of sending the request on the physical CAN ID (<span class="bold">Request to ECU</span>), the request is sent on the functional CAN ID (<span class="bold">Functional to ECU</span>). Consequently, all responses of all responding ECUs (here: <span class="GUI">DoorFL</span> and <span class="GUI">DoorFR</span>) will be displayed in the diagnostic trace of this Diagnostic-Window.</p>
                        </div>
                    </div>
                    <div>
                        <h2 class="NavigationM"><a name="Analysis" id="Analysis"></a>Analysis <a href="#Shortcuts" class="TopOfPage">[â² back]</a></h2>
                        <p>This desktop contains the Data Window, the Graphics Window the State Tracker, the <span class="GUI">DoorFL_Application </span> panel, the <span class="GUI">DoorFL_FaultMemory</span> panel, the <span class="GUI">ExternalSignals</span> panel, the <span class="GUI">Tester</span> panel and the Trace Window <span class="GUI">Trace</span>.</p>
                        <div>
                            <h2 class="SectionSub">Data Window, Graphics Window and State Tracker</h2>
                            <p>In those windows, several diagnostic parameters are displayed. Note that they are only updated if a response with the corresponding parameter was received. To request the parameters, in the <span class="GUI">Tester</span> panel, in the <span class="GUI">Read cyclically</span> group click the buttons <span class="GUI">Internals</span>, <span class="GUI">Window Pos.</span> and <span class="GUI">Voltage</span>.</p>
                        </div>
                        <div>
                            <h2 class="SectionSub">Trace</h2>
                            <p>This Trace Window shows the unfiltered communication. Therefore, all three communication layers (CAN frames, Transport protocol PDUs and diagnostic messages) are visible.</p>
                        </div>
                    </div>
                    <div>
                        <h2 class="NavigationM"><a name="Parameters" id="Parameters"></a>Parameters <a href="#Shortcuts" class="TopOfPage">[â² back]</a></h2>
                        <p>This desktop contains the <span class="GUI">DoorFL_Application</span> panel, the <span class="GUI">DoorFL_FaultMemory</span> panel, the <span class="GUI">Tester</span> panel, the <span class="GUI">ExternalSignals</span> panel, the Graphics Window, the Diagnostic Parameters Window and the Trace Window <span class="GUI">TraceOnlyDiagNoTesterPresent</span>.</p>
                        <div>
                            <h2 class="SectionSub">Diagnostic Parameters Window</h2>
                            <p>This window is configured in a way that some diagnostic parameters are cyclically requested from the ECU (activated <span class="GUI">Auto-Read</span> check box) and displayed in the window, both as physical and raw value. Additionally, diagnostic parameter values can be requested manually by clicking the <img src="../../../../../Resources/vImages/vIcons/download_16.png" /> button  at the corresponding parameter. Note that in this case, also other parameters might be updated if they are configured in this window and transmitted in the response of the corresponding request.</p>
                        </div>
                    </div>
                    <div>
                        <h2 class="NavigationM"><a name="Test" id="Test"></a>Test <a href="#Shortcuts" class="TopOfPage">[â² back]</a></h2>
                        <p>This desktop contains the <span class="GUI">DoorFL_Application</span> panel, the <span class="GUI">DoorFL_FaultMemory panel</span>, the <span class="GUI">DiagTestConfiguration</span> Test Execution Window, the <span class="GUI">ExternalSignals</span> panel, the <span class="GUI">Tester</span> panel the <span class="GUI">VariantCoding</span> panel and the Trace Window <span class="GUI">TraceOnlyDiagNoTesterPresent</span>.</p>
                        <div>
                            <h2 class="SectionSub">DiagTestConfiguration</h2>
                            <p>When starting this test unit, an automated diagnostic test is performed.</p>
                        </div>
                    </div>
                    <div>
                        <h2 class="NavigationM"><a name="VariantCoding" id="VariantCoding"></a>VariantCoding <a href="#Shortcuts" class="TopOfPage">[â² back]</a></h2>
                        <p>This desktop contains the <span class="GUI">DoorFL_Application</span> panel, the Diagnostic Window with the Diagnostic Features <span class="GUI">ECU Control</span> and <span class="GUI">Variant Coding</span> and the Trace Window <span class="GUI">TraceOnlyDiagNoTesterPresent</span>.</p>
                        <div>
                            <h2 class="SectionSub">DoorFL&#160;Variant Coding</h2>
                            <p>Using this Diagnostic-Window, you can read, write and compare variant coding data of the configured simulated ECU(s).</p>
                            <div>
                                <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                    <col class="TableStyle-vTableSymbol-Column-Column1" />
                                    <col class="TableStyle-vTableSymbol-Column-Column2" />
                                    <tbody>
                                        <tr>
                                            <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                <p class="Table">
                                                    <img src="../../../../../Resources/vImages/vInfo.png" style="width: 48px;height: 45px;" title="Note" alt="Note" />
                                                </p>
                                            </td>
                                            <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                <p class="TableSymbolHead">Note</p>
                                                <p class="Table"> 	In this sample configuration, accessing the variant coding data is only possible in the extended session. This task as well as authentication according to UDS Service 0x29 (Authentication) is done automatically by the Variant Coding Window due to the security profile which is configured for network <span class="bold">CAN1</span>.</p>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div>
                        <h2 class="NavigationM"><a name="Setup" id="Setup"></a>Setup <a href="#Shortcuts" class="TopOfPage">[â² back]</a></h2>
                        <p>This desktop contains the Simulation Setup, the Measurement Setup, the Basic Diagnostic Editor and the <span class="GUI">Help</span> panel.</p>
                        <div>
                            <h2 class="SectionSub">Basic Diagnostics</h2>
                            <p>In case a diagnostic description file is not available for an ECU, you can define simply structured diagnostic services with this <span class="GUI">Basic Diagnostic Editor</span> and send them interactively to the ECU using the Diagnostic Console. In the sample configuration, the basic diagnostic description defined using this editor was added as an <span class="GUI">Additional Description</span> to the <span class="GUI">DoorFL</span> diagnostic description, extending it by the diagnostic services <span class="bold">WindowLiftFinePositionRead</span> and <span class="bold">WindowLiftFinePositionWrite</span> and a service <span class="bold">UnimplementedServiceData_Read</span> for which <span class="GUI">DoorFL</span> will respond with a negative response.</p>
                            <p>You can send Diagnostic requests defined in this basic diagnostic description using the <span class="GUI">DoorFL.Additional</span> Diagnostic Console.</p>
                            <p>Once the measurement is stopped, you can also define new services in the Basic Diagnostic Editor, commit the changed services to the configuration and execute them after measurement start.</p>
                        </div>
                    </div>
                </div>
                <p class="LinkList">&#160;</p>
            </div>
        </div>
        <div class="Footer">
            <div class="FooterWhite">
                <table class="FooterWhite" style="border-collapse: collapse;margin-left: auto;margin-right: auto;">
                    <col style="width: 70px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col style="width: 16px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col />
                    <tbody>
                        <tr>
                            <td>
                                <div class="buttons popup-container clearfix topicToolbarProxy topicToolbarProxyFooter _Skins_HTML5TopicToolbar mc-component nocontent">
                                    <div class="button-group-container-left">
                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                            <div>
                                                <div role="img" class="button-icon-wrapper" aria-label="Expand all">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                        <button class="button needs-pie remove-highlight-button" title="Remove Highlights">
                                            <div>
                                                <div role="img" class="button-icon-wrapper">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <p class="vec_BuildInfo"><a href="../../../../Shared/HowToUseOnlineHelp.htm" title="Tips for using the help" alt="Tips for using the help"><img src="../../../../../Resources/vImages/vBackstage/vHelpInfo.png" /></a>
                                </p>
                            </td>
                            <td>
                                <p class="vec_BuildInfo" style="text-align: right;"><span class="mc-variable Vector.BuildTime variable">2023-09-26T19:49:32</span>
                                </p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <table style="width: 100%;border-collapse: separate;border-spacing: 3px 0px;margin-left: auto;margin-right: auto;caption-side: top;">
                <col />
                <col />
                <col />
                <col data-mc-conditions="vConditions.HTML5Link" />
                <tbody>
                    <tr>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;">
                            <p class="vec_Footer">Â©&#160;Vector Informatik GmbH</p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;text-align: right;">
                            <p class="vec_FooterBold">
                                <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded,vConditions.TestDataEditorExcluded">CANoe</MadCap:conditionalText> Version <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded">17 SP3</MadCap:conditionalText></p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="../../../../Shared/ContactCopyrightLicense.htm" class="vec_Footer MCXref xref xrefvec_Footer">Contact/Copyright/License</a>
                            </p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="https://www.vector.com/int/en/company/get-info/privacy-policy/" target="_blank" class="vec_Footer">Data Privacy Notice</a>
                            </p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>
</html>