<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="" data-mc-search-type="Stem" data-mc-help-system-file-name="CANoeCANalyzer.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../../Skins/Favicons/browserconfig.xml" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../Skins/Favicons/favicon-16x16.png" /><title>C# Binding for Distributed Objects</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Resources/Stylesheets/vTableMasterPageHeader.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../Resources/Stylesheets/vStylesheet.css" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.expand-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.remove-highlight-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.collapse-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.needs-pie
{
	behavior: url('../../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../../Resources/Stylesheets/vTableSymbol.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../Skins/Favicons/favicon-16x16.png" />
        <script src="../../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapGlobal.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapDom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapUtilities.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapXhr.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTextEffects.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSlideshow.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMessageBus.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMessageBus.CrossFrame.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapDefault.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMediaQueries.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAccessibility.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapHelpSystem.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAliasFile.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopicFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapFeedbackHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSkinHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.MiniToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.SideMenu.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapIndex.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapGlossary.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapParser.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSearch.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapNavigateTopics.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapLms.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapELearning.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopic.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMicroContentComponent.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSearchHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopicElements.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTriPane.js" type="text/javascript" defer="defer">
        </script>
        <script type="text/jscript" src="../../../Resources/vScripts/SyntaxHighlighting.js">
        </script>
        <script type="text/jscript" src="../../../Resources/vScripts/TabSwitch.js">
        </script>
        <script type="text/javascript" src="../../../Resources/vScripts/Vector.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../CANoeCANalyzer.htm#Topics/CANoeCANalyzer/CommunicationConcept/CCDOCSharpBinding.htm">Open topic with navigation</a>
        </p>
        <div class="Body">
            <div role="main" id="mc-main-content">
                <div>
                    <p class="StructurePath"><a href="../CANoeCANalyzer.htm" class="StructurePath" data-mc-conditions="vConditions.CANalyzerExclude,vConditions.CANoe4ServerExcluded,vConditions.CANoe4SWExcluded,vConditions.TestDataEditorExcluded,vConditions.vTESTstudioExcluded,vConditions.TestUnitRunnerExcluded,vConditions.CANoeNMExcluded"><img src="../../../Resources/vImages/vToolIcons/CANoe_Icon16.png" alt="" />&#160;CANoe</a> » <a href="CC.htm" class="StructurePath MCXref xref xrefStructurePath">Communication Concept</a> » <span class="mc-variable System.Title variable">C# Binding for Distributed Objects</span></p>
                    <h1><span class="mc-variable System.Title variable">C# Binding for Distributed Objects</span>
                    </h1>
                    <p class="MenuPath">&#160;</p>
                    <p class="AutoSearchFilterConcepts"><a name="aanchor796"></a>
                        <MadCap:concept term="SFCore" />
                    </p>
                    <p class="IndexConcept"><a name="kanchor680"></a>
                    </p>
                </div>
                <p>A special variant of <a href="CCBinding.htm">binding</a> for <a href="CCDistributedObjects.htm">distributed objects (DO)</a> is to implement the transmission with C# itself. Therefore the binding attribute is set to <span class="bold">C#</span> and special functions and handlers are used to write the received values into the object or to send the values. The C# program is normally configured in the <a href="../Windows/CommunicationSetup/CommunicationSetup.htm">Communication Setup</a><MadCap:conditionalText data-mc-conditions="vConditions.CANoe4SWExcluded">, in special cases in the <a href="../Windows/SimulationSetup/SimulationSetupWindow.htm">Simulation Setup</a></MadCap:conditionalText>.</p>
                <p>The C# binding can be used e.g. for prototypical implementations of a protocol, or to implement a special transmission for a few members. For a general protocol implementation it is rather not suitable, because a separate handler is needed for each DO member or interface member.</p>
                <h2 class="SectionMain">Provided Data, Event and Field Member</h2>
                <p>To send the value, use either the <span class="bold">[OnTransmitValue]</span> attribute on a method without parameters or the <span class="bold">[OnTransmitAnyValue]</span> attribute on a method that has an interface type as its only parameter. The method is called as soon as the value should be transmitted. The concrete time depends especially on the value of the attribute <a href="CCDOAttributes.htm" class="bold">TxTrigger</a> of the member; the call is, however, in any case decoupled from other handlers. This means, for example, that if the member's value was set in a <span class="bold">Timer</span> callback and the <span class="bold">TxTrigger</span> attribute is set to <span class="bold">OnUpdate</span>, the method marked with the attribute is called in the same simulation step as the <span class="bold">Timer</span> callback</p>
                <h2 class="SectionMain">Consumed Data, Event and Field Member</h2>
                <p>If you have received the value (e.g. via a socket or I/O hardware), you can set it into the member using <span class="SourceCode">Binding.ValueReceived</span>. The value then gets the current simulation time as timestamp. Methods marked with <span class="bold">[OnChange]</span> or <span class="bold">[OnUpdate]</span> are called in the same simulation step, but decoupled.</p>
                <p>Unlike most functions of the <span class="Product">CANoe</span>/<span class="Product">CANalyzer</span> .NET API, <span class="SourceCode">ValueReceived</span> may also be called from background threads.</p>
                <h2 class="SectionMain">Consumed Method Member</h2>
                <p>Two steps are necessary to transfer a method call:</p>
                <ol>
                    <li value="1">The <span class="bold">In</span> parameters are transmitted with a method marked by <span class="bold">[OnTransmitCall]</span> or <span class="bold">[OnTransmitAnyCall]</span>. This is called directly if the method is to be called with <span class="SourceCode">CallAsync</span>. In contrast to <span class="bold">[OnTransmitValue]</span>, there is no decoupling here. The marked method must have a <span class="bold">TransientCallContext</span> of the type of the DO method as the parameter, via which the values of the <span class="bold">In</span> parameters can be read. In the case of <span class="bold">[OnTransmitAnyCall]</span>, it must also have an object of the interface type as the first parameter.</li>
                    <li value="2">When the response is received, the <span class="SourceCode">Binding.ReturnReceived</span> function is called. This function expects as parameter besides the member also a <span class="SourceCode">CallContext</span> which can be created with the function <span class="SourceCode">Binding.CreateConsumerCallContext</span>. Before you call <span class="SourceCode">ReturnReceived</span> you should set the return value and the <span class="bold">out</span> parameters in the <span class="SourceCode">CallContext</span>.</li>
                </ol>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Example</p>
                                    <p class="Table">The following object is modeled in <a href="../../vCDL/vCDLStartpage.htm">vCDL</a>:</p>
                                    <p class="TableSourceCode">namespace Example<br />{<br />&#160;&#160;interface ICalculator<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;[Binding="C#"]<br />&#160;&#160;&#160;&#160;consumed method double Divide(double x, double y, out boolean success);<br />&#160;&#160;}<br />&#160;&#160;object Calculator : ICalculator;<br />}</p>
                                    <p class="Table">The method call should be forwarded to a server using <span class="bold">gRPC</span>, for example. In C# you could use the following method for this:</p>
                                    <p class="TableSourceCode">[OnTransmitCall(Example.Calculator.MemberIDs.Divide)]<br />public void TransmitCall(Example.ICalculator_Types.Divide.TransientCallContext callContext)<br />{<br />&#160;&#160;var reqID = callContext.ReqID; // remember the request ID<br />&#160;&#160;// the gRPC call is asynchronous and returns a task<br />&#160;&#160;var task = mClient.Divide(callContext.x, callContext.y);<br />&#160;&#160;// when the task is completed, call ReturnReceived<br />&#160;&#160;task.ContinueWith(t =&gt;<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;// first create a call context with the remembered request ID<br />&#160;&#160;&#160;&#160;Binding.CreateConsumerCallContext(Calc.Calculator.Divide, reqID,<br />&#160;&#160;&#160;&#160;out Calc.ICalculator_Types.Divide.BindingCallContext callContext2);<br />&#160;&#160;&#160;&#160;using (callContext2)<br />&#160;&#160;&#160;&#160;{<br />&#160;&#160;&#160;&#160;&#160;&#160;if (!t.IsFaulted)<br />&#160;&#160;&#160;&#160;&#160;&#160;{<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;callContext2.Result = t.Result;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;callContext2.success = true;<br />&#160;&#160;&#160;&#160;&#160;&#160;}<br />&#160;&#160;&#160;&#160;&#160;&#160;else<br />&#160;&#160;&#160;&#160;&#160;&#160;{<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;callContext2.Result = 0;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;callContext2.success = false;<br />&#160;&#160;&#160;&#160;&#160;&#160;}<br />&#160;&#160;&#160;&#160;&#160;&#160;Binding.ReturnReceived(Calc.Calculator.Divide, callContext2);<br />&#160;&#160;&#160;&#160;}<br />&#160;&#160;});<br />}</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionMain">Provided Method Member</h2>
                <p>The transmission of provided method members is also done in two steps:</p>
                <ol>
                    <li value="1">The method call is forwarded to the distributed object with <span class="SourceCode">Binding.CallReceived</span>. For this purpose a <span class="SourceCode">CallContext</span> is created with the function <span class="SourceCode">Binding.CreateCallContext</span>. Decoupled, i.e. in the same simulation step, but only after the end of the current handler, <span class="SourceCode">on fct_calling</span> or <span class="SourceCode">on fct_Called-Handler</span> are called.</li>
                    <div>
                        <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                            <col class="TableStyle-vTableSymbol-Column-Column1" />
                            <col class="TableStyle-vTableSymbol-Column-Column2" />
                            <tbody>
                                <tr>
                                    <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                        <p class="Table">
                                            <img src="../../../Resources/vImages/vInfo.png" style="width: 48px;height: 45px;" title="Note" alt="Note" />
                                        </p>
                                    </td>
                                    <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                        <p class="TableSymbolHead">Note</p>
                                        <p class="Table">The <span class="SourceCode">CallContext</span> object accessible there as <span class="bold">this</span> is not the same as the one passed to <span class="SourceCode">Binding.CallReceived</span>, but the parameter values are the same.</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <li value="2">The response is transmitted with a method marked with <span class="bold">[OnTransmitReturn]</span> or <span class="bold">[OnTransmitAnyReturn]</span>. The marked method must have a <span class="bold">TransientCallContext</span> of the type of the DO method as parameter, via which the values for <span class="bold">out</span> parameter and <span class="bold">return</span> value can be read. In the case of <span class="bold">[OnTransmitAnyReturn]</span>, it must also have an object of the interface type as the first parameter.</li>
                </ol>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Example</p>
                                    <p class="Table">In analogy for example of consumed method members the opposite side is to be modeled. The corresponding vCDL definition would be:</p>
                                    <p class="TableSourceCode">namespace Example<br />{<br />&#160;&#160;interface ICalculator<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;[Binding="C#"]<br />&#160;&#160;&#160;&#160;provided method double Divide(double x, double y, out boolean success);<br />&#160;&#160;}<br />&#160;&#160;object Calculator : ICalculator;<br />}</p>
                                    <p class="Table">And the implementation of the C# binding could look like this:</p>
                                    <p class="TableSourceCode">// Models a future through a task<br />class Future&lt;T&gt;<br />{<br />&#160;&#160;private T mValue;<br />&#160;&#160;public Task&lt;T&gt; Task { get; set; }<br />&#160;&#160;public Future() { Task = new Task&lt;T&gt;(() =&gt; mValue); }<br />&#160;&#160;public void Set(T value)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;mValue = value;<br />&#160;&#160;&#160;&#160;// when the value is calculated, put it directly in the<br />&#160;&#160;&#160;&#160;// task, which is then completed<br />&#160;&#160;&#160;&#160;Task.RunSynchronously();<br />&#160;&#160;}<br />}<br /><br />// Implementation class for gRPC<br />class CalculatorImpl : gRPCCalculator.CalculatorBase<br />{<br />&#160;&#160;// create unique request IDs<br />&#160;&#160;private long mNextRequestID = 1;<br /><br />&#160;&#160;// remember the future for each call request<br />&#160;&#160;private Dictionary&lt;long, Future&lt;Result&gt;&gt; mFutures<br />&#160;&#160;= new Dictionary&lt;long, Future&lt;Result&gt;&gt;();<br /><br />&#160;&#160;// protect the futures dictionary from concurrent access<br />&#160;&#160;private Object mLockObject = new Object();<br /><br />&#160;&#160;// Implementation of the gRPC server method.<br />&#160;&#160;// Input is the datatype of the gRPC call message,<br />&#160;&#160;// Result is the datatype of the gRPC return message.<br />&#160;&#160;public override Task&lt;Result&gt; Divide(Input request, ServerCallContext context)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;// allocate and remember a new future<br />&#160;&#160;&#160;&#160;var future = new Future&lt;Result&gt;();<br />&#160;&#160;&#160;&#160;lock (mLockObject)<br />&#160;&#160;&#160;&#160;{<br />&#160;&#160;&#160;&#160;&#160;&#160;mFutures[mNextRequestID] = future;<br />&#160;&#160;&#160;&#160;}<br />&#160;&#160;&#160;&#160;// create a call context with the new request ID<br />&#160;&#160;&#160;&#160;Binding.CreateProviderCallContext(Calculator.Divide, mNextRequestID,<br />&#160;&#160;&#160;&#160;out Calc.ICalculator_Types.Divide.BindingCallContext callContext);<br />&#160;&#160;&#160;&#160;using (callContext)<br />&#160;&#160;&#160;&#160;{<br />&#160;&#160;&#160;&#160;&#160;&#160;callContext.x = request.X;<br />&#160;&#160;&#160;&#160;&#160;&#160;callContext.y = request.Y;<br />&#160;&#160;&#160;&#160;&#160;&#160;Binding.CallReceived(Calculator.Divide, callContext);<br />&#160;&#160;&#160;&#160;}<br />&#160;&#160;&#160;&#160;++mNextRequestID;<br />&#160;&#160;&#160;&#160;// return the task of the future to the gRPC framework<br />&#160;&#160;&#160;&#160;return future.Task;<br />&#160;&#160;}<br /><br />&#160;&#160;// called from the [OnTransmitResult] method (see below)<br />&#160;&#160;public void ReturnResult(long requestID, Result result)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;Future&lt;Result&gt; future = null;<br />&#160;&#160;&#160;&#160;lock(mLockObject)<br />&#160;&#160;&#160;&#160;{<br />&#160;&#160;&#160;&#160;&#160;&#160;if (mFutures.TryGetValue(requestID, out future))<br />&#160;&#160;&#160;&#160;&#160;&#160;{<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mFutures.Remove(requestID);<br />&#160;&#160;&#160;&#160;&#160;&#160;}<br />&#160;&#160;&#160;&#160;}<br />&#160;&#160;&#160;&#160;// set the value into the future, which completes the task<br />&#160;&#160;&#160;&#160;future?.Set(result);<br />&#160;&#160;}<br />}<br /><br />// in the MeasurementScript class, create the CalculatorImpl instance<br />// and register it as gRPC server implementation, e.g. in the Initialize method<br />&#160;&#160;// also in the MeasurementScript class<br />&#160;&#160;[OnTransmitReturn(Calculator.MemberIDs.Divide)]<br />&#160;&#160;public void TransmitReturn(Example.ICalculator_Types.Divide.TransientCallContext callContext)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;mCalculator.ReturnResult(callContext.ReqID, new Result<br />&#160;&#160;&#160;&#160;&#160;&#160;{ Success = callContext.success ? 1 : 0, Value = callContext.Result });<br />&#160;&#160;}</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionMain">Field Getter and Setter</h2>
                <p>Field getters and setters are transferred with the same handlers and functions as method members.</p>
                <h2 class="SectionMain">Subscription for Consumed Data / Event / Field Membern</h2>
                <p>For a member (consumed data, event or field) with <span class="bold">PublishSubscribe</span> communication pattern, you also need a way to transmit a subscription and receive its confirmation. This can be done with the <span class="bold">OnTransmitSubscribe</span> / <span class="bold">[OnTransmitAnySubscribe]</span> and <span class="bold">OnTransmitUnsubscribe</span> / <span class="bold">[OnTransmitAnyUnsubscribe]</span> attributes and the <span class="SourceCode">Binding.SubscriptionStateReceived</span> function.</p>
                <p>The methods are called each time a change in the subscription is to be transmitted. Please note that this is a logical transfer, which does not necessarily have to correspond 1:1 to a physical transfer:</p>
                <ul>
                    <li>A call to <span class="SourceCode">Subscribe</span> will result in a call to <span class="SourceCode">OnTransmitSubscribe</span> if the <span class="bold">SubscriptionState</span> at the member is <span class="bold">unsubscribed</span> (and the member is connected to its virtual network)</li>
                    <li>A call to <span class="SourceCode">Unsubscribe</span> will result in a call to <span class="SourceCode">OnTransmitUnsubscribe</span> if the <span class="bold">SubscriptionState</span> at the member is not already <span class="bold">unsubscribed</span> (and the member is connected to its virtual network).</li>
                    <li>A protocol might require a periodic repetition of a subscription so that it does not expire automatically. In this case a timer would have to be set in C# in <span class="SourceCode">OnTransmitSubscribe</span> and switched off in <span class="SourceCode">OnTransmitUnsubscribe</span>.</li>
                </ul>
                <p>There is no C# API for receiving a <span class="bold">Subscribe</span> or <span class="bold">Unsubscribe</span> from a provided member. Depending on the protocol it is possible that subscriptions have to be managed by a provided member, but this is done completely on protocol level and does not affect the values or states of the provided member.</p>
                <h2 class="SectionMain">Announcement forProvided Data / Event / Field Membern</h2>
                <p>For a member (provided data, event or field) with <span class="bold">PublishSubscribe</span> communication pattern, where the <a href="CCDOAttributes.htm" class="bold">HasAnnounceAPI</a> attribute is set to <span class="bold">true</span>, you also need a way to transmit an announcement and receive its confirmation. This can be done with the handlers <span class="bold">OnTransmitAnnounce</span> / <span class="bold">[OnTransmitAnyAnnounce]</span> and <span class="bold">OnTransmitUnannounce</span> / <span class="bold">[OnTransmitAnyUnannounce]</span> and the function <span class="SourceCode">Binding.AnnouncementStateReceived</span>.</p>
                <p>The handlers are called each time a change in the announcement is to be transmitted. Please note that this is a logical transfer, which does not necessarily have to correspond 1:1 to a physical transfer:</p>
                <ul>
                    <li>A call to <span class="SourceCode">Announce</span> results in a call to <span class="SourceCode">OnTransmitAnnounce</span> exactly when the <span class="bold">AnnouncementState</span> is <span class="bold">Unannounced</span> at the member (and the member is connected to its virtual network).</li>
                    <li>A call to <span class="SourceCode">Unannounce</span> will result in a call to <span class="SourceCode">OnTransmitUnannounce</span> exactly when the <span class="bold">AnnouncementState</span> is <span class="bold">Announced</span> at the member (and the member is connected to its virtual network).</li>
                    <li>A protocol might require a periodic repetition of an announcement so that it does not expire automatically. In this case a timer would have to be set in CAPL in <span class="SourceCode">OnTransmitAnnounce</span> and switched off in <span class="SourceCode">OnTransmitUnannounce</span>.</li>
                </ul>
                <p>There is no C# API for receiving an <span class="bold">Announce</span> or <span class="bold">Unannounce</span> to a consumed member. Depending on the protocol it is possible that announcements to a consumed member have to be received and processed, but this is done completely on protocol level and does not affect the values or states of the consumed member.</p>
                <h2 class="SectionMain">Using Handlers for Interface Members</h2>
                <p>With the attributes <span class="bold">[OnTransmitAny…]</span> you can use the respective handlers for interface members instead of members of a concrete distributed object. This is especially useful if you have several distributes objects with the same interface and the members of all distributes objects are to be transmitted in the same way with the C# binding. The handler is then called for each corresponding DO member with C# binding and is passed the distributed object as the first parameter. However, with a specific handler for a concrete DO member, you could still override the behavior.</p>
                <p>When using handlers for interface members, it is helpful in most cases to define and use additional <a href="CCDOAttributes.htm">attributes</a> that customize the behavior for a concrete member. For example, you could specify a member ID that is transmitted to a server. Attribute values can be read via the <span class="bold">AttributeAccess</span> class.</p>
                <p class="LinkList">
                    <MadCap:conditionalText data-mc-conditions="vConditions.CANoe4SWExcluded"><a href="../../ModelEditor/ModelEditorBindings.htm" class="LinkList">Model Editor: Bindings</a>&#160;&#160;•&#160;&#160;</MadCap:conditionalText><a href="../../vCDL/vCDLStartpage.htm" class="LinkList">vCDL</a>
                </p>
            </div>
        </div>
        <div class="Footer">
            <div class="FooterWhite">
                <table class="FooterWhite" style="border-collapse: collapse;margin-left: auto;margin-right: auto;">
                    <col style="width: 70px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col style="width: 16px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col />
                    <tbody>
                        <tr>
                            <td>
                                <div class="buttons popup-container clearfix topicToolbarProxy topicToolbarProxyFooter _Skins_HTML5TopicToolbar mc-component nocontent">
                                    <div class="button-group-container-left">
                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                            <div>
                                                <div role="img" class="button-icon-wrapper" aria-label="Expand all">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                        <button class="button needs-pie remove-highlight-button" title="Remove Highlights">
                                            <div>
                                                <div role="img" class="button-icon-wrapper">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <p class="vec_BuildInfo"><a href="../../Shared/HowToUseOnlineHelp.htm" title="Tips for using the help" alt="Tips for using the help"><img src="../../../Resources/vImages/vBackstage/vHelpInfo.png" /></a>
                                </p>
                            </td>
                            <td>
                                <p class="vec_BuildInfo" style="text-align: right;"><span class="mc-variable Vector.BuildTime variable">2023-09-26T19:49:32</span>
                                </p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <table style="width: 100%;border-collapse: separate;border-spacing: 3px 0px;margin-left: auto;margin-right: auto;caption-side: top;">
                <col />
                <col />
                <col />
                <col data-mc-conditions="vConditions.HTML5Link" />
                <tbody>
                    <tr>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;">
                            <p class="vec_Footer">©&#160;Vector Informatik GmbH</p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;text-align: right;">
                            <p class="vec_FooterBold">
                                <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded,vConditions.TestDataEditorExcluded">CANoe</MadCap:conditionalText> Version <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded">17 SP3</MadCap:conditionalText></p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="../../Shared/ContactCopyrightLicense.htm" class="vec_Footer MCXref xref xrefvec_Footer">Contact/Copyright/License</a>
                            </p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="https://www.vector.com/int/en/company/get-info/privacy-policy/" target="_blank" class="vec_Footer">Data Privacy Notice</a>
                            </p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>
</html>