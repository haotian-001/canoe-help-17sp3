<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="" data-mc-search-type="Stem" data-mc-help-system-file-name="CANoeCANalyzer.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../../Skins/Favicons/browserconfig.xml" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../Skins/Favicons/favicon-16x16.png" /><title>Distributed Objects</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Resources/Stylesheets/vTableMasterPageHeader.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../Resources/Stylesheets/vStylesheet.css" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.expand-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.remove-highlight-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.collapse-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.needs-pie
{
	behavior: url('../../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../../Resources/Stylesheets/vTable.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../Resources/Stylesheets/vTableSymbol.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../Skins/Favicons/favicon-16x16.png" />
        <script src="../../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapGlobal.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapDom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapUtilities.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapXhr.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTextEffects.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSlideshow.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMessageBus.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMessageBus.CrossFrame.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapDefault.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMediaQueries.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAccessibility.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapHelpSystem.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAliasFile.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopicFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapFeedbackHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSkinHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.MiniToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.SideMenu.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapIndex.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapGlossary.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapParser.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSearch.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapNavigateTopics.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapLms.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapELearning.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopic.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMicroContentComponent.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSearchHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopicElements.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTriPane.js" type="text/javascript" defer="defer">
        </script>
        <script type="text/jscript" src="../../../Resources/vScripts/SyntaxHighlighting.js">
        </script>
        <script type="text/jscript" src="../../../Resources/vScripts/TabSwitch.js">
        </script>
        <script type="text/javascript" src="../../../Resources/vScripts/Vector.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../CANoeCANalyzer.htm#Topics/CANoeCANalyzer/CommunicationConcept/CCDistributedObjects.htm">Open topic with navigation</a>
        </p>
        <div class="Body">
            <div role="main" id="mc-main-content">
                <div>
                    <p class="StructurePath"><a href="../CANoeCANalyzer.htm" class="StructurePath" data-mc-conditions="vConditions.CANalyzerExclude,vConditions.CANoe4ServerExcluded,vConditions.CANoe4SWExcluded,vConditions.TestDataEditorExcluded,vConditions.vTESTstudioExcluded,vConditions.TestUnitRunnerExcluded,vConditions.CANoeNMExcluded"><img src="../../../Resources/vImages/vToolIcons/CANoe_Icon16.png" alt="" />&#160;CANoe</a> » <a href="CC.htm" class="StructurePath MCXref xref xrefStructurePath">Communication Concept</a> » <span class="mc-variable System.Title variable">Distributed Objects</span></p>
                    <h1><span class="mc-variable System.Title variable">Distributed Objects</span>
                    </h1>
                    <p class="MenuPath">&#160;</p>
                    <p class="AutoSearchFilterConcepts"><a name="aanchor8339"></a>
                        <MadCap:concept term="SFCore" />
                    </p>
                    <p class="IndexConcept"><a name="kanchor6855"></a>
                    </p>
                </div>
                <h2 class="SectionMain">General</h2>
                <p>Distributed Objects (DOs) are<MadCap:conditionalText data-mc-conditions="vConditions.CANoe4SWExcluded">, besides <a href="CCObjects.htm">communication objects</a> (COs),</MadCap:conditionalText> a core feature of the communication concept. In <span class="Product">CANoe</span> they stand for various nodes, devices or functions that communicate with each other via interfaces.</p>
                <p>The name <span class="bold">distributed objects</span>, especially the term <span class="bold">object</span>, is derived in the sense of object orientation: <span class="Product">CANoe</span> provides objects for the communication in a distributed system. This is also reflected in the syntax, which is strongly based on the object notation of C++ / C# / Java.</p>
                <p>Analogous to the object-oriented design in software development, the interface of a distributed object defines a group of related members that can be used for communication. Distributed objects can correspond to one or several participants/devices/functions or also only a subset of these. The <span class="bold">members</span> of distributed objects are generally referred to as the <span class="bold">communication endpoints</span> of the distributed object. Note that these are <span class="bold">not</span> identical with the endpoints of the communication objects.</p>
                <p>Various communication parameters can be set for each member of a distributed object, such as the</p>
                <ul>
                    <li>Communication pattern (Shared Memory, Publish/Subscribe or Send/Receive).</li>
                    <li><a href="#BMBindings">Bindings</a> to a network (abstract binding, <a href="../Connectivity/MQTTModelingDOs.htm">MQTT</a> binding…)</li>
                    <li>Behavior (e.g. AutoSubscribe at Publish/Subscribe)</li>
                    <li>…</li>
                </ul>
                <p>According to their <a href="#BMCommunicationDirection">communication direction</a> (from the perspective of the distributed object), members are classified as <span class="bold">provided</span>, <span class="bold">consumed</span> or <span class="bold">internal</span>.</p>
                <h2 class="SectionMain"><a name="BMInterface" id="BMInterface"></a>Interface</h2>
                <p>The members of distributed object instances are described by an interface.</p>
                <p>The following basic types of members are available:</p>
                <ul>
                    <li>Data</li>
                    <li>Event</li>
                    <li>Method</li>
                    <li>Field</li>
                </ul>
                <p>These basic types have a data type such as integer, floating point number, string, structure, union or a function signature.</p>
                <p>Furthermore there are two extended member types:</p>
                <ul>
                    <li>Embedded instance member</li>
                    <li>Embedded reference member</li>
                </ul>
                <p>These have as data type again an interface. These interfaces can contain again basic members and/or extended members, as long as there is no cycle in the dependency graph of the interfaces.</p>
                <p>Instead of defining multiple embedded instance members individually, they can be grouped into (embedded) member containers.</p>
                <h2 class="SectionSub">Data Member</h2>
                <p>A data member is a value that is distributed (usually cyclically) by the provider according to a transmission model.</p>
                <p>The data type of a data member must not be <span class="bold">void</span>.</p>
                <h2 class="SectionSub">Event Member</h2>
                <p>Event members communicate the occurrence of events on an object. By default, the communication pattern of events is Publish/Subscribe. Other objects that are interested in the event are notified.</p>
                <p>The data type of an event member may also be <span class="bold">void</span>. In this case only the occurrence of the event is communicated, but no further data is transmitted.</p>
                <h2 class="SectionSub">Method Member</h2>
                <p>A method member is a function that can be called by another object or that is made available to a communication partner for calling. Many method members correspond to <span class="bold">Remote Procedure Calls</span> (RPCs) and are called asynchronously.</p>
                <h2 class="SectionSub">Field Member</h2>
                <p>A field member represents a value stored in an object. This value can be accessed from other objects. Field members are a combination of an event member and two method members (<span class="SourceCode">set</span>/<span class="SourceCode">get</span>).</p>
                <p>They can register for value changes from the provider and offer method calls to set or read the value of the field at the provider. The event is triggered whenever the value changes.</p>
                <h2 class="SectionSub">Embedded Member</h2>
                <p>Instances of distributed objects as well as references to distributed objects can be included as embedded members.</p>
                <p>An embedded instance represents a subinterface to realize compositions. Larger interfaces can thus be logically subdivided or parts can be reused. It is possible that several embedded members share an interface definition.</p>
                <p>Embedded references can be used to implement aggregations by referencing other distributed objects. For a distributed object to be referenced, it must have the same interface as the reference or an interface derived from it. <a href="#BMDynamicReferences">References</a> are particularly interesting in combination with dynamic object lifetime.</p>
                <h2 class="SectionSub">Member Container</h2>
                <p>Multiple embedded instance members can be combined in member containers (lists or arrays). Nested containers are also possible. Arrays have a fixed size, whereas lists can grow or shrink at the end. For both arrays and lists, individual elements can be "empty".</p>
                <h2 class="SectionSub"><a name="BMCommunicationDirection" id="BMCommunicationDirection"></a>Communication Direction</h2>
                <p>Each member has a communication direction (<span class="Highlight">provided</span>, <span class="Highlight">consumed</span> or <span class="Highlight">internal</span>) that is to be read relative to the distributed object. A provided member is provided by the object, a consumed member is used by the object.</p>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../Resources/vImages/vInfo.png" style="width: 48px;height: 45px;" title="Note" alt="Note" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Note</p>
                                    <p class="Table">When modeling objects in programming languages, interfaces usually only model the provided members and then other objects simply use them without further declaration. For the interfaces of the distributed objects, the consumed members are also modeled, because their counterpart is not necessarily known or available in <span class="Product">CANoe</span>. So the complete interface of the object is modeled, not only the parts that are provided for other objects.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <p>Besides provided and consumed members, there are also internal members. These cannot be <a href="CCBinding.htm">bound</a> and are therefore not transmitted via a network or bus system. They are intended for purely <span class="Product">CANoe</span> internal communication and to facilitate modeling, for example, to track the results of help functions.</p>
                <p>In the analogy to objects in programming languages, internal members most closely correspond to object members whose visibility or access to the object itself, a module or a component has been restricted.</p>
                <p>Provided members correspond to a public member of a programming language object.</p>
                <p>The following table provides an overview of the member types and their use depending on the communication direction:</p>
                <div>
                    <table style="mc-table-style: url('../../../Resources/Stylesheets/vTable.css');margin-left: 0;margin-right: auto;" class="TableStyle_vTable" cellspacing="0">
                        <col />
                        <col />
                        <col />
                        <col />
                        <thead>
                            <tr>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Member Type</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Provided</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColSep">
                                    <p class="TableHead">Consumed</p>
                                </th>
                                <th class="TableStyle_vTable_Head_0_0_RowSep_ColEnd">
                                    <p class="TableHead">Internal</p>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Data</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Is written/sent by the object</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Is read/received by the object</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Is written and read from the object or other objects, but not transmitted over a network</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Event</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Is sent triggered by the object</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">The object is notified of the occurrence</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Is triggered from the object and other objects can be notified</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Field</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p class="Table">Is stored and managed in the object</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColSep">
                                    <p>Is read/written by the object via methods, or object is informed about changes</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowSep_ColEnd">
                                    <p class="Table">Is stored and managed in the object, method calls are made synchronously from the object or other objects</p>
                                </td>
                            </tr>
                            <tr>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table">Method</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table">Is implemented by the object</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColSep">
                                    <p class="Table">Is called by the object (asynchronous)</p>
                                </td>
                                <td class="TableStyle_vTable_Body_0_0_RowEnd_ColEnd">
                                    <p class="Table">Is implemented by the object and called synchronously by the object or other objects</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionSub">Reversal of Interfaces</h2>
                <p>When defining distributed objects, you can specify that an object has the reversed interface. In this case, the consumed members of the interface become provided members in the object and vice versa, internal members remain unchanged. This is particularly useful if you want to model the SUT (<span class="bold">S</span>ystem <span class="bold">U</span>nder <span class="bold">T</span>est) in <span class="Product">CANoe</span>, for example, to test your test programs. If you have described an interface for communicating with the SUT (from the viewpoint of <span class="Product">CANoe</span>), the modeled SUT has exactly the reversed interface.</p>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Example</p>
                                    <p class="Table">A ventilator is to be tested.</p>
                                    <p class="Table"><span class="Product">CANoe</span> sets a mode for the ventilator and regularly sends the current temperature. The ventilator transmits the current speed to <span class="Product">CANoe</span> when it changes.</p>
                                    <p class="Table">From the perspective of <span class="Product">CANoe</span>, the interface looks like this in <a href="../../vCDL/vCDLStartpage.htm">vCDL</a>:</p>
                                    <p class="TableSourceCode">interface IVentilatorAccess<br />{<br />&#160;&#160;consumed void SetMode(int32 mode); // consumed because CANoe calls it<br />&#160;&#160;provided data float Temperature; &#160;&#160;// provided by CANoe for the SUT<br />&#160;&#160;consumed event int32 Speed; &#160;&#160;&#160;&#160;&#160;&#160;&#160;// SUT triggers it, CANoe receives it<br />}<br />object VentilatorAccess : IVentilatorAccess;</p>
                                    <p class="Table">The simulated ventilator provides the <span class="bold">SetMode</span> method, receives the temperature and triggers the <span class="bold">Speed</span> event:</p>
                                    <p class="TableSourceCode">object SimulatedVentilator : reverse&lt;IVentilatorAccess&gt;;</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionSub">Inheritance of Interfaces</h2>
                <div>
                    <p>Each distributed object has exactly one interface as data type and, in particular, the direct aggregation of several interfaces at a distributed object is not permitted. However, interfaces can inherit other interfaces and an interface can inherit from any number of other interfaces, as long as no cyclic dependence develops. It then automatically contains all members of the (transitively) inherited interfaces. An interface aggregation at an object is thereby indirectly realizable by the fact that one defines a new interface, which inherits from all interfaces which can be aggregated. vCDL even supports this technique directly by a convenience syntax; there, several interfaces can be specified at the object and a new, implicitly named aggregating interface is defined.</p>
                    <p>It is also possible to inherit from an reversed interface. In general, however, the following applies: There may be at most one member for each name. Thus, especially parameter overloads or inheriting from an interface and its reversal are not allowed.</p>
                    <div>
                        <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                            <col class="TableStyle-vTableSymbol-Column-Column1" />
                            <col class="TableStyle-vTableSymbol-Column-Column2" />
                            <tbody>
                                <tr>
                                    <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                        <p class="Table">
                                            <img src="../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                        </p>
                                    </td>
                                    <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                        <p class="TableSymbolHead">Example</p>
                                        <p class="Table">The ventilator is to be addressed additionally via a debug interface. For this purpose, the distributed object implements an additional interface called <span class="bold">IVentilatorDebugAccess</span>, which is not discussed further here. In <a href="../../vCDL/vCDLStartpage.htm">vCDL</a> this could be described as follows:</p>
                                        <p class="TableSourceCode">object VentilatorAccess : IVentilatorAccess, IVentilatorDebugAccess;<br /></p>
                                        <p class="Table">The simulated ventilator aggregates both reversed interfaces accordingly:</p>
                                        <p class="TableSourceCode">object ISimulatedVentilator : reverse&lt;IVentilatorAccess&gt; , reverse&lt;IVentilatorDebugAccess&gt;;</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <h2 class="SectionMain"><a name="BMVirtualNetworks" id="BMVirtualNetworks"></a>Virtual Networks</h2>
                <p>To group distributed objects or configure their communication and turn them on and off altogether, you can use virtual networks. A virtual network can correspond to a real network. You can assign interfaces or distributed objects to one or more virtual networks. Basic members of a distributed object always belong to exactly one virtual network.</p>
                <p>Virtual networks are often used to jointly define communication parameters for a group of members. For example, you can define the communication pattern or delay of <a href="CCBinding.htm">abstract binding</a> to a virtual network. This ensures that all distributed objects in this virtual network receive the specified value (but can also overwrite it).</p>
                <p>A member sends and receives data only when it is connected to its virtual network. You can disconnect distributed objects from or connect them to their virtual networks. The <a href="CCDOAttributes.htm" class="bold">AutoConnect</a> attribute allows you to specify whether the distributed object should be connected (TRUE) or remain disconnected (FALSE) to its virtual networks immediately after the measurement starts. The attribute is set to TRUE by default.</p>
                <p>If you do not specify a virtual network for a member, it is assigned to a common default network.</p>
                <h2 class="SectionMain">Attributes</h2>
                <p>To define communication parameters and <a href="CCBinding.htm">binding</a>, so-called attributes are used for distributed objects. In modeling, attribute values can be attached to various elements (e.g. distributed objects, members, interfaces, virtual networks). If no value is defined on an element itself, the value can be inherited from other elements. An attribute can be inherited to an element via different paths, e.g. the binding can be attached to the virtual network and to the interface of a distributed object. To ensure that a unique value can be determined in this case, the attribute values are inherited with the following precedence:</p>
                <ol>
                    <li value="1">Virtual network of the member</li>
                    <li value="2">Distributed object</li>
                    <li value="3">Member in the interface of the distributed object</li>
                    <li value="4">Virtual network of the distributed network</li>
                    <li value="5">Interface of the distributed object</li>
                    <li value="6">Inherited interfaces</li>
                </ol>
                <p>Attributes, which change e.g. the communication pattern and thus that of the interface of the object, can be attached also only to these interface elements. They cannot be appended to distributed objects or their members.</p>
                <p><a href="CCDOPlaceholderInAttributes.htm">Placeholders </a>can be used for attributes of the String type. This way a generic value can be inherited by many members and only a specific part can be set using the placeholder. Examples can be found on the <a href="CCDOPlaceholderInAttributes.htm">placeholder</a> help page and in the <a href="../../SampConf/Connectivity/CANoe/MQTTConnectivityBasic/MQTTConnectivityBasic.htm" class="bold">Basic MQTT Connectivity</a> sample configuration.</p>
                <p>You can find an overview of the predefined attributes on the <a href="CCDOAttributes.htm">Attributes for Distributed Objects</a> page.</p>
                <h2 class="SectionMain"><a name="BMDynamicReferences" id="BMDynamicReferences"></a>Dynamics and References</h2>
                <p>Distributed objects can be created dynamically at runtime. For this purpose, a blueprint can be created for an interface. The blueprints can then be used to configure various properties, such as the virtual network or attribute values. It is also possible to copy the properties of already existing distributed objects of the same type. Any number of <a href="CCDODynamicObjectReferences.htm">dynamic distributed objects</a> can be subtracted from a blueprint.</p>
                <h2 class="SectionMain">References</h2>
                <p>Sometimes it is convenient to have a reference to a (dynamically) distributed object, for example because the reference references different objects over time or because it has a certain semantics itself. For this purpose, there are references for distributed objects. References exist on two levels:</p>
                <ul>
                    <li>Reference object (independent named objects)</li>
                    <li>embedded reference member (as part of a distributed object)</li>
                </ul>
                <p>References, like distributed objects or embedded members, have an interface as data type. This interface must be compatible with the interface of the referenced object, i.e. the interface of the reference must be a generalization in the inheritance hierarchy.</p>
                <p>A reference can reference an object, but does not have to, so the reference can also be "null". If a reference references an object, the object can be queried at the reference. The referenced object can be changed at any time. References are independent entities which mirror the referenced object. After the reference has been changed, the members keep the last valid values and the history of the values of a reference does not change when the reference target is changed.</p>
                <h2 class="SectionMain">Container</h2>
                <p>It is not only possible to create single distributed objects of a certain interface; it is also possible to create containers (lists or arrays) of distributed objects. Nested containers are also possible. Arrays have a fixed size, whereas lists can grow or shrink at the end. For both arrays and lists, individual elements can be "empty".</p>
                <h2 class="SectionMain">Monitoring Objects</h2>
                <p>You can use monitoring objects to observe or measure data traffic. Monitoring objects are distributed objects for which no stimulation is possible. They have the same interface description, but their members (data, events, and fields) are read-only and methods (including field getters and field setters) cannot be called or have implementation handlers.</p>
                <p>In <a href="../../vCDL/vCDLStartpage.htm">vCDL</a>, monitoring objects are identified as such by the <span class="bold">Monitoring</span> attribute.</p>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Example</p>
                                    <p class="TableSourceCode">[<span class="CodeAttributeKey_Namespace">Monitoring</span>]<br />SomeInterface SomeObject;</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <p>If monitoring objects are only created dynamically during the measurement (i.e. no such object is defined statically in the vCDL), then the interface must be marked with the <span class="bold">MonitoringSupport</span> attribute.</p>
                <p>Only distributed objects and interfaces that have no internal members or reference members can be used for monitoring. In addition, the configured binding must support monitoring.</p>
                <h2 class="SectionMain">Data Storage and Call</h2>
                <p>For distributed objects <span class="Product">CANoe</span> provides data memory at the members for interaction with the system.</p>
                <p>Similar to the signal concept in <span class="Product">CANoe</span>, write access to the data memories triggers transmission according to the configured transmission behavior. At the receiving sides, the currently received values are temporarily stored and the corresponding handlers are triggered when new data is received. The method members play a special role here. Here too, data memories hold the current values of the input and output parameters of the function. In the CAPL and C# APIs, a method member is called using the usual convenient call syntax.</p>
                <h2 class="SectionMain"><a name="BMBindings" id="BMBindings"></a><a href="CCBinding.htm" class="red">Bindings</a>
                </h2>
                <p>Similar to <a href="CCBinding.htm">communication objects</a>, the binding that ensures the transmission of data can be selected for distributed objects. Each provided or consumed base member must have exactly one binding configured.</p>
                <p>The binding is selected with the attribute <span class="bold">Binding</span>. This can be done on each individual base member, but usually it is more convenient to set the attribute on the distributed object or on a virtual network. Depending on the binding, further parameters with other attributes can or must be configured, e.g. the topic for the MQTT binding.</p>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../Resources/vImages/vInfo.png" style="width: 48px;height: 45px;" title="Note" alt="Note" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Note</p>
                                    <p class="Table">Note that the use of bindings in vCDL normally requires an import of the corresponding module (the module has typically the same name as the binding itself; e.g., <span class="SourceCode">import module "Abstract";</span>). To create a new vCDL file including this import command, you can use the templates for creating <a href="../Windows/CommunicationSetup/ComSetupDataSources.htm">data sources</a> in the <a href="../Windows/CommunicationSetup/CommunicationSetup.htm" class="MCXref xref">Communication Setup</a>.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <p>The following bindings are available in <span class="Product">CANoe</span>:</p>
                <ul>
                    <li><span class="bold">Abstract binding</span>: Transfers the value between two DO members. The two members must be in the same virtual network and have the same data type. If they also have the same name, they are automatically linked together as communication partners, otherwise or to disable this automatism you can also freely assign an ID for the binding. Further attributes can be used to simulate a transmission delay.<br />The abstract binding is suitable for virtual prototyping, for example, but is also suitable for test-the-tester scenarios.</li>
                    <li><a href="../Connectivity/MQTTProtocol.htm" class="bold">MQTT Binding</a>: Transfers data via the MQTT protocol using the <span class="Product">CANoe</span> <a href="../Connectivity/Connectivity.htm">Connectivity Feature Set</a>.</li>
                    <li><a href="../Connectivity/HTTPProtocol.htm" class="bold">HTTP Binding</a>: Transfers data via the HTTP protocol using the <span class="Product">CANoe</span> <a href="../Connectivity/Connectivity.htm">Connectivity Feature Set</a>.</li>
                    <li><a href="../Connectivity/DDSModelingDOs.htm" class="bold">DDS Binding</a>: Transfers data via the DDS protocol using the <span class="Product">CANoe</span> <a href="../Connectivity/Connectivity.htm">Connectivity Feature Set</a>.</li>
                    <li><a href="../Connectivity/ConnectivityIoTEnable.htm" class="bold">IoT Enabler Binding</a>: Responsible for the communication between <span class="Product">CANoe</span> and the <span class="Product">VH4110</span>.</li>
                    <li data-mc-conditions="vConditions.CANoe4SWExcluded"><a href="../SmartCharging/SmartCharging.htm" class="bold">CCS Binding / CHAdeMO Binding</a>: Smart charging communication between electric vehicle (EV) and charge point (EVSE). Only available with Option&#160;SmartCharging.</li>
                    <li data-mc-conditions="vConditions.CANoe4SWExcluded"><a href="../ADAS/Procedures/ADASProcConfig/ADASCreateConfig.htm" class="bold">ADAS Binding</a>: Used for interaction with ADAS objects according to the ASAM OSI standard (<a href="../ADAS/ADAS.htm">ADAS Feature Set</a>).</li>
                    <li><a href="../DSD/DSD.htm#BMStatic" class="bold">Distributed Debugging Binding</a>: Transfers watch values from <span class="Product">Visual Studio</span> to <span class="Product">CANoe</span> using the <a href="../DSD/DSD.htm">Distributed Software Debugging Feature</a>.</li>
                    <li><a href="../Interfaces/SILKit.htm#BMApplicationDataRPC" class="bold">SIL Kit Binding</a>: Transfers and receives data via TCP/IP and is used in combination with the <a href="../SIL/VirtualExecutionEnvironment/SILTechnicalDetails.htm">SIL Adapter</a> to communicate with the software to be tested.</li>
                    <li data-mc-conditions="vConditions.CANoe4SWExcluded"><a href="../Ribbon/Environment/Mapping/MappingGroups.htm" class="bold">Mapping Binding</a>: Transfers the data by linking it to other symbols. Application examples are system variables of the VT system or XCP parameters.</li>
                    <li><a href="CCDOCAPLBinding.htm" class="bold">CAPL Binding</a>: Uses a CAPL program to send or receive the value. For example, the value could be transmitted via CAN signals, a TCP socket or a serial interface.</li>
                    <li><a href="CCDOCSharpBinding.htm" class="bold">C# Binding</a>: Uses a C# program to send or receive the value. For example, the value could be transmitted via an I/O hardware or to / from a web service.</li>
                    <li data-mc-conditions="vConditions.CANoe4SWExcluded"><a href="../Interfaces/FDXProtocol.htm" class="bold">FDX Binding</a>: Sends or receives the values via the FDX protocol, e.g. for communication with a HIL system.</li>
                </ul>
                <p class="LinkList"><a href="../../vCDL/vCDLStartpage.htm" class="LinkList">vCDL</a>
                </p>
            </div>
        </div>
        <div class="Footer">
            <div class="FooterWhite">
                <table class="FooterWhite" style="border-collapse: collapse;margin-left: auto;margin-right: auto;">
                    <col style="width: 70px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col style="width: 16px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col />
                    <tbody>
                        <tr>
                            <td>
                                <div class="buttons popup-container clearfix topicToolbarProxy topicToolbarProxyFooter _Skins_HTML5TopicToolbar mc-component nocontent">
                                    <div class="button-group-container-left">
                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                            <div>
                                                <div role="img" class="button-icon-wrapper" aria-label="Expand all">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                        <button class="button needs-pie remove-highlight-button" title="Remove Highlights">
                                            <div>
                                                <div role="img" class="button-icon-wrapper">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <p class="vec_BuildInfo"><a href="../../Shared/HowToUseOnlineHelp.htm" title="Tips for using the help" alt="Tips for using the help"><img src="../../../Resources/vImages/vBackstage/vHelpInfo.png" /></a>
                                </p>
                            </td>
                            <td>
                                <p class="vec_BuildInfo" style="text-align: right;"><span class="mc-variable Vector.BuildTime variable">2023-09-26T19:49:32</span>
                                </p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <table style="width: 100%;border-collapse: separate;border-spacing: 3px 0px;margin-left: auto;margin-right: auto;caption-side: top;">
                <col />
                <col />
                <col />
                <col data-mc-conditions="vConditions.HTML5Link" />
                <tbody>
                    <tr>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;">
                            <p class="vec_Footer">©&#160;Vector Informatik GmbH</p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;text-align: right;">
                            <p class="vec_FooterBold">
                                <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded,vConditions.TestDataEditorExcluded">CANoe</MadCap:conditionalText> Version <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded">17 SP3</MadCap:conditionalText></p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="../../Shared/ContactCopyrightLicense.htm" class="vec_Footer MCXref xref xrefvec_Footer">Contact/Copyright/License</a>
                            </p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="https://www.vector.com/int/en/company/get-info/privacy-policy/" target="_blank" class="vec_Footer">Data Privacy Notice</a>
                            </p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>
</html>