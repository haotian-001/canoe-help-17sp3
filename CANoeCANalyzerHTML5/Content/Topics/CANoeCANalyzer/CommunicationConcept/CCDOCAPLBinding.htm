<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="" data-mc-search-type="Stem" data-mc-help-system-file-name="CANoeCANalyzer.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../../Skins/Favicons/browserconfig.xml" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../Skins/Favicons/favicon-16x16.png" /><title>CAPL Binding for Distributed Objects</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Resources/Stylesheets/vTableMasterPageHeader.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../Resources/Stylesheets/vStylesheet.css" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.expand-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.remove-highlight-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.collapse-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.needs-pie
{
	behavior: url('../../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../../Resources/Stylesheets/vTableSymbol.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../Skins/Favicons/favicon-16x16.png" />
        <script src="../../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapGlobal.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapDom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapUtilities.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapXhr.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTextEffects.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSlideshow.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMessageBus.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMessageBus.CrossFrame.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapDefault.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMediaQueries.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAccessibility.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapHelpSystem.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAliasFile.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopicFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapFeedbackHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSkinHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.MiniToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.SideMenu.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapIndex.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapGlossary.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapParser.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSearch.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapNavigateTopics.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapLms.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapELearning.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopic.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapMicroContentComponent.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSearchHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopicElements.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTriPane.js" type="text/javascript" defer="defer">
        </script>
        <script type="text/jscript" src="../../../Resources/vScripts/SyntaxHighlighting.js">
        </script>
        <script type="text/jscript" src="../../../Resources/vScripts/TabSwitch.js">
        </script>
        <script type="text/javascript" src="../../../Resources/vScripts/Vector.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../CANoeCANalyzer.htm#Topics/CANoeCANalyzer/CommunicationConcept/CCDOCAPLBinding.htm">Open topic with navigation</a>
        </p>
        <div class="Body">
            <div role="main" id="mc-main-content">
                <div>
                    <p class="StructurePath"><a href="../CANoeCANalyzer.htm" class="StructurePath" data-mc-conditions="vConditions.CANalyzerExclude,vConditions.CANoe4ServerExcluded,vConditions.CANoe4SWExcluded,vConditions.TestDataEditorExcluded,vConditions.vTESTstudioExcluded,vConditions.TestUnitRunnerExcluded,vConditions.CANoeNMExcluded"><img src="../../../Resources/vImages/vToolIcons/CANoe_Icon16.png" alt="" />&#160;CANoe</a> » <a href="CC.htm" class="StructurePath MCXref xref xrefStructurePath">Communication Concept</a> » <span class="mc-variable System.Title variable">CAPL Binding for Distributed Objects</span></p>
                    <h1><span class="mc-variable System.Title variable">CAPL Binding for Distributed Objects</span>
                    </h1>
                    <p class="MenuPath">&#160;</p>
                    <p class="AutoSearchFilterConcepts"><a name="aanchor11122"></a>
                        <MadCap:concept term="SFCore" />
                    </p>
                    <p class="IndexConcept"><a name="kanchor8936"></a>
                    </p>
                </div>
                <p>A special variant of <a href="CCBinding.htm">binding</a> for <a href="CCDistributedObjects.htm">distributed objects (DO)</a> is to implement the transmission with CAPL itself. Therefore the binding attribute is set to <span class="bold">CAPL</span> and special functions and handlers are used to write the received values into the object or to send the values. The CAPL program is normally configured in the <a href="../Windows/CommunicationSetup/CommunicationSetup.htm">Communication Setup</a><MadCap:conditionalText data-mc-conditions="vConditions.CANoe4SWExcluded">, in special cases in the <a href="../Windows/SimulationSetup/SimulationSetupWindow.htm">Simulation Setup</a></MadCap:conditionalText>.</p>
                <p>The CAPL binding can be used e.g. for prototypical implementations of a protocol, or to implement a special transmission for a few members. For a general protocol implementation it is rather not suitable, because a separate handler is needed for each DO member or interface member.</p>
                <h2 class="SectionMain">Provided Data, Event and Field Member</h2>
                <p>To send the value you implement the handler <a href="../../CAPLFunctions/DistributedObjects/EventProcedures/CAPLfunctionOnTransmitValue.htm" class="SourceCode">on transmit_value &lt;DO Member&gt;</a> or <span class="SourceCode">on transmit_any_value &lt;Interface Member&gt;</span>. This handler is called as soon as the value should be transmitted. The concrete time depends especially on the value of the attribute <a href="CCDOAttributes.htm" class="bold">TxTrigger</a> of the member; the call is, however, in any case decoupled from other handlers. This means, for example, that if the member's value was set in an on timer handler and the <span class="bold">TxTrigger</span> attribute is set to <span class="bold">OnUpdate</span>, the <a href="../../CAPLFunctions/DistributedObjects/EventProcedures/CAPLfunctionOnTransmitValue.htm" class="SourceCode">on transmit_value</a> handler is called in the same simulation step as the <a href="../../CAPLFunctions/Other/EventProcedures/CAPLfunctionOnTimer.htm" class="SourceCode">on timer</a> handler, but only after the <span class="SourceCode">on timer</span> handler has finished.</p>
                <p>The value to be transmitted can be accessed in the handler with $<span class="bold">$this</span>.</p>
                <h2 class="SectionMain">Consumed Data, Event and Field Member</h2>
                <p>If you have received the value (e.g. via a socket or I/O hardware), you can set it into the member using <a href="../../CAPLFunctions/DistributedObjects/Methods/CAPLfunctionBindingValueReceived.htm" class="SourceCode">Binding::ValueReceived</a>. The value then gets the current simulation time as timestamp. The handlers <a href="../../CAPLFunctions/CommunicationObjects/EventProcedures/CAPLfunctionOnValueUpdate.htm" class="SourceCode">on value_update</a> and <a href="../../CAPLFunctions/CommunicationObjects/EventProcedures/CAPLfunctionOnValueChange.htm" class="SourceCode">on value_change</a> are called in the same simulation step but decoupled.</p>
                <h2 class="SectionMain">Consumed Method Member</h2>
                <p>Two steps are necessary to transfer a method call:</p>
                <ol>
                    <li value="1">The <span class="bold">in</span>-parameters are transferred with a handler <a href="../../CAPLFunctions/DistributedObjects/EventProcedures/CAPLfunctionOnTransmitCall.htm" class="SourceCode">on transmit_call &lt;DO Member&gt;</a> or <span class="SourceCode">on transmit_any_call &lt;Interface Member&gt;</span>. This handler is called directly if the method is to be called with <a href="../../CAPLFunctions/DistributedObjects/Methods/CAPLfunctiondistObjMethodRefCallAsync.htm" class="SourceCode">CallAsync</a>. In contrast to <a href="../../CAPLFunctions/DistributedObjects/EventProcedures/CAPLfunctionOnTransmitValue.htm" class="SourceCode">on transmit_value</a>, there is no decoupling here. <span class="bold">This</span> refers to a <a href="../../CAPLFunctions/CommunicationObjects/Objects/CAPLfunctionCallContext.htm" class="SourceCode">CallContext</a> through which the values of the in-parameters can be read.</li>
                    <li value="2">When the response is received, the <a href="../../CAPLFunctions/DistributedObjects/Methods/CAPLfunctionBindingReturnReceived.htm" class="SourceCode">Binding::ReturnReceived</a> function is called. This function expects as parameter besides the member also a <a href="../../CAPLFunctions/CommunicationObjects/Objects/CAPLfunctionCallContext.htm" class="SourceCode">CallContext</a> which can be created with the function <a href="../../CAPLFunctions/DistributedObjects/Methods/CAPLfunctionBindingCreateCallContext.htm" class="SourceCode">Binding::CreateCallContext</a>. Before you call <span class="SourceCode">ReturnReceived</span> you should set the return value and the out parameters in the <span class="SourceCode">CallContext</span>.</li>
                </ol>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Example</p>
                                    <p class="Table">The following object is modeled in <a href="../../vCDL/vCDLStartpage.htm">vCDL</a>:</p>
                                    <p class="TableSourceCode">namespace Example<br />{<br />&#160;&#160;object SomeDO<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;[Binding="CAPL"]<br />&#160;&#160;&#160;&#160;consumed method int32 SomeMethod(in int32 x, inout int32 y, out int32 z);<br />&#160;&#160;}<br />}</p>
                                    <p class="Table">The method call is to be transmitted by means of two CAN messages <span class="bold">SomeMethod_Call</span> and <span class="bold">SomeMethod_Return</span>, each containing corresponding signals for the parameters and the return value. This transmission can now be programmed very easily in CAPL:</p>
                                    <p class="TableSourceCode">on transmit_call Example::SomeDO.SomeMethod<br />{<br />&#160;&#160;message SomeMethod_Call msg;<br /><br />&#160;&#160;msg.x = this.x;<br />&#160;&#160;msg.y = this.y;<br />&#160;&#160;msg.RequestID = this.ReqID;<br />&#160;&#160;output(msg);<br />}<br /><br />on message SomeMethod_Return<br />{<br />&#160;&#160;callContext Example::SomeDO.SomeMethod cco;<br /><br />&#160;&#160;Binding::CreateCallContext(Example::SomeDO.SomeMethod, this.RequestID, cco);<br />&#160;&#160;cco.y = this.y;<br />&#160;&#160;cco.z = this.z;<br />&#160;&#160;cco.Result = this.ReturnValue;<br />&#160;&#160;Binding::ReturnReceived(Example::SomeDO.SomeMethod, cco);<br />}</p>
                                    <p class="Table">Note that this simple implementation assumes that no <span class="bold">SomeMethod_Return</span> message is received unless a method call is sent first.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionMain">Provided Method Member</h2>
                <p>The transmission of provided method members is also done in two steps:</p>
                <ol>
                    <li value="1">The method call is forwarded to the distributed object with <a href="../../CAPLFunctions/DistributedObjects/Methods/CAPLfunctionBindingCallReceived.htm" class="SourceCode">Binding::CallReceived</a>. For this purpose a <a href="../../CAPLFunctions/CommunicationObjects/Objects/CAPLfunctionCallContext.htm" class="SourceCode">CallContext</a> is created with the function <a href="../../CAPLFunctions/DistributedObjects/Methods/CAPLfunctionBindingCreateCallContext.htm" class="SourceCode">Binding::CreateCallContext</a>. Decoupled, i.e. in the same simulation step, but only after the end of the current handler, <a href="../../CAPLFunctions/CommunicationObjects/EventProcedures/CAPLfunctionOnfctCalling.htm" class="SourceCode">on fct_calling</a> or <a href="../../CAPLFunctions/CommunicationObjects/EventProcedures/CAPLfunctionOnfctCalled.htm" class="SourceCode">on fct_Called-Handler</a> are called.</li>
                    <div>
                        <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                            <col class="TableStyle-vTableSymbol-Column-Column1" />
                            <col class="TableStyle-vTableSymbol-Column-Column2" />
                            <tbody>
                                <tr>
                                    <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                        <p class="Table">
                                            <img src="../../../Resources/vImages/vInfo.png" style="width: 48px;height: 45px;" title="Note" alt="Note" />
                                        </p>
                                    </td>
                                    <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                        <p class="TableSymbolHead">Note</p>
                                        <p class="Table">The <a href="../../CAPLFunctions/CommunicationObjects/Objects/CAPLfunctionCallContext.htm" class="SourceCode">CallContext</a> object accessible there as <span class="bold">this</span> is not the same as the one passed to <a href="../../CAPLFunctions/DistributedObjects/Methods/CAPLfunctionBindingCallReceived.htm" class="SourceCode">Binding.CallReceived</a>, but the parameter values are the same.</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <li value="2">The answer is transmitted with a handler <a href="../../CAPLFunctions/DistributedObjects/EventProcedures/CAPLfunctionOnTransmitReturn.htm" class="SourceCode">on transmit_return &lt;DO Member&gt;</a> or <span class="SourceCode">on transmit_any_return &lt;Interface Member&gt;</span>. In this handler <span class="bold">this</span> references a <a href="../../CAPLFunctions/CommunicationObjects/Objects/CAPLfunctionCallContext.htm" class="SourceCode">CallContext</a>, from which you can read the values for out-parameter and return value.</li>
                </ol>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Example</p>
                                    <p class="Table">In analogy for example of consumed method members the opposite side is to be modeled. The corresponding vCDL definition would be:</p>
                                    <p class="TableSourceCode">namespace Example<br />{ <br />&#160;&#160;object SecondDO<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;[Binding="CAPL"]<br />&#160;&#160;&#160;&#160;provided method int32 SomeMethod(in int32 x, inout int32 y, out int32 z);<br />&#160;&#160;}<br />}</p>
                                    <p class="Table">And the implementation of the CAPL binding for the method with two CAN messages could look like this:</p>
                                    <p class="TableSourceCode">on message SomeMethod_Call<br />{<br />&#160;&#160;callContext Example::SecondDO.SomeMethod cco;<br /><br />&#160;&#160;Binding::CreateCallContext(Example::SecondDO.SomeMethod, this.RequestID, cco);<br />&#160;&#160;cco.x = this.x;<br />&#160;&#160;Binding::SetInParameter(cco, "y", (long)this.y); <span class="bold">// (1)</span><br />&#160;&#160;Binding::CallReceived(Example::SecondDO.SomeMethod, cco);<br />}<br /><br />on transmit_return Example::SecondDO.SomeMethod<br />{<br />&#160;&#160;message SomeMethod_Return msg;<br /><br />&#160;&#160;msg.RequestID = this.ReqID;<br />&#160;&#160;msg.y = this.y;<br />&#160;&#160;msg.z = this.z;<br />&#160;&#160;msg.ReturnValue = this.Result;<br />&#160;&#160;output(msg);<br />}</p>
                                    <p class="Table">Note in particular the line marked <span class="bold">(1)</span>: the <span class="bold">in</span>-value of an <span class="bold">inout</span> parameter cannot be set directly with <span class="SourceCode">cco.y = this.y</span> when receiving the method call, because this call would set the <span class="bold">out</span>-value. Instead, the <a href="../../CAPLFunctions/DistributedObjects/Methods/CAPLfunctionBindingSetInParameter.htm" class="SourceCode">Binding::SetInParameter</a> function must be used here.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionMain">Field Getter and Setter</h2>
                <p>Field getters and setters are transferred with the same handlers and functions as method members.</p>
                <h2 class="SectionMain">Subscription for Consumed Data / Event / Field Membern</h2>
                <p>For a member (consumed data, event or field) with <span class="bold">PublishSubscribe</span> communication pattern, you also need a way to transmit a subscription and receive its confirmation. This can be done with the handlers <a href="../../CAPLFunctions/DistributedObjects/EventProcedures/CAPLfunctionOnTransmitSubscribe.htm" class="SourceCode">on transmit_subscribe &lt;DO Member&gt;</a> / <span class="SourceCode">on transmit_any_subscribe &lt;Interface Member&gt;</span> and <a href="../../CAPLFunctions/DistributedObjects/EventProcedures/CAPLfunctionOnTransmitUnsubscribe.htm" class="SourceCode">on transmit_unsubscribe &lt;DO Member&gt;</a> / <span class="SourceCode">on transmit_any_unsubscribe &lt;Interface Member&gt;</span> and the function <a href="../../CAPLFunctions/DistributedObjects/Methods/CAPLfunctionBindingSubscriptionStateReceived.htm" class="SourceCode">Binding::SubscriptionStateReceived</a>.</p>
                <p>The handlers are called each time a change in the subscription is to be transmitted. Please note that this is a logical transfer, which does not necessarily have to correspond 1:1 to a physical transfer:</p>
                <ul>
                    <li>A call to <a href="../../CAPLFunctions/DistributedObjects/Methods/CAPLfunctiondistObjMemberRefSubscribe.htm" class="SourceCode">Subscribe</a> results in a call to <a href="../../CAPLFunctions/DistributedObjects/EventProcedures/CAPLfunctionOnTransmitSubscribe.htm" class="SourceCode">on transmit_subscribe</a> exactly when the <span class="bold">SubscriptionState</span> at the member is <span class="bold">unsubscribed</span> (and the member is connected to its virtual network)</li>
                    <li>A call to <a href="../../CAPLFunctions/DistributedObjects/Methods/CAPLfunctiondistObjMemberRefUnsubscribe.htm" class="SourceCode">Unsubscribe</a> will result in a call to <a href="../../CAPLFunctions/DistributedObjects/EventProcedures/CAPLfunctionOnTransmitUnsubscribe.htm" class="SourceCode">on transmit_unsubscribe</a> if the <span class="bold">SubscriptionState</span> at the member is not already <span class="bold">unsubscribed</span> (and the member is connected to its virtual network).</li>
                    <li>A protocol might require a periodic repetition of a subscription so that it does not expire automatically. In this case a timer would have to be set in CAPL in <span class="SourceCode">on transmit_subscribe</span> and switched off in <span class="SourceCode">on transmit_unsubscribe</span>.</li>
                </ul>
                <p>There is no CAPL API for receiving a <span class="bold">Subscribe</span> or <span class="bold">Unsubscribe</span> from a provided member. Depending on the protocol it is possible that subscriptions have to be managed by a provided member, but this is done completely on protocol level and does not affect the values or states of the provided member.</p>
                <h2 class="SectionMain">Announcement forProvided Data / Event / Field Membern</h2>
                <p>For a member (provided data, event or field) with <span class="bold">PublishSubscribe</span> communication pattern, where the <a href="CCDOAttributes.htm" class="bold">HasAnnounceAPI</a> attribute is set to <span class="bold">true</span>, you also need a way to transmit an announcement and receive its confirmation. This can be done with the handlers <a href="../../CAPLFunctions/DistributedObjects/EventProcedures/CAPLfunctionOnTransmitAnnounce.htm" class="SourceCode">on transmit_announce &lt;DO Member&gt;</a> / <span class="SourceCode">on transmit_any_announce &lt;Interface Member&gt;</span> and <a href="../../CAPLFunctions/DistributedObjects/EventProcedures/CAPLfunctionOnTransmitUnannounce.htm" class="SourceCode">on transmit_unannounce &lt;DO Member&gt;</a> / <span class="SourceCode">on transmit_any_unannounce &lt;Interface Member&gt;</span> and the function <a href="../../CAPLFunctions/DistributedObjects/Methods/CAPLfunctionBindingAnnouncementStateReceived.htm" class="SourceCode">Binding::AnnouncementStateReceived</a>.</p>
                <p>The handlers are called each time a change in the announcement is to be transmitted. Please note that this is a logical transfer, which does not necessarily have to correspond 1:1 to a physical transfer:</p>
                <ul>
                    <li>A call to <a href="../../CAPLFunctions/DistributedObjects/Methods/CAPLfunctiondistObjMemberRefAnnounce.htm" class="SourceCode">Announce</a> results in a call to <a href="../../CAPLFunctions/DistributedObjects/EventProcedures/CAPLfunctionOnTransmitAnnounce.htm" class="SourceCode">on transmit_announce</a> exactly when the <span class="bold">AnnouncementState</span> is <span class="bold">Unannounced</span> at the member (and the member is connected to its virtual network).</li>
                    <li>A call to <a href="../../CAPLFunctions/DistributedObjects/Methods/CAPLfunctiondistObjMemberRefUnannounce.htm" class="SourceCode">Unannounce</a> will result in a call to <a href="../../CAPLFunctions/DistributedObjects/EventProcedures/CAPLfunctionOnTransmitUnannounce.htm" class="SourceCode">on transmit_unannounce</a> exactly when the <span class="bold">AnnouncementState</span> is <span class="bold">Announced</span> at the member (and the member is connected to its virtual network).</li>
                    <li>A protocol might require a periodic repetition of an announcement so that it does not expire automatically. In this case a timer would have to be set in CAPL in <span class="SourceCode">on transmit_announce</span> and switched off in <span class="SourceCode">on transmit_unannounce</span>.</li>
                </ul>
                <p>There is no CAPL API for receiving an <span class="bold">Announce</span> or <span class="bold">Unannounce</span> to a consumed member. Depending on the protocol it is possible that announcements to a consumed member have to be received and processed, but this is done completely on protocol level and does not affect the values or states of the consumed member.</p>
                <h2 class="SectionMain">Using Handlers for Interface Members</h2>
                <p>With the handlers <span class="SourceCode">on transmit_any_...</span> you can use the respective handlers for interface members instead of members of a concrete distributed object. This is especially useful if you have several distributes objects with the same interface and the members of all distributes objects are to be transmitted in the same way with the CAPL binding. The handler is then called for each corresponding DO member with CAPL binding. The distributed object can be accessed in the handler with <span class="SourceCode">this.object</span>, while the value or calling context can be accessed with <span class="SourceCode">this.value</span> or <span class="SourceCode">this.context</span>, respectively. However, with a specific handler for a concrete DO member, you could still override the behavior.</p>
                <p>When using handlers for interface members, it is helpful in most cases to define and use additional <a href="CCDOAttributes.htm">attributes</a> that customize the behavior for a concrete member. For example, one could define the ID of the CAN message by attribute. Attribute values can be read out via the <a href="../../CAPLFunctions/DistributedObjects/CAPLfunctionsDOOverview.htm">GetAttribute functions</a>.</p>
                <p class="LinkList">
                    <MadCap:conditionalText data-mc-conditions="vConditions.CANoe4SWExcluded"><a href="../../ModelEditor/ModelEditorBindings.htm" class="LinkList">Model Editor: Bindings</a>&#160;&#160;•&#160;&#160;</MadCap:conditionalText><a href="../../vCDL/vCDLStartpage.htm" class="LinkList">vCDL</a>
                </p>
            </div>
        </div>
        <div class="Footer">
            <div class="FooterWhite">
                <table class="FooterWhite" style="border-collapse: collapse;margin-left: auto;margin-right: auto;">
                    <col style="width: 70px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col style="width: 16px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col />
                    <tbody>
                        <tr>
                            <td>
                                <div class="buttons popup-container clearfix topicToolbarProxy topicToolbarProxyFooter _Skins_HTML5TopicToolbar mc-component nocontent">
                                    <div class="button-group-container-left">
                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                            <div>
                                                <div role="img" class="button-icon-wrapper" aria-label="Expand all">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                        <button class="button needs-pie remove-highlight-button" title="Remove Highlights">
                                            <div>
                                                <div role="img" class="button-icon-wrapper">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <p class="vec_BuildInfo"><a href="../../Shared/HowToUseOnlineHelp.htm" title="Tips for using the help" alt="Tips for using the help"><img src="../../../Resources/vImages/vBackstage/vHelpInfo.png" /></a>
                                </p>
                            </td>
                            <td>
                                <p class="vec_BuildInfo" style="text-align: right;"><span class="mc-variable Vector.BuildTime variable">2023-09-26T19:49:32</span>
                                </p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <table style="width: 100%;border-collapse: separate;border-spacing: 3px 0px;margin-left: auto;margin-right: auto;caption-side: top;">
                <col />
                <col />
                <col />
                <col data-mc-conditions="vConditions.HTML5Link" />
                <tbody>
                    <tr>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;">
                            <p class="vec_Footer">©&#160;Vector Informatik GmbH</p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;text-align: right;">
                            <p class="vec_FooterBold">
                                <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded,vConditions.TestDataEditorExcluded">CANoe</MadCap:conditionalText> Version <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded">17 SP3</MadCap:conditionalText></p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="../../Shared/ContactCopyrightLicense.htm" class="vec_Footer MCXref xref xrefvec_Footer">Contact/Copyright/License</a>
                            </p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="https://www.vector.com/int/en/company/get-info/privacy-policy/" target="_blank" class="vec_Footer">Data Privacy Notice</a>
                            </p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>
</html>