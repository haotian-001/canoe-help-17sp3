<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="" data-mc-search-type="Stem" data-mc-help-system-file-name="CANoeCANalyzer.xml" data-mc-path-to-help-system="../../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../../../Skins/Favicons/browserconfig.xml" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../../Skins/Favicons/favicon-16x16.png" /><title>Function Calls</title>
        <link href="../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Resources/Stylesheets/vTableMasterPageHeader.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../../Resources/Stylesheets/vStylesheet.css" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.expand-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.remove-highlight-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.collapse-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.needs-pie
{
	behavior: url('../../../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../../../Resources/Stylesheets/vTableMiniTOC.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../../Skins/Favicons/favicon-16x16.png" />
        <script src="../../../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapGlobal.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapDom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapUtilities.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapXhr.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTextEffects.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSlideshow.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMessageBus.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMessageBus.CrossFrame.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapDefault.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMediaQueries.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAccessibility.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapHelpSystem.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAliasFile.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTopicFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapFeedbackHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSkinHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.MiniToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.SideMenu.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapIndex.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapGlossary.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapParser.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSearch.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapNavigateTopics.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapLms.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapELearning.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTopic.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMicroContentComponent.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSearchHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTopicElements.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTriPane.js" type="text/javascript" defer="defer">
        </script>
        <script type="text/jscript" src="../../../../Resources/vScripts/SyntaxHighlighting.js">
        </script>
        <script type="text/jscript" src="../../../../Resources/vScripts/TabSwitch.js">
        </script>
        <script type="text/javascript" src="../../../../Resources/vScripts/Vector.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../../CANoeCANalyzer.htm#Topics/CANoeCANalyzer/CommunicationConcept/Programming/CCPFunctions.htm">Open topic with navigation</a>
        </p>
        <div class="Body">
            <div role="main" id="mc-main-content">
                <div>
                    <p class="StructurePath"><a href="../../CANoeCANalyzer.htm" class="StructurePath" data-mc-conditions="vConditions.CANalyzerExclude,vConditions.CANoe4ServerExcluded,vConditions.CANoe4SWExcluded,vConditions.TestDataEditorExcluded,vConditions.vTESTstudioExcluded,vConditions.TestUnitRunnerExcluded,vConditions.CANoeNMExcluded"><img src="../../../../Resources/vImages/vToolIcons/CANoe_Icon16.png" alt="" />&#160;CANoe</a> » <a href="../CC.htm" class="StructurePath MCXref xref xrefStructurePath">Communication Concept</a> » <a href="CCP.htm" class="StructurePath">Programming</a> » <span class="mc-variable System.Title variable">Function Calls</span></p>
                    <h1><span class="mc-variable System.Title variable">Function Calls</span>
                    </h1>
                    <p class="MenuPath">&#160;</p>
                    <p class="AutoSearchFilterConcepts"><a name="aanchor6675"></a>
                        <MadCap:concept term="SFCore" />
                    </p>
                    <p class="IndexConcept"><a name="kanchor5050"></a>
                    </p>
                </div>
                <div>
                    <p><a name="Shortcuts" id="Shortcuts"></a><a targets="TOGContents" href="javascript:void(0)" class="MCToggler MCTogglerHead MCTogglerHotSpot MCToggler_Open toggler MCTogglerHotSpot_ MCHotSpotImage" data-mc-targets="TOGContents"><img class="MCToggler_Image_Icon" src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Table of Contents</a>
                    </p>
                    <div style="display: none;" data-mc-target-name="TOGContents">
                        <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableMiniTOC.css');" class="TableStyle-vTableMiniTOC" cellspacing="2">
                            <col class="TableStyle-vTableMiniTOC-Column-Column1" />
                            <tbody>
                                <tr class="TableStyle-vTableMiniTOC-Body-Body1">
                                    <td style="background-color: #f0f5f5;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;" class="TableStyle-vTableMiniTOC-BodyD-Column1-Body1">
                                        <p class="TableTextSmall"><a href="#Consumer" class="Tab">Consumer Side</a>
                                        </p>
                                    </td>
                                </tr>
                                <tr class="TableStyle-vTableMiniTOC-Body-Body1">
                                    <td style="background-color: #f0f5f5;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;" class="TableStyle-vTableMiniTOC-BodyD-Column1-Body1">
                                        <p class="TableTextSmall"><a href="#Provider" class="Tab">Provider Side</a>
                                        </p>
                                    </td>
                                </tr>
                                <tr class="TableStyle-vTableMiniTOC-Body-Body1">
                                    <td style="background-color: #f0f5f5;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;" class="TableStyle-vTableMiniTOC-BodyA-Column1-Body1">
                                        <p class="TableTextSmall"><a href="#InternalDOMethod" class="Tab">Internal DO Methods</a>
                                        </p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <h2 class="SectionMain"><a name="Consumer" id="Consumer"></a>Consumer Side <a href="#Shortcuts" class="TopOfPageWhite">[▲ back]</a></h2>
                <h2 class="SectionSub"><a name="AsyncCall" id="AsyncCall"></a>Asynchronous Call</h2>
                <p>On the consumer, a function (in other words, a service method) is called with <span class="SourceCode">CallAsync(…)</span>. These calls are asynchronous, as the call returns before communication with the provider (and possibly return communication) has taken place. The <span class="SourceCode">CallAsync</span> parameters are exactly the same as <span class="bold">in</span>- and <span class="bold">inout</span>-parameters of the function in the order specified when defining the function; in the case of <span class="bold">inout</span>-parameters, however, only the <span class="bold">in</span> value is relevant here.</p>
                <p><span class="SourceCode">CallAsync</span> returns the so-called CallContext object (CCO). It can be used, for example to wait for an answer of the provider and then read the output parameters. In C#, you should call Dispose on it if it is no longer needed.</p>
                <p>If no response is received after a certain time, the resources of the CCO are released and the response can then no longer be reacted to in the program. This time is normally ten seconds. You can change the value in the section <span class="SourceCode">[FunctionBus]</span> with the key <span class="SourceCode">MethodCallTimeout</span> in the <a href="javascript:startDemoLoader('PROGRAM:CAN.ini')" class="ExecuteLink">CAN.ini</a>. For <a href="../CCDistributedObjects.htm">distributed objects</a> you can also set the value with the <a href="../CCDOAttributes.htm">attribute</a> <span class="bold">MethodCallTimeout</span>.</p>
                <h2 class="SectionSub">Reaction to Answers</h2>
                <p>You can react to the answer of the provider with a handler or with a wait function. In C#, the handler is specified with the attribute <span class="bold">[OnReturned(…)]</span>, in CAPL, it is specified with the keywords <a href="../../../CAPLFunctions/CommunicationObjects/EventProcedures/CAPLfunctionOnfctReturned.htm">on fct_Returned</a>.</p>
                <div>
                    <table style="margin-left: 0;margin-right: auto;">
                        <col />
                        <col />
                        <tbody>
                            <tr data-mc-conditions="vConditions.CANoe4SWExcluded">
                                <td>
                                    <p class="TableBold">C# (CO)</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">[OnReturned(typeof(TrafficControllers.Car1.Bridge1.GetInfo))]<br />public void GetInfoReturned(TrafficControllers.Car1.Bridge1.GetInfo.TransientCallContext ret)<br />{<br />&#160;&#160;Output.WriteLine("Return value: " + ret.Result);<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">C# (DO)</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode"> [OnReturned(Mirrors.Controller.MemberIDs.AdjustLeft)]<br />public void<br />OnReturnedAdjustLeft(Mirrors.Mirror_Types.Adjust.TransientCallContext ret)
<br />{
<br />&#160;&#160;Output.WriteLine("Return value: " + ret.Result);
<br />}</p>
                                </td>
                            </tr>
                            <tr data-mc-conditions="vConditions.CANoe4SWExcluded">
                                <td>
                                    <p class="TableBold">CAPL (CO)</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">on fct_Returned TrafficControllers[Car1,Bridge1].GetInfo<br />{<br />&#160;&#160;Write("Return value: %d", this.Result);<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">CAPL (DO)</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">on fct_Returned Mirrors::Controller.AdjustLeft<br />{<br />&#160;&#160;Write("Return value: %d", this.Result);
<br />}</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <p>In C#, the wait function is called <span class="SourceCode">Execution.WaitForAnswer</span>, in CAPL, it is called <a href="../../../CAPLFunctions/Test/Functions/CAPLfunctionTestWaitForAnswer.htm" class="MCXref xref">TestWaitForAnswer</a>. The CCO received during function call is transferred to it.</p>
                <div>
                    <table style="margin-left: 0;margin-right: auto;">
                        <col />
                        <col />
                        <tbody>
                            <tr>
                                <td>
                                    <p class="TableBold">C#</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">using (var cco1 = MirrorAdjustment.Adjust.CallAsync(-50, 0))<br />using (var ret = Execution.WaitForAnswer(cco1, 200))<br />{<br />&#160;&#160;if (ret.WaitResult &gt; 0) Output.WriteLine("Result: " +cco1.Result);<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">CAPL</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">callContext MirrorAdjustment.Adjust cco1; int ret;<br />cco1 = MirrorAdjustment[CANoe,LeftMirror].Adjust.CallAsync(-50, 0);<br />ret = TestWaitForAnswer(cco1, 200);<br />if (ret &gt; 0) write("Result: %d", cco1.Result);</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <p>Alternatively you can pass a <a href="../../../Shared/CAPL/General/Delegates.htm">delegate</a> as the last parameter which is called when the answer is received. For Python this is currently the only supported variant.</p>
                <div>
                    <table style="margin-left: 0;margin-right: auto;">
                        <col />
                        <col />
                        <tbody>
                            <tr>
                                <td>
                                    <p class="TableBold">C#</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">MirrorAdjustment.Adjust.CallAsync(-50, 0, (result) =&gt;<br />{<br />&#160;&#160;Output.WriteLine("Result: " +result);<br />});</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">CAPL</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">MirrorAdjustment.Adjust.CallAsync(-50, 0,<br />&#160;&#160;delegate (callContext MirrorAdjustment.Adjust cco1)<br />&#160;&#160;{<br />&#160;&#160;write(“Result: %d”, cco1.Result);<br />&#160;&#160;});</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">Python</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">MirrorAdjustment.Adjust.call_async(-50, 0, lambda result: vector.canoe.write(f"Result: {result}”))</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionSub">Encodings for Parameters</h2>
                <p>If there are linear or textual encodings for (part of the) parameters of a function, then you can also use <span class="SourceCode">CallAsync_Phys</span> instead of <span class="SourceCode">CallAsync</span>. There is no <span class="SourceCode">CallAsync_Raw</span>.</p>
                <p>In the CCO, you can read in this case the values of the out-parameters or the return values also in C# with the suffixes <span class="bold">_Phys</span>, <span class="bold">_Raw</span> or <span class="bold">_Symb</span>; in CAPL, use <span class="bold">.phys</span> / <span class="bold">.raw</span> / <span class="bold">.impl</span> as usual; in Python <span class="bold">.phys_value</span>, <span class="bold">.raw_value</span> and <span class="bold">.symb_value</span>.</p>
                <h2 class="SectionSub">Last Function Call</h2>
                <p>You can use <span class="SourceCode">.LatestCall</span> or <span class="SourceCode">.LatestReturn</span> to access the values of the parameters of the recent function call or the recent answer. All options described on the <a href="CCPValues.htm" class="Bold MCXref xref xrefBold">Value Access in Communication Concept</a> page are available for you.</p>
                <div>
                    <table style="margin-left: 0;margin-right: auto;">
                        <col />
                        <col />
                        <tbody>
                            <tr>
                                <td>
                                    <p class="TableBold">C#</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">xDiff = MirrorAdjustment.Adjust.LatestCall.deltaX.ImplValue;</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">CAPL</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">xDiff = $MirrorAdjustment.consumerSide[CANoe,LeftMirror].Adjust.LatestCall.deltaX.impl;</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">Python</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">xDiff = MirrorAdjustment.Adjust.LatestCall.deltaX.copy()</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionMain"><a name="Provider" id="Provider"></a>Provider Side <a href="#Shortcuts" class="TopOfPageWhite">[▲ back]</a></h2>
                <h2 class="SectionSub">Call Answering Machine</h2>
                <p>To simulate a provider, it is not necessary to explicitly program all functions. <span class="Product">CANoe</span> provides a call answering machine which sends certain values as an answer some time after a function call is received. The call answering machine can be configured via values on the communication object:</p>
                <ul>
                    <li><span class="bold">AutoAnswerMode</span> is used to specify the work mode. Possible values are:</li>
                    <li class="Indent"><span class="bold">Suspended(C#)/OffOrManual(CAPL)</span>: No answers are sent automatically, handlers, however, are active.</li>
                    <li class="Indent"><span class="bold">Discard</span>: Calls are discarded and no handlers are called.</li>
                    <li class="Indent"><span class="bold">Auto</span>: Answers are sent according to the further configuration.</li>
                    <li class="Indent"><span class="bold">AutoField</span>: Field getter and setter methods are treated specifically, see also the <a href="CCPCOs.htm">description of the CO types</a>.</li>
                    <li><span class="bold">AutoAnswerTimeNS</span> is used to specify the time interval (in nanoseconds) between the call and sending an answer.</li>
                    <li>You can use <span class="bold">ParamDefaults</span> and <span class="bold">DefaultResult</span> to set the answer values for out-parameters or the return value.</li>
                </ul>
                <div>
                    <table style="margin-left: 0;margin-right: auto;">
                        <col />
                        <col />
                        <tbody>
                            <tr>
                                <td>
                                    <p class="TableBold">C#</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode"><span class="CodeComment">// set mode to "Auto" to return its own values</span>
                                        <br />MirrorAdjustment.CurrentPosition.Set.AutoAnswerMode = AnswerMode.Auto;<br /><span class="CodeComment">// always return 0 for x</span><br />MirrorAdjustment.CurrentPosition.Set.DefaultResult.x.PhysValue = 0;</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">CAPL</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode"><span class="CodeComment">// set mode to "Auto" to return its own values</span>
                                        <br />$MirrorAdjustment.providerSide[all,LeftMirror].CurrentPosition.Set.AutoAnswerMode = _SystemDataTypes::VSIM::Auto;<br /><span class="CodeComment">// always return 0 for x</span><br />$MirrorAdjustment.providerSide[all,LeftMirror].CurrentPosition.Set.DefaultResult.x.phys = 0;</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionSub">Handlers</h2>
                <p>Handlers allow you to intervene in the procedure of the call answering machine at different times, sending back different answers, depending in particular on the concrete in-parameters of the function call. In practice, there are the times <span class="bold">Calling</span>, <span class="bold">Called</span> and <span class="bold">Returning</span>. In C#, the handlers are specified with the attributes <span class="bold">[OnCalling(…)]</span>, etc., in CAPL, they are introduced with the keywords <a href="../../../CAPLFunctions/CommunicationObjects/EventProcedures/CAPLfunctionOnfctCalling.htm" class="MCXref xref">on fct_calling</a>, etc. The following figure illustrates the procedure:</p>
                <p>
                    <img src="../../../../Resources/Images/CANoeCANalyzer/ComSetup/CCPFunctions_636x474.png" style="width: 636;height: 474;" />
                </p>
                <ol>
                    <li value="1">The function call is received by <a href="../CCBinding.htm">Binding</a> and the <span class="bold">LatestCall</span> value on the provider side is updated with the in-parameters.</li>
                    <li value="2">A CallContext object (CCO) is generated; the in-parameters are set according to the <span class="bold">LatestCall</span> value.</li>
                    <li value="3">The Calling handler is called. The call answering machine can be reconfigured here.</li>
                    <li value="4">The call answering machine assigns, if necessary, the configured values to the out-parameters and return value, and sets the time until return (<span class="bold">TimeToAnswer</span>) to the configured value.</li>
                    <li value="5">The CallContext object is saved with a timer until the configured time has elapsed.</li>
                    <li value="6">The Called handler is called. Values set by the call answering machine in the CCO can be changed here, including the time until the answer. If you reconfigure the call answering machine itself, this will not change anything for this call; the changes will only affect the next call.<br />The Called handler is usually used to simulate a provider.</li>
                    <li value="7">The time until the answer set in the CallContext object elapses, the CCO is not delayed any longer.</li>
                    <li value="8">The Returning handler is called. Here you can also change the out and return values in the CCO. <span class="bold">TimeToAnswer</span> can no longer be changed now.</li>
                    <li value="9">The LatestReturn value is updated and set to the CCOs values.</li>
                    <li value="10">The <a href="../CCBinding.htm">Binding</a> transmits the answer to the consumer</li>
                </ol>
                <p>If you want to simulate a provider independently of the consumers, you must configure the handlers such that they can be used for all incoming method calls, no matter from which consumer they come. To achieve this, use <span class="bold">all</span> instead of a concrete consumer in the programming languages.</p>
                <p>In all handlers, you have access to the corresponding CallContext object. In C#, via a parameter, in CAPL, via <span class="bold">this</span>.</p>
                <div>
                    <table style="margin-left: 0;margin-right: auto;">
                        <col />
                        <col />
                        <tbody>
                            <tr data-mc-conditions="vConditions.CANoe4SWExcluded">
                                <td>
                                    <p class="TableBold">C# (CO)</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">[OnCalled(typeof(MirrorAdjustment.providerSide.all.LeftMirror.Adjust))]<br />public void AdjustCalled(MirrorAdjustment.providerSide.all.LeftMirror.Adjust.TransientCallContext cco)<br />{<br />&#160;&#160;cco.SetTimeToAnswer(CalcAnswerTime(cco.deltaX, cco.deltaY));<br />&#160;&#160;cco.Result_Symb = Mirrors.AdjustResult.OK;<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">C# (DO)</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">[OnCalled(Mirrors.LeftMirror.MemberIDs.Adjust)]<br />public void OnCalledAdjust(Mirrors.Mirror_Types.Adjust.TransientCallContext ret)<br />{<br />&#160;&#160;ret.SetTimeToAnswer(CalcAnswerTime(ret.deltaX, ret.deltaY));<br />&#160;&#160;ret.Result_Symb = AdjustResult.OK;<br />}</p>
                                </td>
                            </tr>
                            <tr data-mc-conditions="vConditions.CANoe4SWExcluded">
                                <td>
                                    <p class="TableBold">CAPL (CO)</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">on fct_Called MirrorAdjustment[all, LeftMirror].Adjust<br />{<br />&#160;&#160;this.SetTimeToAnswer(CalcAnswerTime(this.deltaX, this.deltaY));<br />&#160;&#160;this.Result = OK;<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">CAPL (DO)</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">on fct_Called Mirrors:: LeftMirror.Adjust<br />{<br />&#160;&#160;this.SetTimeToAnswer(CalcAnswerTime(this.deltaX, this.deltaY));<br />&#160;&#160;this.Result = OK;<br />}</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <p>If you want to answer immediately (i.e. with TimeToAnswer = 0), then you can also call <span class="SourceCode">Return</span> (C#) or <span class="SourceCode">ReturnCall</span> (CAPL) on the CCO; the return value will be transferred to this method.</p>
                <p>If you want to indefinitely delay the answer and send it only upon a different event, you must temporarily save the CallContext object yourself. Especially in C# it is more complex, since the objects use resources and, thus, must be released. The following example shows the basic procedure. However, please note that it functions in the simple form with one variable only if no further call is received during the delay of the answer.</p>
                <div>
                    <table style="margin-left: 0;margin-right: auto;">
                        <col />
                        <col />
                        <tbody>
                            <tr data-mc-conditions="vConditions.CANoe4SWExcluded">
                                <td>
                                    <p class="TableBold">C# (CO)</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">private MirrorAdjustment.providerSide.all.LeftMirror.Adjust.CallContext<br />&#160;&#160;&#160;mDeferredAnswer;<br /><br />[OnCalling(typeof(MirrorAdjustment.providerSide.all.LeftMirror.Adjust))]<br />public void AdjustCalling(MirrorAdjustment.providerSide.all.LeftMirror.Adjust.TransientCallContext cco)<br />{<br />&#160;&#160;cco.DeferAnswer();<br />&#160;&#160;mDeferredAnswer = cco.MakePermanent();<br />}<br /><br />[OnChange(typeof(Panels.ReturnAnswer))]<br />public void ReturnAnswerButtonPressed()<br />{<br />&#160;&#160;mDeferredAnswer.Return_Symb(Mirrors.AdjustResult.OK);<br />&#160;&#160;mDeferredAnswer.Dispose();<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">C# (DO)</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">Mirrors.Mirror_Types.Adjust.CallContext deferredAnswer;<br /><br />[OnCalling(Mirrors.LeftMirror.MemberIDs.Adjust)]<br />public void adjustcalling(Mirrors.Mirror_Types.Adjust.TransientCallContext ret)<br />{<br />&#160;&#160;ret.DeferAnswer();<br />&#160;&#160;deferredAnswer = ret.MakePermanent();<br />}<br /><br />[OnChange(typeof(Panels.ReturnAnswer))]<br />public void ReturnAnswerButtonPressed()<br />{<br />&#160;&#160;deferredAnswer.Return_Symb(AdjustResult.OK);<br />&#160;&#160;deferredAnswer.Dispose();<br />}</p>
                                </td>
                            </tr>
                            <tr data-mc-conditions="vConditions.CANoe4SWExcluded">
                                <td>
                                    <p class="TableBold">CAPL (CO)</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">variables<br />{<br />&#160;&#160;callContext MirrorAdjustment.Adjust deferredAnswer;<br />}<br /><br />on fct_Calling MirrorAdjustment[all, LeftMirror].Adjust<br />{<br />&#160;&#160;this.DeferAnswer();<br />&#160;&#160;deferredAnswer = this;<br />}<br /><br />on sysvar Panels::ReturnAnswer<br />{<br />&#160;&#160;deferredAnswer.ReturnCall(Mirrors::AdjustResult::OK);<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">CAPL (DO)</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">variables<br />{<br />&#160;&#160;callContext Mirrors:: LeftMirror.Adjust deferredAnswer;<br />}<br /><br />on fct_Calling Mirrors:: LeftMirror.Adjust<br />{<br />&#160;&#160;this.DeferAnswer();<br />&#160;&#160;deferredAnswer = this;<br />}<br /><br />on sysvar Panels::ReturnAnswer<br />{<br />&#160;&#160;deferredAnswer.ReturnCall(Mirrors::AdjustResult::OK);<br />}</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <p>In C#, there is also a special call handler (attribute <span class="bold">[OnCall]</span>) which is usually used instead of other handlers. You can assign <span class="bold">[WaitingHandler]</span> to this handler; then it is allowed to execute wait functions in it. Its signature corresponds directly to the simulated function. Once the handler has been exited, the answer to the function call is sent immediately. This allows you to program the handler in the same way you would program a real server. In the above procedure, the Call handler is called at the same time as a Called handler.</p>
                <div>
                    <table style="margin-left: 0;margin-right: auto;">
                        <col />
                        <col />
                        <tbody>
                            <tr data-mc-conditions="vConditions.CANoe4SWExcluded">
                                <td>
                                    <p class="TableBold">C# (CO)</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">[WaitingHandler]<br />[OnCall(typeof(MirrorAdjustment.providerSide.all.LeftMirror.Adjust))]<br />public Mirrors.AdjustResult Adjust(Int32 deltaX, Int32 deltaY)<br />{<br />&#160;&#160;Execution.Wait(CalcAnswerTime(deltaX, deltaY));<br />&#160;&#160;return Mirrors.AdjustResult.OK;<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">C# (DO)</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">[WaitingHandler]<br />[OnCall(Mirrors.LeftMirror.MemberIDs.Adjust)]<br />public uint WaitingOnCall(int deltaX, int deltaY)<br />{<br />&#160;&#160;Execution.Wait(CalcAnswerTime(deltaX, deltaY));<br />&#160;&#160;return 0;<br />}</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <p>In C#, you can also derive a service interface of a .NET class. All methods of the derived class represent then an OnCall handler if you register an instance at the provider as an implementation. This is recommended if you want to implement all methods of the service yourself. This will usually allow you to switch off the call answering machine with AutoAnswerMode = Suspended. This feature is not available for distributed Objects.</p>
                <div>
                    <table style="margin-left: 0;margin-right: auto;">
                        <col />
                        <col />
                        <tbody>
                            <tr>
                                <td>
                                    <p class="TableBold">C#</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">class MirrorControl : Mirrors.IMirrorAdjustment_ProviderInterface<br />{<br />&#160;&#160;public override AdjustResult Adjust(Int32 deltaX, Int32 deltaY)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;Execution.Wait(CalcAnswerTime(deltaX, deltaY));<br />&#160;&#160;&#160;&#160;return Mirrors.AdjustResult.OK;<br />&#160;&#160;}<br />}<br /><br />public override void Start()<br />{<br />&#160;&#160;MirrorAdjustment.providerSide.all.LeftMirror.SetProviderImplementation(new MirrorControl());<br />&#160;&#160;MirrorAdjustment.providerSide.all.LeftMirror.Adjust.AutoAnswerMode = AnswerMode.Suspended;<br />}</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <p>In Python there is currently only one call handler, which is registered via the <span class="SourceCode">register_on_call_handler</span> method and unregistered via <span class="SourceCode">unregister_on_call_handler</span>.</p>
                <div>
                    <table style="margin-left: 0;margin-right: auto;">
                        <col />
                        <col />
                        <tbody>
                            <tr>
                                <td>
                                    <p class="TableBold">Python</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">&#160;&#160;def start(self):<br /><br />Mirrors.LeftMirror.Adjust.register_on_call_handler(self.Adjust)<br /><br />def Adjust(self, deltaX, deltaY):<br />&#160;&#160;return Mirrors.AdjustResult.OK</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionSub">Wait Functions</h2>
                <p>Particularly for test programs, you can wait for the next call of a function on the provider side. This can be done in C# with <span class="SourceCode">.WaitForNextCall()</span> and in CAPL with <a href="../../../CAPLFunctions/Test/Functions/CAPLfunctionTestWaitForNextCall.htm" class="MCXref xref">TestWaitForNextCall</a>. You obtain the current CallContext object with the <span class="bold">Call</span> property in the result of the wait call (C#) or with the <span class="bold">CurrentCCO</span> property using the method (CAPL). The CallContext object internally uses resources and, therefore, must be explicitly released in C#; you can do this most easily with a <span class="bold">using</span> statement.</p>
                <div>
                    <table style="margin-left: 0;margin-right: auto;">
                        <col />
                        <col />
                        <tbody>
                            <tr>
                                <td>
                                    <p class="TableBold">C#</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">using (var call = MirrorAdjustment.Adjust.WaitForNextCall(500))<br />{<br />&#160;&#160;if (call.WaitResult &gt; 0) xDiff = call.Call.deltaX;<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">CAPL</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">int ret; int deltaX;<br />providedMethodRef MirrorAdjustment.Adjust method;<br /><br />method = MirrorAdjustment.providerSide[all,LeftMirror].Adjust;<br />ret = TestWaitForNextCall(method, 500);<br />if (ret &gt; 0)<br />{<br />&#160;&#160;deltaX = method.CurrentCCO.deltaX;<br />}</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionSub">Last Function Call</h2>
                <p>You can use <span class="SourceCode">.LatestCall</span> or <span class="SourceCode">.LatestReturn</span> to access the values of the parameters of the recent function call or the recent answer. All options described on the <a href="CCPValues.htm" class="Bold MCXref xref xrefBold">Value Access in Communication Concept</a> page are available for you.</p>
                <div>
                    <table style="margin-left: 0;margin-right: auto;">
                        <col />
                        <col />
                        <tbody>
                            <tr>
                                <td>
                                    <p class="TableBold">C#</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">deltaX = MirrorAdjustment.Adjust.LatestCall.deltaX.ImplValue;</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">CAPL</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">deltaX = $MirrorAdjustment.providerSide[all,LeftMirror].Adjust.LatestCall.deltaX.impl;</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">Python</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">deltaX = Mirros.LeftMirror.Adjust.LatestCall.deltaX.copy()</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionMain"><a name="InternalDOMethod" id="InternalDOMethod"></a>Internal Distributed Object (DO) Methods <a href="#Shortcuts" class="TopOfPageWhite">[▲ back]</a></h2>
                <h2 class="SectionSub">Synchronous Call</h2>
                <p>Internal DO methods can also be called synchronously in C# and CAPL by using <span class="SourceCode">Call(…)</span>, and in Python with <span class="SourceCode">call(…)</span>. The signature is the same as specified in vCDL. In C# <span class="bold">inout</span> parameters are mapped to <span class="bold">ref</span> parameters and <span class="bold">out</span> parameters to <span class="bold">out</span> parameters. In CAPL arguments to <span class="bold">inout</span> and <span class="bold">out</span> parameter are passed by copy-restore, so they must be lvalues (string literals are an exception, as they are lvalues but not allowed in this context). In Python, for primitive data types as well as for optional parameters, an object of the type <span class="SourceCode">vector.canoe.OutParameter</span> must be passed for an <span class="bold">out</span> parameter and an object of the type <span class="SourceCode">vector.canoe.InOutParameter</span> for an <span class="bold">inout</span> parameter. The objects then contain the value via the <span class="bold">.value</span> property.</p>
                <p>As for <span class="SourceCode">CallAsync</span> for C# and CAPL there is also a <span class="SourceCode">Call_Phys</span> variation for parameter types with a linear or textual encoding. In C# the return type has either the physical or symbolic representation, where the physical representation has priority if both encodings exist. In CAPL the return type always has the physical representation.</p>
                <p class="LinkList">&#160;</p>
            </div>
        </div>
        <div class="Footer">
            <div class="FooterWhite">
                <table class="FooterWhite" style="border-collapse: collapse;margin-left: auto;margin-right: auto;">
                    <col style="width: 70px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col style="width: 16px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col />
                    <tbody>
                        <tr>
                            <td>
                                <div class="buttons popup-container clearfix topicToolbarProxy topicToolbarProxyFooter _Skins_HTML5TopicToolbar mc-component nocontent">
                                    <div class="button-group-container-left">
                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                            <div>
                                                <div role="img" class="button-icon-wrapper" aria-label="Expand all">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                        <button class="button needs-pie remove-highlight-button" title="Remove Highlights">
                                            <div>
                                                <div role="img" class="button-icon-wrapper">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <p class="vec_BuildInfo"><a href="../../../Shared/HowToUseOnlineHelp.htm" title="Tips for using the help" alt="Tips for using the help"><img src="../../../../Resources/vImages/vBackstage/vHelpInfo.png" /></a>
                                </p>
                            </td>
                            <td>
                                <p class="vec_BuildInfo" style="text-align: right;"><span class="mc-variable Vector.BuildTime variable">2023-09-26T19:49:32</span>
                                </p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <table style="width: 100%;border-collapse: separate;border-spacing: 3px 0px;margin-left: auto;margin-right: auto;caption-side: top;">
                <col />
                <col />
                <col />
                <col data-mc-conditions="vConditions.HTML5Link" />
                <tbody>
                    <tr>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;">
                            <p class="vec_Footer">©&#160;Vector Informatik GmbH</p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;text-align: right;">
                            <p class="vec_FooterBold">
                                <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded,vConditions.TestDataEditorExcluded">CANoe</MadCap:conditionalText> Version <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded">17 SP3</MadCap:conditionalText></p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="../../../Shared/ContactCopyrightLicense.htm" class="vec_Footer MCXref xref xrefvec_Footer">Contact/Copyright/License</a>
                            </p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="https://www.vector.com/int/en/company/get-info/privacy-policy/" target="_blank" class="vec_Footer">Data Privacy Notice</a>
                            </p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>
</html>