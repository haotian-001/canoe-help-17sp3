<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="" data-mc-search-type="Stem" data-mc-help-system-file-name="CANoeCANalyzer.xml" data-mc-path-to-help-system="../../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../../../Skins/Favicons/browserconfig.xml" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../../Skins/Favicons/favicon-16x16.png" /><title>Programming Examples for the Communication Concept</title>
        <link href="../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Resources/Stylesheets/vTableMasterPageHeader.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../../Resources/Stylesheets/vStylesheet.css" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.expand-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.remove-highlight-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.collapse-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.needs-pie
{
	behavior: url('../../../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../../Skins/Favicons/favicon-16x16.png" />
        <script src="../../../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapGlobal.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapDom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapUtilities.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapXhr.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTextEffects.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSlideshow.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMessageBus.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMessageBus.CrossFrame.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapDefault.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMediaQueries.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAccessibility.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapHelpSystem.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAliasFile.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTopicFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapFeedbackHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSkinHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.MiniToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.SideMenu.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapIndex.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapGlossary.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapParser.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSearch.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapNavigateTopics.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapLms.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapELearning.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTopic.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMicroContentComponent.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSearchHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTopicElements.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTriPane.js" type="text/javascript" defer="defer">
        </script>
        <script type="text/jscript" src="../../../../Resources/vScripts/SyntaxHighlighting.js">
        </script>
        <script type="text/jscript" src="../../../../Resources/vScripts/TabSwitch.js">
        </script>
        <script type="text/javascript" src="../../../../Resources/vScripts/Vector.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../../CANoeCANalyzer.htm#Topics/CANoeCANalyzer/CommunicationConcept/Programming/CCPExamples.htm">Open topic with navigation</a>
        </p>
        <div class="Body">
            <div role="main" id="mc-main-content">
                <div>
                    <p class="StructurePath"><a href="../../CANoeCANalyzer.htm" class="StructurePath" data-mc-conditions="vConditions.CANalyzerExclude,vConditions.CANoe4ServerExcluded,vConditions.CANoe4SWExcluded,vConditions.TestDataEditorExcluded,vConditions.vTESTstudioExcluded,vConditions.TestUnitRunnerExcluded,vConditions.CANoeNMExcluded"><img src="../../../../Resources/vImages/vToolIcons/CANoe_Icon16.png" alt="" />&#160;CANoe</a> » <a href="../CC.htm" class="StructurePath MCXref xref xrefStructurePath">Communication Concept</a> » <a href="CCP.htm" class="StructurePath">Programming</a> » <span class="mc-variable System.Title variable">Programming Examples for the Communication Concept</span></p>
                    <h1><span class="mc-variable System.Title variable">Programming Examples for the Communication Concept</span>
                    </h1>
                    <p class="MenuPath">&#160;</p>
                    <p class="AutoSearchFilterConcepts"><a name="aanchor3660"></a>
                        <MadCap:concept term="SFCore" />
                    </p>
                    <p class="IndexConcept"><a name="kanchor2842"></a>
                    </p>
                </div>
                <p>These short introductory examples show how to use <a href="../CCObjects.htm">communication objects</a> and <a href="../CCDistributedObjects.htm">distributed objects</a> in programming APIs in general.</p>
                <h2 class="SectionMain">Using a Complex Signal</h2>
                <p>In the first example, a signal is set to adjust a mirror. As a data type, the signal has a structure with two elements for adjustment in x and y direction. After a waiting period, it is checked whether the status signal sent by the mirror has a new value.</p>
                <div>
                    <table style="margin-left: 0;margin-right: auto;">
                        <col />
                        <col />
                        <tbody>
                            <tr>
                                <td>
                                    <p class="TableBold"><a href="../../../vCDL/vCDLStartpage.htm">vCDL</a>
                                    </p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">namespace Mirrors<br />{<br />&#160;&#160;struct MirrorPos<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;int32 x;<br />&#160;&#160;&#160;&#160;int32 y;<br />&#160;&#160;}<br /><br />&#160;&#160;[broadcast=true]<br />&#160;&#160;signal MirrorPos CurrentMirrorPosition<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;sender Mirror;<br />&#160;&#160;&#160;&#160;receiver CANoe;<br />&#160;&#160;}<br /><br />&#160;&#160;[broadcast=true]<br />&#160;&#160;signal MirrorPos ChangeMirrorPosition<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;sender CANoe;<br />&#160;&#160;&#160;&#160;receiver Mirror;<br />&#160;&#160;}<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">C#</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">[TestCase]<br />void TestMirror()<br />{<br />&#160;&#160;<span class="CodeComment">// save the current (last received) value of the position</span><br />&#160;&#160;var oldPos = new Mirrors.MirrorPos(CurrentMirrorPosition.Value);<br /><br /><span class="CodeComment">&#160;&#160;// set the adjustment signal: 5 degrees to the left<br />&#160;&#160;// the signal is sent once if its value changes <br />&#160;&#160;// (this is specified in the communication description)</span><br />&#160;&#160;ChangeMirrorPosition.x = -50; // in tenths of a degree<br /><br /><span class="CodeComment">&#160;&#160;// wait for new position<br></br>&#160;&#160;// after 200ms, the status signal should contain the new position</span><br />&#160;&#160;Execution.Wait(200);<br /><br />&#160;&#160;Assert.IsTrue(CurrentMirrorPosition.x == oldPos.x.ImplValue - 50);<br />&#160;&#160;Assert.IsTrue(CurrentMirrorPosition.y == oldPos.y.ImplValue);<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">CAPL</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">testcase TestMirror()<br />{<br />&#160;&#160;struct Mirrors::MirrorPos oldPos;<br />&#160;&#160;int waitResult;<br /><br />&#160;&#160;<span class="CodeComment">// save the current (last received) value of the position</span><br />&#160;&#160;memcpy(oldPos, $CurrentMirrorPosition[CANoe]);<br /><br /><span class="CodeComment">&#160;&#160;// set the adjustment signal: 5 degrees to the left<br />&#160;&#160;// the signal is sent once if its value changes<br />&#160;&#160;// (this is specified in the communication description)</span><br />&#160;&#160;$ChangeMirrorPosition[CANoe].x = -50; // in tenths of a degree<br /><br /><span class="CodeComment">&#160;&#160;// wait for new position<br></br>&#160;&#160;// after 200ms, the status signal should contain the new position</span><br />&#160;&#160;TestWaitForTimeout(200);<br /><br />&#160;&#160;TestAssert($CurrentMirrorPosition[CANoe].x == oldPos.x - 50);<br />&#160;&#160;TestAssert($CurrentMirrorPosition[CANoe].y == oldPos.y);<br />}</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionMain">Using a Service</h2>
                <p>In this example, there is a <span class="bold">MirrorAdjustment</span> service which is provided by an external mirror ECU. It contains an <span class="bold">Adjust</span> method which receives the change of the mirror position in x and y direction as a parameter; this method returns whether this change was successful. In addition, it contains a <span class="bold">CurrentPosition</span> event which distributes the new mirror position to interested consumers.</p>
                <p>For a test, <span class="Product">CANoe</span> is now in the role of the consumer and uses the service to adjust the mirror.</p>
                <div>
                    <table style="margin-left: 0;margin-right: auto;">
                        <col />
                        <col />
                        <tbody>
                            <tr>
                                <td>
                                    <p class="TableBold"><a href="../../../vCDL/vCDLStartpage.htm">vCDL</a>
                                    </p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">namespace Mirrors<br />{<br />&#160;&#160;enum AdjustResult { OK = 0, OutOfRange = 1 } <span class="CodeComment">// Textual Encoding</span><br /><br />&#160;&#160;<span class="CodeComment">// position in tenths of a degree; 0 is the center</span><br />&#160;&#160;struct MirrorPos<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;int32 x;<br />&#160;&#160;&#160;&#160;int32 y;<br />&#160;&#160;}<br /><br />&#160;&#160;service MirrorAdjustment<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;AdjustResult Adjust(int32 deltaX, int32 deltaY);<br />&#160;&#160;&#160;&#160;event MirrorPos CurrentPosition;<br /><br />&#160;&#160;&#160;&#160;consumer CANoe;<br />&#160;&#160;&#160;&#160;provider Mirror;<br />&#160;&#160;}<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">C#</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">[TestCase]<br />void TestMirror()<br />{<br />&#160;&#160;<span class="CodeComment">// save the current (last received) value of the position</span><br />&#160;&#160;var oldPos = new Mirrors.MirrorPos(MirrorAdjustment.CurrentPosition.Value);<br /><br />&#160;&#160;<span class="CodeComment">// call the adjustment method: 5 degrees to the left</span><br />&#160;&#160;using (var cco1 = MirrorAdjustment.Adjust.CallAsync(-50, 0))<br />&#160;&#160;{<br /><span class="CodeComment">&#160;&#160;&#160;&#160;// wait for answer<br></br>&#160;&#160;&#160;&#160;// after 200ms, it should be there and the event should be distributed</span><br />&#160;&#160;&#160;&#160;Execution.Wait(200);<br /><br />&#160;&#160;&#160;&#160;Assert.IsTrue(cco1.Result_Symb == Mirrors.AdjustResult.OK);<br />&#160;&#160;&#160;&#160;Assert.IsTrue(MirrorAdjustment.CurrentPosition.x == oldPos.x.ImplValue - 50);<br />&#160;&#160;&#160;&#160;Assert.IsTrue(MirrorAdjustment.CurrentPosition.y == oldPos.y.ImplValue);<br />&#160;&#160;}<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">CAPL</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">testcase TestMirror()<br />{<br />&#160;&#160;struct Mirrors::MirrorPos oldPos;<br />&#160;&#160;callContext MirrorAdjustment.Adjust cco1;<br /><br />&#160;&#160;<span class="CodeComment">// save the current (last received) value of the position</span><br />&#160;&#160;memcpy(oldPos, $MirrorAdjustment.consumerSide[0,0].CurrentPosition);<br /><br />&#160;&#160;<span class="CodeComment">// call the adjustment method: 5 degrees to the left</span><br />&#160;&#160;cco1 = MirrorAdjustment.consumerSide[0,0].Adjust.CallAsync(-50, 0);<br /><br /><span class="CodeComment">&#160;&#160;// wait for answer<br></br>&#160;&#160;// after 200ms, it should be there and the event should be distributed</span><br />&#160;&#160;TestWaitForTimeout(200);<br /><br />&#160;&#160;TestAssert(cco1.Result == Mirrors::AdjustResult::OK);<br />&#160;&#160;TestAssert($MirrorAdjustment.consumerSide[0,0].CurrentPosition.x == oldPos.x - 50);<br />&#160;&#160;TestAssert($MirrorAdjustment.consumerSide[0,0].CurrentPosition.y == oldPos.y);<br />}</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionMain">Using Several Service Providers</h2>
                <p>In the third example, the previous example is somewhat extended:</p>
                <ul>
                    <li>There are two mirrors that provide the service. The right mirror should be tested.</li>
                    <li>The function must not wait for a fixed period of time, it must only wait until the answer to the function call and the event are received.</li>
                </ul>
                <div>
                    <table style="margin-left: 0;margin-right: auto;">
                        <col />
                        <col />
                        <tbody>
                            <tr>
                                <td>
                                    <p class="TableBold"><a href="../../../vCDL/vCDLStartpage.htm">vCDL</a>
                                    </p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">namespace Mirrors<br />{<br />&#160;&#160;enum AdjustResult { OK = 0, OutOfRange = 1 } <span class="CodeComment">// Textual Encoding</span><br /><br />&#160;&#160;<span class="CodeComment">// position in tenths of a degree; 0 is the center</span><br />&#160;&#160;struct MirrorPos<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;int32 x;<br />&#160;&#160;&#160;&#160;int32 y;<br />&#160;&#160;}<br /><br />&#160;&#160;service MirrorAdjustment<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;AdjustResult Adjust(int32 deltaX, int32 deltaY);<br />&#160;&#160;&#160;&#160;event MirrorPos CurrentPosition;<br /><br />&#160;&#160;&#160;&#160;consumer CANoe;<br />&#160;&#160;&#160;&#160;provider LeftMirror, RightMirror;<br />&#160;&#160;}<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">C#</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">[TestCase]<br />void TestMirror()<br />{<br />&#160;&#160;<span class="CodeComment">// select the right mirror as communication target</span><br />&#160;&#160;MirrorAdjustment.SelectProvider(MirrorAdjustment.RightMirror.Instance);<br /><br />&#160;&#160;<span class="CodeComment">// save the current (last received) value of the position</span><br />&#160;&#160;var oldPos = new Mirrors.MirrorPos(MirrorAdjustment.CurrentPosition.Value);<br />&#160;&#160;<span class="CodeComment">// reset change flag of the event</span><br />&#160;&#160;Runtime.GetStatus(MirrorAdjustment.CurrentPosition).ClearChangeFlag();<br /><br />&#160;&#160;<span class="CodeComment">// call the adjustment method: 5 degrees to the left</span><br />&#160;&#160;using (var cco1 = MirrorAdjustment.Adjust.CallAsync(-50, 0))<br />&#160;&#160;<span class="CodeComment">// wait for answer</span><br />&#160;&#160;using (var ret = Execution.WaitForAnswer(cco1, 200))<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;Assert.IsTrue(ret.WaitResult == 1);<br />&#160;&#160;&#160;&#160;Assert.IsTrue(ret.Call.Result_Symb == Mirrors.AdjustResult.OK);<br /><br /><span class="CodeComment">&#160;&#160;&#160;&#160;// Wait until the event is also received. Due to the use of the change flag,<br></br>&#160;&#160;&#160;&#160;// it is irrelevant in which order the event and answer are received.</span><br />&#160;&#160;&#160;&#160;var ret2 = Execution.WaitForChangeFlag(MirrorAdjustment.CurrentPosition, 200);<br /><br />&#160;&#160;&#160;&#160;Assert.IsTrue(ret2 == 1);<br />&#160;&#160;&#160;&#160;Assert.IsTrue(MirrorAdjustment.CurrentPosition.x == oldPos.x.ImplValue - 50);<br />&#160;&#160;&#160;&#160;Assert.IsTrue(MirrorAdjustment.CurrentPosition.y == oldPos.y.ImplValue);<br />&#160;&#160;}<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">CAPL</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">testcase TestMirror()<br />{<br />&#160;&#160;struct MirrorPos oldPos;<br />&#160;&#160;callContext MirrorAdjustment.Adjust cco1;<br />&#160;&#160;consumedMethodRef MirrorAdjustment.Adjust adjustMethod;<br />&#160;&#160;consumedEventRef MirrorPos positionEvent;<br />&#160;&#160;int waitResult;<br /><br />&#160;&#160;<span class="CodeComment">// select the right mirror as communication target</span><br />&#160;&#160;adjustMethod = MirrorAdjustment.consumerSide[CANoe,RightMirror].Adjust;<br />&#160;&#160;positionEvent = &#160;&#160;MirrorAdjustment.consumerSide[CANoe,RightMirror].CurrentPosition;<br /><br />&#160;&#160;<span class="CodeComment">// save the current (last received) value of the position</span><br />&#160;&#160;memcpy(oldPos, $positionEvent);<br />&#160;&#160;<span class="CodeComment">// reset change flag of the event</span><br />&#160;&#160;positionEvent.ClearChangeFlag();<br /><br />&#160;&#160;<span class="CodeComment">// call the adjustment method: 5 degrees to the left</span><br />&#160;&#160;cco1 = adjustMethod.CallAsync(-50, 0);<br /><br />&#160;&#160;<span class="CodeComment">// wait for answer</span><br />&#160;&#160;waitResult = TestWaitForAnswer(cco1, 200);<br />&#160;&#160;TestAssert(waitResult == 1);<br />&#160;&#160;TestAssert(cco1.Result == Mirrors::AdjustResult::OK);<br /><br /><span class="CodeComment">&#160;&#160;// Wait until the event is also received. Due to the use of the<br />&#160;&#160;// change flag, it is irrelevant in which order the event and answer are received.</span><br />&#160;&#160;waitResult = TestWaitForChangeFlag(positionEvent, 200);<br />&#160;&#160;TestAssert(waitResult == 1);<br />&#160;&#160;TestAssert($positionEvent.x == oldPos.x - 50);<br />&#160;&#160;TestAssert($positionEvent.y == oldPos.y);<br />}</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionMain">Using Distributed Objects</h2>
                <p>The fourth example is independent of the previous examples. Here we use <a href="../CCDistributedObjects.htm">distributed objects</a> with the <a href="../CCBinding.htm">abstract binding</a> to simulate mirror ECUs in software. There are two objects that implement the mirror interface with a method for adjustment and an event for the current position. Another object is used to control both mirrors. The test is the same as in the previous example. A simple implementation for the method <span class="SourceCode">Adjust</span> is provided to pass the test. </p>
                <div>
                    <table style="margin-left: 0;margin-right: auto;">
                        <col />
                        <col />
                        <tbody>
                            <tr>
                                <td>
                                    <p class="TableBold"><a href="../../../vCDL/vCDLStartpage.htm">vCDL</a>
                                    </p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">version 1.2;<br /><br />namespace Mirrors<br />{<br />&#160;&#160;enum AdjustResult { OK = 0, OutOfRange = 1 } <span class="CodeComment">// Textual Encoding</span><br /><br />&#160;&#160;<span class="CodeComment">// position in tenths of a degree; 0 is the center</span><br />&#160;&#160;struct MirrorPos { int32 x; int32 y; }<br />&#160;&#160;interface Mirror<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;provided method AdjustResult Adjust(int32 deltaX, int32 deltaY);<br />&#160;&#160;&#160;&#160;provided event MirrorPos CurrentPosition;<br />&#160;&#160;}<br /><br />&#160;&#160;[Binding="Abstract", AbstractBinding::ID="Left"]<br />&#160;&#160;object LeftMirror : Mirror {}<br />&#160;&#160;[Binding="Abstract", AbstractBinding::ID="Right"]<br />&#160;&#160;object RightMirror : Mirror {}<br /><br />&#160;&#160;[Binding="Abstract"]<br />&#160;&#160;object Controller<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;[AbstractBinding::ID="Left"]<br />&#160;&#160;&#160;&#160;consumed method AdjustResult AdjustLeft(int32 deltaX, int32 deltaY);<br />&#160;&#160;&#160;&#160;[AbstractBinding::ID="Right"]<br />&#160;&#160;&#160;&#160;consumed method AdjustResult AdjustRight(int32 deltaX, int32 deltaY);<br />&#160;&#160;&#160;&#160;[AbstractBinding::ID="Left"]<br />&#160;&#160;&#160;&#160;consumed event MirrorPos CurrentPositionLeft;<br />&#160;&#160;&#160;&#160;[AbstractBinding::ID="Right"]<br />&#160;&#160;&#160;&#160;consumed event MirrorPos CurrentPositionRight;<br />&#160;&#160;}<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">C#</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">public class mirror <MadCap:conditionalText data-mc-conditions="vConditions.CANoe4SWExcluded">: TestModule</MadCap:conditionalText><br />{<br />&#160;&#160;void TestAssert(bool b)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;if (!b) Report.TestStepFail("Test Mirror Failed!");<br />&#160;&#160;&#160;&#160;else Report.TestStepPass("Test Mirror Passed");<br />&#160;&#160;}<br />&#160;&#160;public override void Main()<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;TestGroupBegin("Mirror Test", "Testing the Mirror functionality");<br />&#160;&#160;&#160;&#160;Execution.Wait(3000);<br />&#160;&#160;&#160;&#160;TestMirror();<br />&#160;&#160;&#160;&#160;TestGroupEnd();<br />&#160;&#160;}<br /><br />&#160;&#160;[TestCase("Mirror", "Change Mirror Position")]<br />&#160;&#160;public void TestMirror()<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;<span class="CodeComment">// Save the current (last received) value of the position</span><br />&#160;&#160;&#160;&#160;var oldPos = new MirrorPos(RightMirror.CurrentPosition.Value);<br />&#160;&#160;&#160;&#160;int waitResult = 0;<br /><br />&#160;&#160;&#160;&#160;<span class="CodeComment">// reset change flag of the event</span><br />&#160;&#160;&#160;&#160;Runtime.GetStatus(Controller.CurrentPositionRight).ClearChangeFlag();<br />&#160;&#160;&#160;&#160;<span class="CodeComment">// call the adjustment method: 5 degrees to the left</span><br />&#160;&#160;&#160;&#160;var ccol = Controller.AdjustRight.CallAsync(-50, 0);<br />&#160;&#160;&#160;&#160;<span class="CodeComment">// wait for answers</span><br />&#160;&#160;&#160;&#160;waitResult = Execution.WaitForAnswer(ccol, 200).WaitResult;<br />&#160;&#160;&#160;&#160;TestAssert(waitResult == 1);<br />&#160;&#160;&#160;&#160;TestAssert(Mirrors.AdjustResult.OK == ccol.Result_Symb);<br /><br />&#160;&#160;&#160;&#160;<span class="CodeComment">// Wait until the event is also received. Due to the use of the</span><br />&#160;&#160;&#160;&#160;<span class="CodeComment">// change flag, it is irrelevant in which order the event and answer are received.</span><br />&#160;&#160;&#160;&#160;waitResult = Execution.WaitForChangeFlag(RightMirror.CurrentPosition, 200);<br />&#160;&#160;&#160;&#160;TestAssert(waitResult == 1);<br />&#160;&#160;&#160;&#160;TestAssert(RightMirror.CurrentPosition.x == oldPos.x.ImplValue - 50);<br />&#160;&#160;&#160;&#160;TestAssert(RightMirror.CurrentPosition.y == oldPos.y.ImplValue);<br />&#160;&#160;}<br /><br />&#160;&#160;[OnCall(RightMirror.MemberIDs.Adjust)]<br />&#160;&#160;public uint AdjustMethodImpl(int deltax, int deltay)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;RightMirror.CurrentPosition.x += deltax;<br />&#160;&#160;&#160;&#160;RightMirror.CurrentPosition.y += deltay;<br />&#160;&#160;&#160;&#160;return 0;<br />&#160;&#160;}<br />}</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p class="TableBold">CAPL</p>
                                </td>
                                <td>
                                    <p class="TableSourceCode">variables<br />{<br />&#160;&#160;using namespace Mirrors;<br />}<br /><br />void MainTest()<br />{<br />&#160;&#160;TestMirror();<br />}<br /><br />void TestAssert(dword b)<br />{<br />&#160;&#160;if (!b) testStepFail();<br />&#160;&#160;else testStepPass();<br />}<br /><br />on fct_Called RightMirror.Adjust<br />{<br />&#160;&#160;$RightMirror.CurrentPosition.x += this.deltaX;<br />&#160;&#160;$RightMirror.CurrentPosition.y += this.deltaY;<br />&#160;&#160;this.Result = AdjustResult::OK;<br />}<br /><br />testcase TestMirror()<br />{<br />&#160;&#160;struct MirrorPos oldPos;<br />&#160;&#160;callContext Controller.AdjustRight cco;<br />&#160;&#160;int waitResult;<br />&#160;&#160;<span class="CodeComment">// save the current (last received) value of the position</span><br />&#160;&#160;memcpy(oldPos, $Controller.CurrentPositionRight);<br />&#160;&#160;<span class="CodeComment">// reset change flag of the event</span><br />&#160;&#160;Controller.CurrentPositionRight.ClearChangeFlag();<br />&#160;&#160;<span class="CodeComment">// call the adjustment method: 5 degrees to the left</span><br />&#160;&#160;cco = Controller.AdjustRight.CallAsync(-50, 0);<br />&#160;&#160;<span class="CodeComment">// wait for answer</span><br />&#160;&#160;waitResult = TestWaitForAnswer(cco, 200);<br />&#160;&#160;TestAssert(waitResult == 1);<br />&#160;&#160;TestAssert(cco.Result == AdjustResult::OK);<br />&#160;&#160;<span class="CodeComment">// Wait until the event is also received. Due to the use of the</span><br />&#160;&#160;<span class="CodeComment">// change flag, it is irrelevant in which order the event and answer are received.</span><br />&#160;&#160;waitResult = TestWaitForChangeFlag(Controller.CurrentPositionRight, 200);<br />&#160;&#160;TestAssert(waitResult == 1);<br />&#160;&#160;TestAssert($Controller.CurrentPositionRight.x == oldPos.x - 50);<br />&#160;&#160;TestAssert($Controller.CurrentPositionRight.y == oldPos.y);<br />}</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <p class="LinkList">&#160;</p>
            </div>
        </div>
        <div class="Footer">
            <div class="FooterWhite">
                <table class="FooterWhite" style="border-collapse: collapse;margin-left: auto;margin-right: auto;">
                    <col style="width: 70px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col style="width: 16px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col />
                    <tbody>
                        <tr>
                            <td>
                                <div class="buttons popup-container clearfix topicToolbarProxy topicToolbarProxyFooter _Skins_HTML5TopicToolbar mc-component nocontent">
                                    <div class="button-group-container-left">
                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                            <div>
                                                <div role="img" class="button-icon-wrapper" aria-label="Expand all">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                        <button class="button needs-pie remove-highlight-button" title="Remove Highlights">
                                            <div>
                                                <div role="img" class="button-icon-wrapper">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <p class="vec_BuildInfo"><a href="../../../Shared/HowToUseOnlineHelp.htm" title="Tips for using the help" alt="Tips for using the help"><img src="../../../../Resources/vImages/vBackstage/vHelpInfo.png" /></a>
                                </p>
                            </td>
                            <td>
                                <p class="vec_BuildInfo" style="text-align: right;"><span class="mc-variable Vector.BuildTime variable">2023-09-26T19:49:32</span>
                                </p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <table style="width: 100%;border-collapse: separate;border-spacing: 3px 0px;margin-left: auto;margin-right: auto;caption-side: top;">
                <col />
                <col />
                <col />
                <col data-mc-conditions="vConditions.HTML5Link" />
                <tbody>
                    <tr>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;">
                            <p class="vec_Footer">©&#160;Vector Informatik GmbH</p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;text-align: right;">
                            <p class="vec_FooterBold">
                                <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded,vConditions.TestDataEditorExcluded">CANoe</MadCap:conditionalText> Version <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded">17 SP3</MadCap:conditionalText></p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="../../../Shared/ContactCopyrightLicense.htm" class="vec_Footer MCXref xref xrefvec_Footer">Contact/Copyright/License</a>
                            </p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="https://www.vector.com/int/en/company/get-info/privacy-policy/" target="_blank" class="vec_Footer">Data Privacy Notice</a>
                            </p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>
</html>