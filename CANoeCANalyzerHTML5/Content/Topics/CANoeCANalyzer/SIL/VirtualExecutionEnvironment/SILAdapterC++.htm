<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="" data-mc-search-type="Stem" data-mc-help-system-file-name="CANoeCANalyzer.xml" data-mc-path-to-help-system="../../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../../../Skins/Favicons/browserconfig.xml" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../../Skins/Favicons/favicon-16x16.png" /><title>C++ SIL Adapter</title>
        <link href="../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Resources/Stylesheets/vTableMasterPageHeader.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../../Resources/Stylesheets/vStylesheet.css" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.expand-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.remove-highlight-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.collapse-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.needs-pie
{
	behavior: url('../../../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../../../Resources/Stylesheets/vTableSymbol.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../../Skins/Favicons/favicon-16x16.png" />
        <script src="../../../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapGlobal.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapDom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapUtilities.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapXhr.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTextEffects.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSlideshow.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMessageBus.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMessageBus.CrossFrame.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapDefault.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMediaQueries.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAccessibility.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapHelpSystem.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAliasFile.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTopicFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapFeedbackHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSkinHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.MiniToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.SideMenu.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapIndex.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapGlossary.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapParser.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSearch.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapNavigateTopics.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapLms.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapELearning.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTopic.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMicroContentComponent.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSearchHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTopicElements.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTriPane.js" type="text/javascript" defer="defer">
        </script>
        <script type="text/jscript" src="../../../../Resources/vScripts/SyntaxHighlighting.js">
        </script>
        <script type="text/jscript" src="../../../../Resources/vScripts/TabSwitch.js">
        </script>
        <script type="text/javascript" src="../../../../Resources/vScripts/Vector.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../../CANoeCANalyzer.htm#Topics/CANoeCANalyzer/SIL/VirtualExecutionEnvironment/SILAdapterC++.htm">Open topic with navigation</a>
        </p>
        <div class="Body">
            <div role="main" id="mc-main-content">
                <div>
                    <p class="StructurePath"><a href="../../CANoeCANalyzer.htm" class="StructurePath" data-mc-conditions="vConditions.CANalyzerExclude,vConditions.CANoe4ServerExcluded,vConditions.CANoe4SWExcluded,vConditions.TestDataEditorExcluded,vConditions.vTESTstudioExcluded,vConditions.TestUnitRunnerExcluded,vConditions.CANoeNMExcluded"><img src="../../../../Resources/vImages/vToolIcons/CANoe_Icon16.png" alt="" />&#160;CANoe</a> » <a href="../SIL.htm" class="StructurePath MCXref xref xrefStructurePath">Software-in-the-Loop</a> » <a href="VirtualExecutionEnvironment.htm" class="StructurePath MCXref xref xrefStructurePath">Virtual Execution Environment</a> » <span class="mc-variable System.Title variable">C++ SIL Adapter</span></p>
                    <h1><span class="mc-variable System.Title variable">C++ SIL Adapter</span>
                    </h1>
                    <p class="MenuPath">&#160;</p>
                    <p class="AutoSearchFilterConcepts"><a name="aanchor6631"></a>
                        <MadCap:concept term="SFCore" />
                    </p>
                    <p class="IndexConcept"><a name="kanchor5017"></a>
                    </p>
                </div>
                <div>
                    <h2 class="SectionMain">General</h2>
                    <p>When the C++ SIL Adapter is created, it is completely generated as source code in the selected directory. A CMakeLists.txt file is included with the SIL Adapter, which allows the SIL Adapter to be included as a library in a CMake project. Thus, in addition to the general requirements for the execution environment, the following tools are needed:</p>
                    <ul>
                        <li>
                            <p class="Table">C++14 compiler</p>
                        </li>
                        <li>
                            <p class="Table"><a href="https://cmake.org/" class="ExternalLink" target="_blank">CMake</a> 3.13 or higher</p>
                        </li>
                    </ul>
                    <p>The C++ SIL Adapter can also be used in the context of a C application. To do this, create a C wrapper for the SIL Adapter. The wrapper and the C++ SIL Adapter must be compiled by a C++ compiler. An example of a C wrapper can be found in the C application from the <a href="../../../SampConf/SIL/SILAdapterBasic/SILAdapterBasicCpp.htm" class="MCXref xref">SIL Adapter Basic (C++)</a> sample configuration.</p>
                </div>
                <div>
                    <h2 class="SectionMain"><a targets="TOGCppQuickStart" href="javascript:void(0)" class="MCToggler MCTogglerHead MCTogglerHotSpot MCToggler_Open toggler MCTogglerHotSpot_ MCHotSpotImage" data-mc-targets="TOGCppQuickStart"><img class="MCToggler_Image_Icon" src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />C++ Quick Start: Hello World!</a>
                    </h2>
                    <div style="display: none;" data-mc-target-name="TOGCppQuickStart">
                        <p>In the following, a simple example will be created in which a "Hello World!" string is sent to <span class="Product">CANoe</span> using the C++ SIL Adapter. It is assumed that knowledge of CMake is available.</p>
                        <p>The example includes both the creation of a new <span class="Product">CANoe</span> configuration and a C++ application with SIL Adapter. The final folder structure of the example could have the following structure:</p>
                        <div>
                            <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                <col class="TableStyle-vTableSymbol-Column-Column1" />
                                <col class="TableStyle-vTableSymbol-Column-Column2" />
                                <tbody>
                                    <tr>
                                        <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                            <p class="Table">
                                                <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                            </p>
                                        </td>
                                        <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                            <p class="TableSymbolHead">Folder structure "<span class="SourceCode">Hello World!</span>" example</p>
                                            <p class="TableSourceCodeIndent">HelloWorldTest<br />+--CANoeConfig<br />|&#160;&#160;|<br />|&#160;&#160;+--HelloWorldTest.cfg<br />|&#160;&#160;+--Interface.vCDL<br />|<br />+--SUT<br />|&#160;&#160;|<br />|&#160;&#160;+--Build<br />|&#160;&#160;+--SilAdapter<br />|&#160;&#160;+--CMakeLists.txt<br />|&#160;&#160;+--main.cpp</p>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <p>The folder <span class="GUI">CANoeConfig</span> contains all files of the <span class="Product">CANoe</span> configuration and the folder <span class="GUI">SUT</span> contains the source code of the Software SUT (<span class="bold">main.cpp</span>), including the SIL Adapter (<span class="GUI">SilAdapter</span>) and the folder for the built application (<span class="GUI">Build</span>).</p>
                        <div>
                            <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                <col class="TableStyle-vTableSymbol-Column-Column1" />
                                <col class="TableStyle-vTableSymbol-Column-Column2" />
                                <tbody>
                                    <tr>
                                        <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                            <p class="Table">
                                                <img src="../../../../Resources/vImages/vStep.png" style="width: 48px;height: 45px;" title="Procedure" alt="Procedure" />
                                            </p>
                                        </td>
                                        <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                            <p class="TableSymbolHead">Step by Step Procedure</p>
                                            <div class="Procedure">
                                                <ol>
                                                    <li value="1">
                                                        <p><span class="bold">Create</span> a new configuration via <a href="../../Ribbon/RibbonFile.htm"><span class="GUI">File</span> ribbon tab</a>|<span class="GUI">New</span> and the template <MadCap:conditionalText data-mc-conditions="vConditions.CANoe4SWExcluded"><span class="GUI">Application Layer</span>|<span class="GUI">Distributed Objects</span></MadCap:conditionalText>.</p>
                                                    </li>
                                                    <li value="2" data-mc-conditions="vConditions.CANoe4SWExcluded">
                                                        <p>Select for the measurement on the <a href="../../Ribbon/RibbonHome.htm"><span class="GUI">Home</span> ribbon tab</a> the working mode <span class="bold">Simulated Bus</span>.</p>
                                                    </li>
                                                    <li value="3">
                                                        <p>Save the new <span class="Product">CANoe</span> configuration as <span class="bold">HelloWorldTest.cfg</span>.</p>
                                                    </li>
                                                    <li value="4">
                                                        <p class="Table"><span class="bold">Create</span> the file <span class="GUI">Interface.vCDL</span> to describe the functional system interface between <span class="Product">CANoe</span> and the Software SUT with the following content:</p>
                                                        <div>
                                                            <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                                                <col class="TableStyle-vTableSymbol-Column-Column1" />
                                                                <col class="TableStyle-vTableSymbol-Column-Column2" />
                                                                <tbody>
                                                                    <tr>
                                                                        <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                                            <p class="Table">
                                                                                <img src="../../../../Resources/vImages/vEdit.png" style="width: 48px;height: 45px;" title="Editing Allowed" alt="Editing Allowed" />
                                                                            </p>
                                                                        </td>
                                                                        <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                                            <p class="TableSymbolHead">vCDLfile for "<span class="SourceCode">Hello World!</span>" example: Interface.vCDL</p><pre xml:space="preserve"><code class="language-cpp">version 1.2;

namespace HelloWorldTest
{
&#160;&#160;[Binding="SilKit"]
&#160;&#160;object Display {
&#160;&#160;&#160;&#160;consumed data string Text;
&#160;&#160;}
}</code></pre>
                                                                        </td>
                                                                    </tr>
                                                                </tbody>
                                                            </table>
                                                        </div>
                                                        <p>The C++ application should be able to set the value of the consumed data member <span class="GUI">Text</span> on the distributed object <span class="GUI">Display</span> by using the SIL Adapter.</p>
                                                    </li>
                                                    <li value="5">
                                                        <p><a href="SILAdapter.htm#BMSystemSetup" class="bold">Import</a> the <span class="GUI">Interface.vCDL</span> file into <span class="Product">CANoe</span> as a data source.</p>
                                                    </li>
                                                    <li value="6">
                                                        <p class="Table"><span class="bold">Follow</span> the steps to <a href="SILAdapter.htm#BMSILAdapterGeneration">generate a SIL Adapter</a>.</p>
                                                        <p><span class="bold">Select</span> C++ as the language of the SIL Adapter and an empty directory named <span class="GUI">SilAdapter</span> as the output directory.</p>
                                                    </li>
                                                    <li value="7">
                                                        <p class="Table"><span class="bold">Create</span> a <span class="bold">main.cpp</span> file for the C++ application with the following content:</p>
                                                        <div>
                                                            <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                                                <col class="TableStyle-vTableSymbol-Column-Column1" />
                                                                <col class="TableStyle-vTableSymbol-Column-Column2" />
                                                                <tbody>
                                                                    <tr>
                                                                        <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                                            <p class="Table">
                                                                                <img src="../../../../Resources/vImages/vEdit.png" style="width: 48px;height: 45px;" title="Editing Allowed" alt="Editing Allowed" />
                                                                            </p>
                                                                        </td>
                                                                        <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                                            <p class="Bold">C++ application for "<span class="SourceCode">Hello World!</span>" example: main.cpp</p><pre xml:space="preserve"><code class="language-cpp">#include &lt;iostream&gt;

#include "SilAdapter/SilAdapter.hpp"

int main()
{
&#160;&#160;Vector::CANoe::SilAdapter::Connect();

&#160;&#160;HelloWorldTest::Display.Text = "Hello World!";

&#160;&#160;std::cout &lt;&lt; "Press return to exit" &lt;&lt; std::endl;
&#160;&#160;std::cin.ignore();
&#160;&#160;Vector::CANoe::SilAdapter::Disconnect();
&#160;&#160;return 0;
}</code></pre>
                                                                        </td>
                                                                    </tr>
                                                                </tbody>
                                                            </table>
                                                        </div>
                                                        <p class="Table">In the C++ application, the SIL Adapter is included via the SilAdapter/SilAdapter.hpp header.</p>
                                                        <p class="Table">Inside the main() function, the SIL Adapter is first initialized, then the value of the data member <span class="GUI">Text</span> on the distributed object <span class="GUI">Display</span> is set to "<span class="SourceCode">Hello World!</span>".</p>
                                                        <p>After receiving the string in <span class="Product">CANoe</span> the SIL Adapter can be shut down and the application terminated.</p>
                                                    </li>
                                                    <li value="8">
                                                        <p class="Table"><span class="bold">	Include</span> the SIL Adapter and the C++ application in a CMake project.</p>
                                                        <p class="Table">To do this, <span class="bold">place</span> a <span class="GUI">CMakeLists.txt</span> file with the following content next to the <span class="bold">SilAdapter</span> and the <span class="bold">main.cpp</span> file.</p>
                                                        <p class="Table">The CMake target for the SIL Adapter is <span class="GUI">SilAdapter</span>.<br />Additionally, you can set up your <span class="Product">CMake</span> project so that <a href="SILAdapter.htm#BMSILAdapterGeneration">the SIL Adapter will be regenerated whenever the data model (vCDL files) has been modified</a>.</p>
                                                        <div>
                                                            <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                                                <col class="TableStyle-vTableSymbol-Column-Column1" />
                                                                <col class="TableStyle-vTableSymbol-Column-Column2" />
                                                                <tbody>
                                                                    <tr>
                                                                        <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                                            <p class="Table">
                                                                                <img src="../../../../Resources/vImages/vEdit.png" style="width: 48px;height: 45px;" title="Editing Allowed" alt="Editing Allowed" />
                                                                            </p>
                                                                        </td>
                                                                        <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                                            <p class="TableSymbolHead">CMake file for"<span class="SourceCode">Hello World!</span>" example: CMakeLists.txt</p><pre><code class="language-clike">cmake_minimum_required(VERSION 3.10)

project("HelloWorld")

add_subdirectory(SilAdapter)

add_executable(Application main.cpp)
target_link_libraries(Application PRIVATE SilAdapter)</code></pre>
                                                                        </td>
                                                                    </tr>
                                                                </tbody>
                                                            </table>
                                                        </div>
                                                    </li>
                                                    <li value="9">
                                                        <p class="Table">Use CMake to <span class="bold">generate</span> the files for your standard build system (<span class="Product">Visual Studio</span> project, Makefile, …) and <span class="bold">build</span> the C++ application.</p>
                                                        <p class="Table">Starting from the SUT directory, you can do this with the following command line commands:</p>
                                                        <div>
                                                            <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                                                <col class="TableStyle-vTableSymbol-Column-Column1" />
                                                                <col class="TableStyle-vTableSymbol-Column-Column2" />
                                                                <tbody>
                                                                    <tr>
                                                                        <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                                            <p class="Table">
                                                                                <img src="../../../../Resources/vImages/vEdit.png" style="width: 48px;height: 45px;" title="Editing Allowed" alt="Editing Allowed" />
                                                                            </p>
                                                                        </td>
                                                                        <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                                            <p class="TableSymbolHead">Command line commands for building the "<span class="SourceCode">Hello World!</span>" example</p><pre xml:space="preserve"><code class="language-shell-session">mkdir Build
cd Build
cmake ..
cmake --build .</code></pre>
                                                                        </td>
                                                                    </tr>
                                                                </tbody>
                                                            </table>
                                                        </div>
                                                        <p class="Table"><span class="bold">As an alternative</span> to the last command, you can also run the example using your default build system.</p>
                                                        <p>To do this, <span class="bold">open</span> the generated project (e.g. <span class="Product">Visual Studio</span> project) and start the build process of the application there.</p>
                                                    </li>
                                                    <li value="10">
                                                        <p><span class="bold">Start</span> the measurement in <span class="Product">CANoe</span> with the configuration from step <span class="bold">1</span>.</p>
                                                    </li>
                                                    <li value="11">
                                                        <p><span class="bold">Start</span> the C++ application on the same system on which <span class="Product">CANoe</span> is running.</p>
                                                    </li>
                                                </ol>
                                                <p class="Table">In the <a href="../../Windows/Trace/TraceWindow.htm" class="MCXref xref">Trace Window</a> of <span class="Product">CANoe</span>, the <span class="GUI">Display.Text</span> object should receive a "<span class="SourceCode">Hello World!</span>".</p>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div>
                    <h2 class="SectionMain"><a targets="TOGCppAPI" href="javascript:void(0)" class="MCToggler MCTogglerHead MCTogglerHotSpot MCToggler_Open toggler MCTogglerHotSpot_ MCHotSpotImage" data-mc-targets="TOGCppAPI"><img class="MCToggler_Image_Icon" src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />C++ API</a>
                    </h2>
                    <div style="display: none;" data-mc-target-name="TOGCppAPI">
                        <div>
                            <h2 class="SectionSub">SIL Adapter Header and Namespaces</h2>
                            <p>The entire SIL Adapter can be included through the <span class="bold">SilAdapter/SilAdapter.hpp</span> header. This makes all user-defined data types, interfaces and distributed objects selected for the SIL Adapter available as C++ classes.</p>
                            <p>The standard functions of the SIL Adapter are located in the predefined namespace <span class="bold">Vector::CANoe::SilAdapter</span>. User-defined types are located in the namespaces as specified in the interface description.</p>
                        </div>
                        <div>
                            <h2 class="SectionSub">SIL Adapter Initialization</h2>
                            <p>The SIL Adapter must first be initialized before it is used for the first time and must be shut down correctly before the application is terminated.</p>
                            <p>This is done by the two functions <span class="bold">Vector::CANoe::SilAdapter::Connect()</span>and <span class="bold">Vector::CANoe::SilAdapter::Disconnect()</span>.
</p>
                            <div>
                                <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                    <col class="TableStyle-vTableSymbol-Column-Column1" />
                                    <col class="TableStyle-vTableSymbol-Column-Column2" />
                                    <tbody>
                                        <tr>
                                            <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                <p class="Table">
                                                    <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                </p>
                                            </td>
                                            <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                <p class="TableSymbolHead">Example: Initialization of the SIL Adapter</p><pre xml:space="preserve"><code class="language-cpp">#include "SilAdapter/SilAdapter.hpp"

int main()
{
&#160;&#160;Vector::CANoe::SilAdapter::Connect();

&#160;&#160;// Remaining Application

&#160;&#160;Vector::CANoe::SilAdapter::Disconnect();
&#160;&#160;return 0;
}</code></pre>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div>
                            <div>
                                <h2 class="SectionSub">Distributed Objects</h2>
                                <p>All distributed objects are available as global variables after including the <span class="bold">SilAdapter/SilAdapter.hpp</span> header. The distributed objects are located in their corresponding namespace as specified in the interface description. The access to the data and method members of a distributed object is done via its global variable.</p>
                                <p>In the following example, the data member <span class="GUI">Text</span> of the distributed object <span class="GUI">Display</span> is set, which is located in the namespace <span class="GUI">HelloWorldTest</span>.</p>
                                <div>
                                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                                        <tbody>
                                            <tr>
                                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                    <p class="Table">
                                                        <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                    </p>
                                                </td>
                                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                    <p class="TableSymbolHead">vCDL Example: Distributed objects</p><pre xml:space="preserve"><code class="language-cpp">version 1.2;

namespace HelloWorldTest
{
&#160;&#160;[Binding="SilKit"]
&#160;&#160;interface IObject
&#160;&#160;{
&#160;&#160;&#160;&#160;provided data string Text;
&#160;&#160;}

&#160;&#160;IObject Display;
}</code></pre>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                                <div>
                                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                                        <tbody>
                                            <tr>
                                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                    <p class="Table">
                                                        <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                    </p>
                                                </td>
                                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                    <p class="TableSymbolHead">C++ Example: Accessing distributed objects</p><pre xml:space="preserve"><code class="language-cpp">HelloWorldTest::Display.Text = "Hello World!";</code></pre>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <h2 class="SectionSub">Container With Distributed Objects</h2>
                        <p>Multiple distributed objects with the same interface description can be defined using a container. Like individual distributed objects, these are contained as global variables in the header <span class="bold">SilAdapter/SilAdapter.hpp</span>.</p>
                        <div>
                            <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                <col class="TableStyle-vTableSymbol-Column-Column1" />
                                <col class="TableStyle-vTableSymbol-Column-Column2" />
                                <tbody>
                                    <tr>
                                        <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                            <p class="Table">
                                                <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                            </p>
                                        </td>
                                        <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                            <p class="TableSymbolHead">vCDL Example: Container with distributed objects</p><pre xml:space="preserve"><code class="language-cpp">version 1.2;

namespace HelloWorldTest
{
&#160;&#160;[Binding="SilKit"]
&#160;&#160;interface IObject
&#160;&#160;{
&#160;&#160;&#160;&#160;provided data string Text;
&#160;&#160;}

&#160;&#160;array&lt;IObject, 5&gt; Displays;
}</code></pre>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <p>The following code snippet shows how to access the third distributed object within a container.</p>
                        <div>
                            <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                <col class="TableStyle-vTableSymbol-Column-Column1" />
                                <col class="TableStyle-vTableSymbol-Column-Column2" />
                                <tbody>
                                    <tr>
                                        <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                            <p class="Table">
                                                <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                            </p>
                                        </td>
                                        <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                            <p class="TableSymbolHead">C++ Example: Accessing container with distributed objects</p><pre><code class="language-cpp">HelloWorldTest::Displays[3].Text = "Hello World!";</code></pre>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <div>
                            <div>
                                <h2 class="SectionSub">Data Members</h2>
                                <p>Data members allow you to read or write a value on a distributed object. An interface description for data members looks like this:</p>
                                <div>
                                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                                        <tbody>
                                            <tr>
                                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                    <p class="Table">
                                                        <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                    </p>
                                                </td>
                                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                    <p class="TableSymbolHead">vCDL Example: Data member</p><pre xml:space="preserve"><code class="language-cpp">version 1.2;

namespace Namespace
{
&#160;&#160;[Binding="SilKit"]
&#160;&#160;interface IObject
&#160;&#160;{
&#160;&#160;&#160;&#160;provided data float FloatData;
&#160;&#160;&#160;&#160;consumed data int32 IntData;
&#160;&#160;}

&#160;&#160;object Object : IObject;
}</code></pre>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                                <p>Reading a data member value is possible either explicitly by calling the <span class="bold">GetValue()</span> method or by operator overloading for implicit type conversion to the corresponding data type.</p>
                                <p>Writing a data member value can be performed either explicitly by calling the <span class="bold">SetValue()</span> method or by overloading the assignment operator for the corresponding data type. Writing the value by the SIL Adapter is only possible for consumed data members.</p>
                                <div>
                                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                                        <tbody>
                                            <tr>
                                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                    <p class="Table">
                                                        <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                    </p>
                                                </td>
                                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                    <p class="TableSymbolHead">C++ Example: Reading and writing data member values</p><pre xml:space="preserve"><code class="language-cpp">// Read data member - alternatives
float data&#160;&#160;= Namespace::Object.FloatData.GetValue();
float data2 = Namespace::Object.FloatData;

// Write data member - alternatives
Namespace::Object.IntData.SetValue(42);
Namespace::Object.IntData = 42;</code></pre>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                                <p>It is also possible to register to value changes or updates of a data member. The registered callback function is called in a separate context and access to the C++ application must be synchronized accordingly (see <a href="SILTechnicalDetails.htm#BMConcurrencyInSoftwareSUT">Concurrency in Software SUT</a>).</p>
                                <div>
                                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                                        <tbody>
                                            <tr>
                                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                    <p class="Table">
                                                        <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                    </p>
                                                </td>
                                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                    <p class="TableSymbolHead">C++ Example: Registering value changes for data member</p><pre xml:space="preserve"><code class="language-cpp">// Called when the value changes and the new value differs from the old one
Namespace::Object.FloatData.RegisterOnChangeHandler([]() {
&#160;&#160;std::cout &lt;&lt; "New Value: " &lt;&lt; Namespace::Object.FloatData.GetValue() &lt;&lt; std::endl;
});

// Called when the value is updated even if the new value is the same as the old one
Namespace::Object.FloatData.RegisterOnUpdateCallback([]() {
&#160;&#160;std::cout &lt;&lt; "Updated Value: " &lt;&lt; Namespace::Object.FloatData.GetValue() &lt;&lt; std::endl;
});</code></pre>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div>
                            <h2 class="SectionSub">Method Members</h2>
                            <p>The C++ SIL Adapter supports both provided and consumed method members. Provided method members are methods that are called by the Software SUT and whose implementation is provided by <span class="Product">CANoe</span>. The implementation is done, for example, in an application model. Consumed method members are methods that are called by <span class="Product">CANoe</span> and implemented by the Software SUT.</p>
                            <p>An interface description for method members with a vCDL file looks like this:</p>
                            <div>
                                <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                    <col class="TableStyle-vTableSymbol-Column-Column1" />
                                    <col class="TableStyle-vTableSymbol-Column-Column2" />
                                    <tbody>
                                        <tr>
                                            <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                <p class="Table">
                                                    <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                </p>
                                            </td>
                                            <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                <p class="TableSymbolHead">vCDL Example: Method Members</p><pre xml:space="preserve"><code class="language-cpp">version 1.2;

namespace Namespace
{
&#160;&#160;[Binding="SilKit"]
&#160;&#160;interface IObject
&#160;&#160;{
&#160;&#160;&#160;&#160;provided method int32 Add(in int32 x, in int32 y);
&#160;&#160;&#160;&#160;consumed method float Multiply(in float x, in float y);
&#160;&#160;}

object Object : IObject;
}</code></pre>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <p>A provided method member of a distributed object can be called either synchronously or asynchronously via the SIL Adapter. A synchronous call blocks until it returns. An asynchronous call does not block and instead calls the passed-in callback function on return.</p>
                            <p>The <span class="bold">Call()</span> method is used to call a provided method synchronously. The call operator is overloaded as an alternative for <span class="bold">Call()</span>. The signature of <span class="bold">Call()</span> and the call operator matches the signature of the method member from the vCDL file. The arguments for <span class="bold">out</span> and <span class="bold">inout</span> parameters may have been modified accordingly after the call.</p>
                            <p>For the asynchronous method call the method <span class="bold">CallAsync()</span> exists. This must be passed the arguments for all <span class="bold">in</span> and <span class="bold">inout</span> parameters as well as a callback function. The callback function is called on return and provides the return value as well as values for all <span class="bold">out</span> and <span class="bold">inout</span> parameter. The values for <span class="bold">inout</span> parameters are modified copies of the original values passed at the time of the call.</p>
                            <div>
                                <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                    <col class="TableStyle-vTableSymbol-Column-Column1" />
                                    <col class="TableStyle-vTableSymbol-Column-Column2" />
                                    <tbody>
                                        <tr>
                                            <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                <p class="Table">
                                                    <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                </p>
                                            </td>
                                            <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                <p class="TableSymbolHead">C++ Example: Calling provided methods via SIL Adapter</p><pre xml:space="preserve"><code class="language-cpp">// Synchronous call - alternatives
auto result = Namespace::Object.Add.Call(1, 2);
auto result = Namespace::Object.Add(1, 2);

// Asynchronous call
Namespace::Object.Add.CallAsync(1, 2, [](int32 returnValue) {
&#160;&#160;std::cout &lt;&lt; "Add returned with " &lt;&lt; returnValue &lt;&lt; std::endl;
});</code></pre>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <p>In the case of a consumed method member, the C++ application must provide the implementation. This is done by setting the appropriate <span class="bold">SetCallHandler()</span> method on the method member.</p>
                            <div>
                                <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                    <col class="TableStyle-vTableSymbol-Column-Column1" />
                                    <col class="TableStyle-vTableSymbol-Column-Column2" />
                                    <tbody>
                                        <tr>
                                            <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                <p class="Table">
                                                    <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                </p>
                                            </td>
                                            <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                <p class="TableSymbolHead">C++ Example: Implementation of consumed methods</p><pre xml:space="preserve"><code class="language-cpp">Namespace::Object.Multiply.SetCallHandler ([](float x, float y) {
&#160;&#160;return x * y;
});</code></pre>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <p>The callback function, which is executed when an asynchronous method call returns or when a consumed method member is implemented, takes place in a separate context. Access to the C++ application must be synchronized accordingly (see <a href="SILTechnicalDetails.htm#BMConcurrencyInSoftwareSUT">Concurrency in Software SUT</a>).</p>
                        </div>
                        <div>
                            <h2 class="SectionSub">Event Member</h2>
                            <p>Event members behave like data members for a data type not equal to <span class="bold">Void</span> and have the same API. Using the <span class="bold">SetValue</span> or the assignment operator overload, the member value can be set and thus the event can be triggered. With the <span class="bold">GetValue</span> method or the operator overload for the implicit type conversion the last event value can be read. A registration for the event or for a value update or change of the member value is done by the methods <span class="bold">RegisterOnUpdateHandler</span> and <span class="bold">RegisterOnChangeHandler</span>.</p>
                            <div>
                                <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                    <col class="TableStyle-vTableSymbol-Column-Column1" />
                                    <col class="TableStyle-vTableSymbol-Column-Column2" />
                                    <tbody>
                                        <tr>
                                            <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                <p class="Table">
                                                    <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                </p>
                                            </td>
                                            <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                <p class="TableSymbolHead">vCDL Example: Event member with non-void data type</p><pre xml:space="preserve"><code class="language-cpp">version 1.2;

namespace Namespace
{
&#160;&#160;[Binding="SilKit"]
&#160;&#160;interface IObject
&#160;&#160;{
&#160;&#160;&#160;&#160;consumed event float FloatEvent;
&#160;&#160;&#160;&#160;provided event string StringEvent;
}

object Object : IObject;
}</code></pre>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <div>
                                <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                    <col class="TableStyle-vTableSymbol-Column-Column1" />
                                    <col class="TableStyle-vTableSymbol-Column-Column2" />
                                    <tbody>
                                        <tr>
                                            <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                <p class="Table">
                                                    <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                </p>
                                            </td>
                                            <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                <p class="TableSymbolHead">C++ Example: Event member with non-void data type</p><pre xml:space="preserve"><code class="language-cpp">// Write event value – will trigger event (alternatives)
Namespace::Object.FloatEvent = 1.0f;
Namespace::Object.FloatEvent.SetValue(1.0f);

// Read last event value (alternatives)
std::string value = Namespace::Object.StringEvent.GetValue();
std::string value2 = Namespace::Object.StringEvent;

// Register for event triggered by CANoe.
// Is called when the new value differs from the one before.
Namespace::Object.StringEvent.RegisterOnChangeHandler([]() {
std::cout &lt;&lt; "New event value: " &lt;&lt; Namespace::Object.StringEvent.GetValue() &lt;&lt; std::endl;
});

// Is always called, even if the new event value is the same as the one before.
Namespace::Object.StringEvent.RegisterOnUpdateHandler([]() {
std::cout &lt;&lt; "Updated event value: " &lt;&lt; Namespace::Object.StringEvent.GetValue() &lt;&lt; std::endl;
});</code></pre>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <p>In contrast to data members, event members additionally allow data type <span class="bold">Void</span>.</p>
                            <div>
                                <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                    <col class="TableStyle-vTableSymbol-Column-Column1" />
                                    <col class="TableStyle-vTableSymbol-Column-Column2" />
                                    <tbody>
                                        <tr>
                                            <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                <p class="Table">
                                                    <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                </p>
                                            </td>
                                            <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                <p class="TableSymbolHead">vCDL Example:  Event member with data type Void</p><pre xml:space="preserve"><code class="language-cpp">version 1.2;

namespace Namespace
{
&#160;&#160;[Binding="SilKit"]
&#160;&#160;interface IObject
&#160;&#160;{
&#160;&#160;&#160;&#160;consumed event void ConsumedVoidEvent;
&#160;&#160;&#160;&#160;provided event void ProvidedVoidEvent;
}

object Object : IObject;
}</code></pre>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <p>No reading or writing of the value is possible on an event member with the data type <span class="bold">Void</span>. Instead, a consumed event member is triggered by calling the <span class="bold">Trigger</span> method. A registration on the event is done by the method <span class="bold">RegisterOnUpdateHandler</span>.</p>
                            <div>
                                <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                    <col class="TableStyle-vTableSymbol-Column-Column1" />
                                    <col class="TableStyle-vTableSymbol-Column-Column2" />
                                    <tbody>
                                        <tr>
                                            <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                <p class="Table">
                                                    <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                </p>
                                            </td>
                                            <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                <p class="TableSymbolHead">C++ Example: Event member with data type Void</p><pre xml:space="preserve"><code class="language-cpp">// Register for event – the event is triggered by CANoe
Namespace::Object.ProvidedVoidEvent.RegisterOnUpdateHandler([]() {
std::cout &lt;&lt; “Namespace::Object.ProvidedVoidEvent Triggered” &lt;&lt; std::endl;
});

// Trigger event in SUT – Will be received by CANoe
Namespace::Object.ConsumedVoidEvent.Trigger();</code></pre>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div>
                            <h2 class="SectionSub">Field Member</h2>
                            <p>A field member is a combination of two method members (<span class="bold">Getter</span> and <span class="bold">Setter</span> access method) and an event member (<span class="bold">Notification</span>). The following example contains an interface with two field members that provide a <span class="bold">Getter</span>, <span class="bold">Setter</span> and <span class="bold">Notification</span>.</p>
                            <div>
                                <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                    <col class="TableStyle-vTableSymbol-Column-Column1" />
                                    <col class="TableStyle-vTableSymbol-Column-Column2" />
                                    <tbody>
                                        <tr>
                                            <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                <p class="Table">
                                                    <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                </p>
                                            </td>
                                            <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                <p class="TableSymbolHead">vCDL Example: Field Member</p><pre xml:space="preserve"><code class="language-cpp">version 1.2;

namespace Namespace
{
&#160;&#160;[Binding="SilKit"]
&#160;&#160;interface IObject
&#160;&#160;{
&#160;&#160;&#160;&#160;consumed field float FloatField { get; set; notify; }
&#160;&#160;&#160;&#160;provided field int64 IntField { get; set; notify; }
}

object Object : IObject;
}</code></pre>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <p>The availability of the <span class="bold">Notification</span> only changes the internal send behavior of the field member and not the API. For the technical details and how field members behave in a Software SUT (regardless of the SIL Adapter programming language), see the section <a href="SILTechnicalDetails.htm#BMValueChangesUpdatesFieldMember">Value Changes and Updates for Field Members</a>.</p>
                            <p>Regardless of whether the field member is consumed or provided, the SIL Adapter provides read access to the field member's local value and notification if it changes. Reading the local value is possible by calling the method <span class="bold">GetValue</span>. With the help of the methods <span class="bold">RegisterOnUpdateHandler</span> or <span class="bold">RegisterOnChangeHandler</span> it is possible to register for a notification if the local value of the field member changes.</p>
                            <div>
                                <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                    <col class="TableStyle-vTableSymbol-Column-Column1" />
                                    <col class="TableStyle-vTableSymbol-Column-Column2" />
                                    <tbody>
                                        <tr>
                                            <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                <p class="Table">
                                                    <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                </p>
                                            </td>
                                            <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                <p class="TableSymbolHead">C++ Example: Field Member</p><pre xml:space="preserve"><code class="language-cpp">// Read local value
int64_t localValue = Namespace::Object.IntField.GetValue();

// Is called when the new value differs from the one before.
Namespace::Object.IntField.RegisterOnChangeHandler([]() {
std::cout &lt;&lt; "New field value: " &lt;&lt; Namespace::Object.IntField.GetValue() &lt;&lt; std::endl;
});

// Is always called, even if the new event value is the same as the one before.
Namespace::Object.IntEvent.RegisterOnUpdateHandler([]() {
std::cout &lt;&lt; "Updated field value: " &lt;&lt; Namespace::Object.IntField.GetValue() &lt;&lt; std::endl;
});</code></pre>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <p>In the case of a consumed field member, the SIL Adapter can be used to write directly to the local value. This is possible via the method <span class="bold">SetValue</span>:</p>
                            <div>
                                <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                    <col class="TableStyle-vTableSymbol-Column-Column1" />
                                    <col class="TableStyle-vTableSymbol-Column-Column2" />
                                    <tbody>
                                        <tr>
                                            <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                <p class="Table">
                                                    <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                </p>
                                            </td>
                                            <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                <p class="TableSymbolHead">C++ Example: Writing Field Member Values</p><pre xml:space="preserve"><code class="language-cpp">// Write local value
Namespace::Object.FloatField.SetValue(1.0f);</code></pre>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <p>If the keywords <span class="CodeKeyword">get</span> and <span class="CodeKeyword">set</span> were used when declaring the field member, a <span class="bold">Getter</span> and <span class="bold">Setter</span> are available. Both behave initially like method members (see above). With a provided field member, <span class="bold">Getter</span>/<span class="bold">Setter</span> can be called synchronously or asynchronously. The only special feature of the <span class="bold">Getter</span> and <span class="bold">Setter</span> for a provided field member is that the local value of the caller is automatically updated on return (see <a href="SILTechnicalDetails.htm#BMValueChangesUpdatesFieldMember">Value changes and updates for field members</a>).</p>
                            <div>
                                <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                    <col class="TableStyle-vTableSymbol-Column-Column1" />
                                    <col class="TableStyle-vTableSymbol-Column-Column2" />
                                    <tbody>
                                        <tr>
                                            <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                <p class="Table">
                                                    <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                </p>
                                            </td>
                                            <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                <p class="TableSymbolHead">C++ Example: Getter and Setter of a Provided Field Members</p><pre xml:space="preserve"><code class="language-cpp">// Getter – only available if "get" is specified in vCDL file for the field
// Synchronous call
int64_t remoteValue = Namespace::Object.IntField.Get();

// Asynchronous call
Namespace::Object.IntField.Get.CallAsync([](int64_t returnValue) {
&#160;&#160;std::cout &lt;&lt; "Getter returned with value " &lt;&lt; returnValue &lt;&lt; std::endl;
});

// Setter – only available if "set" is specified in vCDL file for the field.
// Synchronous call
int64_t newRemoteValue = Namespace::Object.IntField.Set(5);

// Asynchronous call
Namespace::Object.IntField.Set.CallAsync(5, [](int64_t returnValue) {
&#160;&#160;std::cout &lt;&lt; "Setter returned with new field value " &lt;&lt; returnValue &lt;&lt; std::endl;
});</code></pre>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <p>As for other method members, the implementation for the <span class="bold">Getter</span> and <span class="bold">Setter</span> can be set with the <span class="bold">SetCallHandler</span> method. Unlike normal method members, the <span class="bold">Getter</span> and <span class="bold">Setter</span> have a predefined implementation that has the default behavior of a <span class="bold">Setter</span>/<span class="bold">Getter</span>. This default implementation is automatically set when the SIL Adapter is initialized. An explicit setting is possible by calling <span class="bold">SetCallHandler</span> with the value <span class="CodeKeyword">nullptr</span>. The behavior of the default implementation is shown in the following example:</p>
                            <div>
                                <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                    <col class="TableStyle-vTableSymbol-Column-Column1" />
                                    <col class="TableStyle-vTableSymbol-Column-Column2" />
                                    <tbody>
                                        <tr>
                                            <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                                <p class="Table">
                                                    <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                                </p>
                                            </td>
                                            <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                                <p class="TableSymbolHead">C++ Example: Consumed Field Member</p><pre xml:space="preserve"><code class="language-cpp">// User defined getter – only available if “get” is specified in vCDL file for the field
Namespace::Object.FloatField.Get.SetCallHandler([]() {
Return Namespace::Object.FloatField;
});

// Default getter – same implementation as above
Namespace::Object.FloatField.Get.SetCallHandler(nullptr);

// User defined setter – only available if “set” is specified in vCDL file for the field
Namespace::Object.FloatField.Set.SetCallHandler([](float newValue) {
Namespace::Object.FloatField.SetValue(newValue);
return Namespace::Object.FloatField.GetValue();
});

// Default Setter – same implementation as above
Namespace::Object.FloatField.Set.SetCallHandler(nullptr);</code></pre>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <p>The signature of the <span class="bold">Setter</span> can be influenced by a vCDL attribute of the field. The <span class="bold">Setter</span> is optionally available with or without a return value through the <span class="bold">setterHasReturn</span> attribute.</p>
                        </div>
                        <h2 class="SectionSub">Constants</h2>
                        <p>Constants are global variables that are defined independently of distributed objects and can only be accessed in read-only mode. Constants can contain both simple and complex data types.</p>
                        <div>
                            <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                <col class="TableStyle-vTableSymbol-Column-Column1" />
                                <col class="TableStyle-vTableSymbol-Column-Column2" />
                                <tbody>
                                    <tr>
                                        <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                            <p class="Table">
                                                <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                            </p>
                                        </td>
                                        <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                            <p class="TableSymbolHead">vCDL Example: Constants</p><pre xml:space="preserve"><code class="language-cpp">version 1.2;

namespace Namespace
{
&#160;&#160;const string VersionString = "1.0.11";

&#160;&#160;const array&lt;int32, 3&gt; SomeComplexConstant = {1, 2, 3};
&#160;&#160;…
}</code></pre>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <div>
                            <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                                <col class="TableStyle-vTableSymbol-Column-Column1" />
                                <col class="TableStyle-vTableSymbol-Column-Column2" />
                                <tbody>
                                    <tr>
                                        <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                            <p class="Table">
                                                <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                            </p>
                                        </td>
                                        <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                            <p class="TableSymbolHead">C++ Example: Accessing constants</p><pre><code class="language-cpp">std::cout &lt;&lt; "Version: " &lt;&lt; Namespace::VersionString &lt;&lt; std::endl;</code></pre>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <p class="LinkList">&#160;</p>
            </div>
        </div>
        <div class="Footer">
            <div class="FooterWhite">
                <table class="FooterWhite" style="border-collapse: collapse;margin-left: auto;margin-right: auto;">
                    <col style="width: 70px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col style="width: 16px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col />
                    <tbody>
                        <tr>
                            <td>
                                <div class="buttons popup-container clearfix topicToolbarProxy topicToolbarProxyFooter _Skins_HTML5TopicToolbar mc-component nocontent">
                                    <div class="button-group-container-left">
                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                            <div>
                                                <div role="img" class="button-icon-wrapper" aria-label="Expand all">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                        <button class="button needs-pie remove-highlight-button" title="Remove Highlights">
                                            <div>
                                                <div role="img" class="button-icon-wrapper">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <p class="vec_BuildInfo"><a href="../../../Shared/HowToUseOnlineHelp.htm" title="Tips for using the help" alt="Tips for using the help"><img src="../../../../Resources/vImages/vBackstage/vHelpInfo.png" /></a>
                                </p>
                            </td>
                            <td>
                                <p class="vec_BuildInfo" style="text-align: right;"><span class="mc-variable Vector.BuildTime variable">2023-09-26T19:49:32</span>
                                </p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <table style="width: 100%;border-collapse: separate;border-spacing: 3px 0px;margin-left: auto;margin-right: auto;caption-side: top;">
                <col />
                <col />
                <col />
                <col data-mc-conditions="vConditions.HTML5Link" />
                <tbody>
                    <tr>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;">
                            <p class="vec_Footer">©&#160;Vector Informatik GmbH</p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;text-align: right;">
                            <p class="vec_FooterBold">
                                <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded,vConditions.TestDataEditorExcluded">CANoe</MadCap:conditionalText> Version <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded">17 SP3</MadCap:conditionalText></p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="../../../Shared/ContactCopyrightLicense.htm" class="vec_Footer MCXref xref xrefvec_Footer">Contact/Copyright/License</a>
                            </p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="https://www.vector.com/int/en/company/get-info/privacy-policy/" target="_blank" class="vec_Footer">Data Privacy Notice</a>
                            </p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>
</html>