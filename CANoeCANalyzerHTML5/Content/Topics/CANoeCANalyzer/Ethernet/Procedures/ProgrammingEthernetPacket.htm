<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="" data-mc-search-type="Stem" data-mc-help-system-file-name="CANoeCANalyzer.xml" data-mc-path-to-help-system="../../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../../../Skins/Favicons/browserconfig.xml" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../../Skins/Favicons/favicon-16x16.png" /><title>Access on Ethernet Packets in CAPL and .NET</title>
        <link href="../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Resources/Stylesheets/vTableMasterPageHeader.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../../Resources/Stylesheets/vStylesheet.css" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.expand-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.remove-highlight-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.collapse-all-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.needs-pie
{
	behavior: url('../../../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../../../Resources/Stylesheets/vTableSymbol.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../../../Resources/Stylesheets/vTableMiniTOC.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../../../Skins/Favicons/favicon-16x16.png" />
        <script src="../../../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapGlobal.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapDom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapUtilities.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapXhr.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTextEffects.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSlideshow.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMessageBus.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMessageBus.CrossFrame.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapDefault.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMediaQueries.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAccessibility.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapHelpSystem.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAliasFile.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTopicFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapFeedbackHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSkinHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.MiniToc.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapToc.SideMenu.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapIndex.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapGlossary.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapParser.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSearch.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapNavigateTopics.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapLms.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapELearning.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTopic.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapFeedback.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapMicroContentComponent.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapSearchHelper.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTopicElements.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapTriPane.js" type="text/javascript" defer="defer">
        </script>
        <script type="text/jscript" src="../../../../Resources/vScripts/SyntaxHighlighting.js">
        </script>
        <script type="text/jscript" src="../../../../Resources/vScripts/TabSwitch.js">
        </script>
        <script type="text/javascript" src="../../../../Resources/vScripts/Vector.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../../CANoeCANalyzer.htm#Topics/CANoeCANalyzer/Ethernet/Procedures/ProgrammingEthernetPacket.htm">Open topic with navigation</a>
        </p>
        <div class="Body">
            <div role="main" id="mc-main-content">
                <p class="StructurePath"><a href="../Ethernet.htm" class="StructurePath">Ethernet </a> » <a href="StartOverview.htm" class="StructurePath">Application scenarios</a> » <span class="mc-variable System.Title variable">Access on Ethernet Packets in CAPL and .NET</span></p>
                <h1><a name="kanchor5470"></a><span class="mc-variable System.Title variable">Access on Ethernet Packets in CAPL and .NET</span><a name="aanchor7226"></a>
                    <MadCap:concept term="EthernetProcedures" />
                </h1>
                <p class="MenuPath">&#160;</p>
                <p class="AutoSearchFilterConcepts"><a name="aanchor7227"></a>
                    <MadCap:concept term="SFCore" />
                </p>
                <p><a name="Shortcuts" id="Shortcuts"></a><a targets="TOGContents" href="javascript:void(0)" class="MCToggler MCTogglerHead MCTogglerHotSpot MCToggler_Open toggler MCTogglerHotSpot_ MCHotSpotImage" data-mc-targets="TOGContents"><img class="MCToggler_Image_Icon" src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Table of Contents</a>
                </p>
                <div style="display: none;" data-mc-target-name="TOGContents">
                    <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableMiniTOC.css');" class="TableStyle-vTableMiniTOC" cellspacing="2">
                        <col class="TableStyle-vTableMiniTOC-Column-Column1" />
                        <tbody>
                            <tr class="TableStyle-vTableMiniTOC-Body-Body1">
                                <td style="background-color: #f0f5f5;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;" class="TableStyle-vTableMiniTOC-BodyD-Column1-Body1">
                                    <p class="TableTextSmall"><a href="#General" class="Tab">General</a>
                                    </p>
                                </td>
                            </tr>
                            <tr class="TableStyle-vTableMiniTOC-Body-Body1">
                                <td style="background-color: #f0f5f5;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;" class="TableStyle-vTableMiniTOC-BodyD-Column1-Body1">
                                    <p class="TableTextSmall"><a href="#EthernetPacket" class="Tab">Ethernet packets</a>
                                    </p>
                                </td>
                            </tr>
                            <tr class="TableStyle-vTableMiniTOC-Body-Body1">
                                <td style="background-color: #f0f5f5;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;" class="TableStyle-vTableMiniTOC-BodyD-Column1-Body1"><a href="#Protocols" class="Tab">Protocols</a>
                                </td>
                            </tr>
                            <tr class="TableStyle-vTableMiniTOC-Body-Body1">
                                <td style="background-color: #f0f5f5;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;" class="TableStyle-vTableMiniTOC-BodyD-Column1-Body1"><a href="#Initialization" class="Tab">Initialization</a>
                                </td>
                            </tr>
                            <tr class="TableStyle-vTableMiniTOC-Body-Body1">
                                <td style="background-color: #f0f5f5;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;" class="TableStyle-vTableMiniTOC-BodyD-Column1-Body1"><a href="#ProtocolFields" class="Tab">Protocol fields</a>
                                </td>
                            </tr>
                            <tr class="TableStyle-vTableMiniTOC-Body-Body1">
                                <td style="background-color: #f0f5f5;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;" class="TableStyle-vTableMiniTOC-BodyA-Column1-Body1"><a href="#RawDataAccess" class="Tab">Access to raw data</a>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionMain"><a name="General" id="General"></a>General <a href="#Shortcuts" class="TopOfPage">[▲ back]</a></h2>
                <p>Within CAPL and .NET programs, you can access the individual Ethernet packets and their protocol information.</p>
                <p>You can e.g. analyze whether a certain protocol is available in a packet, which is the value of a certain protocol field or which raw data are included in the packet.</p>
                <p>You can modify packets, for example, by changing the values of protocol fields, manipulating raw data, adding protocols or rebuilding the entire protocol stack of the packet.</p>
                <p>For stimulation, you can generate completely new packets, fill them with the desired protocols and data and send them afterwards.</p>
                <ul>
                    <li>
                        <p class="ListItem"><a href="../../../CAPLFunctions/IP/Objects/CAPLfunctionEthernetPacket.htm">Functional overview for Ethernet packets (CAPL)</a>
                        </p>
                    </li>
                    <li data-mc-conditions="vConditions.HTML5Link">
                        <p class="ListItem" data-mc-conditions="vConditions.CANalyzerExclude"><a href="../../../../../Subsystems/VectorCANoeNETAPI/Content/html/92893932-48d0-d90c-460a-2ea471cc1434.htm">Functional overview for Ethernet packets (.NET)</a>
                        </p>
                    </li>
                </ul>
                <h2 class="SectionMain"><a name="EthernetPacket" id="EthernetPacket"></a>Ethernet Packets <a href="#Shortcuts" class="TopOfPage">[▲ back]</a></h2>
                <p>Ethernet packets are available as data types in <a href="../../../CAPLFunctions/IP/Objects/CAPLfunctionEthernetPacket.htm">CAPL</a> <MadCap:conditionalText data-mc-conditions="vConditions.CANalyzerExclude">and <a href="../../../../../Subsystems/VectorCANoeNETAPI/Content/html/92893932-48d0-d90c-460a-2ea471cc1434.htm" data-mc-conditions="vConditions.HTML5Link">.NET</a> </MadCap:conditionalText>and allow you the access to different properties of Ethernet packets.</p>
                <p>You can read and modify the MAC address of the receiver, the MAC address of the sender, the Ethertype, possibly available VLAN tags as well as the raw payload.</p>
                <p>The access to individual or several bytes of the payload in an Ethernet packet is possible in</p>
                <ul>
                    <li>CAPL with the <a href="../../../CAPLFunctions/IP/Selectors/CAPLfunctionProtocolByte.htm">methods</a> <span class="SourceCode">byte(x)</span>, <span class="SourceCode">char(x)</span>, <span class="SourceCode">word(x)</span>, <span class="SourceCode">int(x)</span>, <span class="SourceCode">dword(x)</span>, <span class="SourceCode">long(x)</span>, <span class="SourceCode">qword(x)</span> and <span class="SourceCode">int64(x)</span></li>
                    <li>.NET with the indexers <span class="SourceCode">Byte[i]</span>, <span class="SourceCode">SByte[i]</span>, <span class="SourceCode">UInt16[i]</span>, <span class="SourceCode">Int16[i]</span>, <span class="SourceCode">UInt32[i]</span>, <span class="SourceCode">Int32[i]</span>, <span class="SourceCode">UInt64[i]</span> and <span class="SourceCode">Int64[i]</span></li>
                </ul>
                <p>You can access to the entire payload as byte array in</p>
                <ul>
                    <li>CAPL with the methods <a href="../../../CAPLFunctions/IP/Methods/CAPLfunctionGetData.htm" class="SourceCode">GetData</a> and <a href="../../../CAPLFunctions/IP/Methods/CAPLfunctionSetData.htm" class="SourceCode">SetData</a></li>
                    <li>.NET with the methods <span class="SourceCode">GetRawDataCopy(...)</span> and <span class="SourceCode">SetRawData(...)</span></li>
                </ul>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../../Resources/vImages/vInfo.png" style="width: 48px;height: 45px;" title="Note" alt="Note" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Note</p>
                                    <p class="Table">Due to performance reasons, it is recommended to realize the access to the raw payload within the .NET program code using indexers, if possible (instead of <span class="SourceCode">GetRawDataCopy(...)</span> and <span class="SourceCode">SetRawData(...)</span>).</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <p>You can query hardware- and simulation-based properties, such as the application channel, the hardware channel (in channel-based mode) or the hardware port (in <a href="../EthernetPortBasedNetworkAccess.htm">network-based mode</a>), the sending direction and the origin (hardware or simulation).</p>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Example</p>
                                    <p class="Table">In this example, an Ethernet packet is generated and filled with data. Afterwards the packet is sent into the network.</p>
                                    <table style="width: 100%;">
                                        <col style="width: 90px;" />
                                        <col />
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <p class="TableBold">CAPL</p>
                                                </td>
                                                <td>
                                                    <p class="TableSourceCode">ethernetPacket pkt;<br />int i;<br /><br />pkt.msgChannel  = 1;<br />pkt.source      = EthGetMacAddressAsNumber( "02:00:00:00:00:01" );<br />pkt.destination = EthGetMacAddressAsNumber( "FF:FF:FF:FF:FF:FF" );<br />pkt.Length      = 100;<br />pkt.type        = 0xF123;<br />pkt.SetVlanId(1);<br />pkt.SetVlanPriority(2);<br />pkt.SetVlanId(1, 2);<br /><br />for( i = 0; i &lt; pkt.Length; i++ )<br />{<br />&#160;&#160;pkt.Byte(i) = i &amp; 0xFF;<br />}<br /><br />output( pkt );</p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <p class="TableBold">C#</p>
                                                </td>
                                                <td>
                                                    <p class="TableSourceCode">using MAC = System.Net.NetworkInformation.PhysicalAddress;<br /><br />EthernetPacket pkt = new EthernetPacket();<br /><br />pkt.Channel = 1;<br />pkt.SourceAddress = MAC.Parse("02-00-00-00-00-01");<br />pkt.DestinationAddress = MAC.Parse("FF-FF-FF-FF-FF-FF");<br />pkt.RawDataLength = 100;<br />pkt.Ethertype = 0xF123;<br />pkt.VlanTags[0].VlanId = 1;<br />pkt.VlanTags[0].Priority = 2;<br />pkt.VlanTags[1].VlanId = 2;<br /><br />for (int i = 0; i &lt; pkt.RawDataLength; i++)<br />{<br />&#160;&#160;pkt.Byte[i] = (byte)i;<br />}<br /><br />pkt.Send();</p>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionMain"><a name="Protocols" id="Protocols"></a>Protocols <a href="#Shortcuts" class="TopOfPage">[▲ back]</a></h2>
                <p><span class="Product">CANoe</span> supports a large number of protocols used in the automotive industry. The complete list of the supported protocols can be found in the <a href="../Protocols/Protocol.htm">Protocol Overview</a>.</p>
                <p>In the program code, the access to a protocol of an Ethernet packet can be realized via the protocol designator. On the packet, there is a corresponding selector in CAPL and a property in .NET.</p>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Example</p>
                                    <p class="Table">In this example, a counter is implemented that records the number of Ethernet packets observed in the network with an available ARP protocol.</p>
                                    <table style="width: 100%;">
                                        <col style="width: 90px;" />
                                        <col />
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <p class="TableBold">CAPL</p>
                                                </td>
                                                <td>
                                                    <p class="TableSourceCode">variables<br />{<br />&#160;&#160;int arpCount = 0;<br />}<br /><br />on ethernetPacket *<br />{<br />&#160;&#160;if ( this.arp.IsAvailable() )<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;arpCount++;<br />&#160;&#160;}<br />}</p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <p class="TableBold">C#</p>
                                                </td>
                                                <td>
                                                    <p class="TableSourceCode">int arpCounter = 0;<br />[OnEthernetPacket]<br />public void CountArpPackets(EthernetPacket pkt)<br />{<br />&#160;&#160;if (pkt.ARP.IsAvailable)<br />&#160;&#160;{<br />&#160;&#160;&#160;&#160;arpCounter++;<br />&#160;&#160;}<br />}</p>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../../Resources/vImages/vInfo.png" style="width: 48px;height: 45px;" title="Note" alt="Note" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Note</p>
                                    <p>While the case sensitivity in CAPL is not essential for data types, methods and selectors, some .NET languages (such as C#) are case-sensitive. On the help pages, protocol and field designators are always shown with their correct spelling which is compatible with all languages.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionMain"><a name="Initialization" id="Initialization"></a>Initialization <a href="#Shortcuts" class="TopOfPage">[▲ back]</a></h2>
                <p>You can add protocols to an Ethernet packet with <a href="../../../CAPLFunctions/IP/Methods/CAPLfunctionProtocolInit.htm" class="SourceCode">ethernetPacket.&lt;protocol&gt;.Init</a>. During the initialization, the protocol header is filled with initial values which are listed on the help page of the respective <a href="../Protocols/Protocol.htm">protocol</a> in the <span class="bold">Header Format</span> section.</p>
                <p>Protocols of higher-level layers require an already available protocol stack of the layers located below. If a required protocol of a layer located below is not yet available in the packet, it is also initialized. On the help page of a <a href="../Protocols/Protocol.htm">protocol</a>, you can see in the <span class="bold">Protocol Dependencies</span> section the other protocols on which the protocol depends.</p>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../../Resources/vImages/vInfo.png" style="width: 48px;height: 45px;" title="Note" alt="Note" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Note</p>
                                    <p>Protocols, such as <a href="../Protocols/ProtocolTCP.htm">TCP</a>, <a href="../Protocols/ProtocolUDP.htm">UDP</a> or <a href="../Protocols/ProtocolHTTP.htm">HTTP</a> which can either be used with <a href="../Protocols/ProtocolIPv4.htm">IPv4</a> or <a href="../Protocols/ProtocolIPv6.htm">IPv6</a>, are initialized by default with <a href="../Protocols/ProtocolIPv4.htm">IPv4</a>.</p>
                                    <p>Specific protocols, such as <a href="../Protocols/ProtocolDHCPv6.htm">DHCPv6</a> or <a href="../Protocols/ProtocolICMPv6.htm">ICMPv6</a>, are initialized by default with <a href="../Protocols/ProtocolIPv6.htm">IPv6</a>.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <p>In many cases, certain protocol fields from the layer located below are filled with specific initial values, such as the <span class="bold">Ethertype</span> of the Ethernet packet, the <span class="bold">Protocol</span> field in the IPv4/IPv6 header or the <span class="bold">SourcePort</span> and <span class="bold">DestinationPort</span> fields in the UDP or TCP header. On the help page of a <a href="../Protocols/Protocol.htm">protocol</a> in the <span class="bold">Programming</span> section, you can find the protocol fields of the layer located below for which initial values are set.</p>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../../Resources/vImages/vInfo.png" style="width: 48px;height: 45px;" title="Note" alt="Note" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Note</p>
                                    <p>Some protocols of higher-level layers are indicated by specific ports (TCP or UDP) such as <a href="../Protocols/ProtocolAUTOSARPDUMultiplexing.htm">AUTOSAR PDU Multiplexing</a>, <a href="../ILSomeIP/ILSomeIP.htm">SOME/IP</a>, <a href="../Protocols/ProtocolTLS.htm">TLS</a> or <a href="../Protocols/ProtocolDTLS.htm">DTLS</a>. </p>
                                    <p>To initialize (and interpret) such protocols, you have to configure the respective ports in the <a href="../../Ribbon/File/Options/BussystemsProtocols/BussystemsProtocolsBussystems.htm#ProtocolID" class="GUI">Options</a> dialog under <span class="bold">Protocol Identification</span>.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <p>All other protocols that have been available in the packet before are discarded during the initialization.</p>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Example 1</p>
                                    <p class="Table">In this example, a new Ethernet packet is created to which the UDP protocol with its default initialization is added and which is sent afterwards. During the initialization of the UDP protocol, the IPv4 protocol is automatically added to the packet.</p>
                                    <table style="width: 100%;">
                                        <col style="width: 90px;" />
                                        <col />
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <p class="TableBold">CAPL</p>
                                                </td>
                                                <td>
                                                    <p class="TableSourceCode">ethernetPacket pkt;<br /><br /><span class="CodeComment">// initialize packet with IPv4 and UDP protocols</span><br />pkt.udp.Init();<br /><br /><span class="CodeComment">// send Ethernet packet</span><br />output( pkt );</p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <p class="TableBold">C#</p>
                                                </td>
                                                <td>
                                                    <p class="TableSourceCode">EthernetPacket pkt = new EthernetPacket();<br /><br /><span class="CodeComment">// initialize packet with IPv4 and UDP protocols</span><br />pkt.UDP.Init();<br /><br /><span class="CodeComment">// send Ethernet packet</span><br />pkt.Send();</p>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Example 2</p>
                                    <p class="Table">In this example, a new packet is initialized and sent with the UDP protocol as shown in <span class="bold">Example 1</span>. Since in the packet on the internet layer, the IPv6 protocol that is compatible with UDP is already available, IPv4 is not initialized.</p>
                                    <table style="width: 100%;">
                                        <col style="width: 90px;" />
                                        <col />
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <p class="TableBold">CAPL</p>
                                                </td>
                                                <td>
                                                    <p class="TableSourceCode">ethernetPacket pkt;<br /><br /><span class="CodeComment">// initialize packet with IPv6 and UDP protocols</span><br />pkt.ipv6.Init();<br />pkt.udp.Init();<br /><br /><span class="CodeComment">// send Ethernet packet</span><br />output( pkt );</p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <p class="TableBold">C#</p>
                                                </td>
                                                <td>
                                                    <p class="TableSourceCode">EthernetPacket pkt = new EthernetPacket();<br /><br /><span class="CodeComment">// initialize packet with IPv6 and UDP protocols</span><br />pkt.IPv6.Init();<br />pkt.UDP.Init();<br /><br /><span class="CodeComment">// send Ethernet packet</span><br />pkt.Send();</p>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionMain"><a name="ProtocolFields" id="ProtocolFields"></a>Protocol Fields <a href="#Shortcuts" class="TopOfPage">[▲ back]</a></h2>
                <p>The access to protocol fields can be realized within the corresponding protocol via <a href="../../../CAPLFunctions/IP/Selectors/CAPLfunctionProtocolField.htm">selectors</a> (CAPL) or via properties (.NET). The value of a protocol field can both be read and written. In CAPL, the protocol field selector is used for direct access. In .NET, the access is realized via the <span class="bold">Value</span> property of the protocol field.</p>
                <p>Depending on the bit length and the interpretation of a protocol field, the access to its value is different. Besides primitive data types, also byte arrays, strings, IP addresses and MAC addresses are common formats of protocol fields.</p>
                <p>Some protocols contain optional structures which can be included in the respective packet or not (or even several times depending on the protocol). You can <a href="../../../CAPLFunctions/IP/Methods/CAPLfunctionProtocolOptionalStructureInit.htm">initialize</a> and <a href="../../../CAPLFunctions/IP/Methods/CAPLfunctionProtocolOptionalStructureClear.htm">remove</a> them and, as the case may be, they offer selectors/properties for their <a href="../../../CAPLFunctions/IP/Selectors/CAPLfunctionProtocolOptionalStructureField.htm">fields</a>.</p>
                <p>Protocol fields such as checksums and lengths whose values depend on the content of the packet can be set automatically by calling <a href="../../../CAPLFunctions/IP/Methods/CAPLfunctionCompletePacket.htm" class="SourceCode">CompletePacket</a>.</p>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Example</p>
                                    <p class="Table">In this example, a new packet is generated and sent with UDP and IPv4 and several protocol fields are filled with specific values.</p>
                                    <p class="Table">By this, two variants for the assignment of IP addresses are demonstrated:</p>
                                    <ul>
                                        <li>Direct parsing of an address from a string</li>
                                        <li>The setting of an endpoint using an object of the type <a href="../../../CAPLFunctions/IP/Objects/CAPLfunctionIPEndpoint.htm" class="SourceCode">ip_Endpoint</a> (CAPL) or the assignment via objects of the type System.Net.IPAddress and UInt16 (.NET)</li>
                                    </ul>
                                    <table style="width: 100%;">
                                        <col style="width: 90px;" />
                                        <col />
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <p class="TableBold">CAPL</p>
                                                </td>
                                                <td>
                                                    <p class="TableSourceCode">ip_Endpoint 255.255.255.255:40002 broadcastEp;<br />ethernetPacket pkt;<br /><br /><span class="CodeComment">// initialize packet with IPv4 and UDP protocols</span><br />pkt.udp.Init();<br /><br /><span class="CodeComment">// add optionTimestamp, resize and calculate checksum of IPv4</span><br />pkt.ipv4.optionTimeStamp.Init();<br />pkt.CompletePacket();<br /><br /><span class="CodeComment">// set IPv4 addresses and UDP ports</span><br />pkt.ipv4.source.ParseAddress( "192.168.1.1" );<br />pkt.udp.source = 40001;<br />pkt.SetDestinationIPEndpoint( broadcastEp );<br /><br /><span class="CodeComment">// set UDP payload</span><br />pkt.udp.SetData( 0, "Hello world", 11 );<br /><br /><span class="CodeComment">// calculate UDP and IPv4 checksum and send Ethernet packet</span><br />pkt.CompletePacket();<br />output( pkt );</p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <p class="TableBold">C#</p>
                                                </td>
                                                <td>
                                                    <p class="TableSourceCode">using System.Net; <span class="CodeComment">// for type IPAddress</span><br />EthernetPacket pkt = new EthernetPacket();<br /><br /><span class="CodeComment">// initialize packet with IPv4 and UDP protocols</span><br />pkt.UDP.Init();<br /><br /><span class="CodeComment">// add optionTimestamp, resize and calculate checksum of IPv4</span><br />pkt.IPv4.OptionTimeStamp.Init();<br />pkt.CompletePacket();<br /><br /><span class="CodeComment">// set IPv4 addresses and UDP ports</span><br />pkt.IPv4.Source.ParseAddress("192.168.1.1");<br />pkt.UDP.Source.Value = 40001;<br />pkt.IPv4.Destination.Value = IPAddress.Broadcast;<br />pkt.UDP.Destination.Value = 40002;<br /><br /><span class="CodeComment">// set UDP payload</span><br />pkt.UDP.SetRawData(System.Text.Encoding.ASCII.GetBytes("Hello world"));<br /><br /><span class="CodeComment">// calculate UDP and IPv4 checksum and send Ethernet packet</span><br />pkt.CompletePacket();<br />pkt.Send();</p>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2 class="SectionMain"><a name="RawDataAccess" id="RawDataAccess"></a>Access to Raw Data <a href="#Shortcuts" class="TopOfPage">[▲ back]</a></h2>
                <p>It is possible in CAPL and .NET to access to individual data bytes of protocols in a targeted manner. During the generation of defective packets, for example, this can be useful for fault injection in order to write inadmissible values into a packet.</p>
                <p>For some protocols the raw protocol header can be read or written as byte array via the selector (CAPL) or the property (.NET) <span class="bold">Header</span>. Furthermore, many protocols allow the access to the payload as byte array with the methods <a href="../../../CAPLFunctions/IP/Methods/CAPLfunctionGetData.htm" class="SourceCode">GetData</a> and <a href="../../../CAPLFunctions/IP/Methods/CAPLfunctionSetData.htm" class="SourceCode">SetData</a> in CAPL or <span class="SourceCode">GetRawDataCopy(...)</span> and <span class="SourceCode">SetRawData(...)</span> in .NET.</p>
                <div>
                    <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/Stylesheets/vTableSymbol.css');" class="TableStyle-vTableSymbol" cellspacing="0">
                        <col class="TableStyle-vTableSymbol-Column-Column1" />
                        <col class="TableStyle-vTableSymbol-Column-Column2" />
                        <tbody>
                            <tr>
                                <td class="TableStyle-vTableSymbol-BodyB-Column1-">
                                    <p class="Table">
                                        <img src="../../../../Resources/vImages/vExample.png" style="width: 48px;height: 45px;" title="Example" alt="Example" />
                                    </p>
                                </td>
                                <td class="TableStyle-vTableSymbol-BodyA-Column2-">
                                    <p class="TableSymbolHead">Example</p>
                                    <p class="Table">In this example, a UDP packet is generated and filled with 10 bytes of payload. The bytes are directly set.</p>
                                    <table style="width: 100%;">
                                        <col style="width: 90px;" />
                                        <col />
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <p class="TableBold">CAPL</p>
                                                </td>
                                                <td>
                                                    <p class="TableSourceCode">ethernetPacket pkt;<br />word offset, length, i;<br /><br /><span class="CodeComment">// initialize packet with IPv4 and UDP protocols</span><br />pkt.udp.Init();<br />pkt.udp.ResizeData(10);<br /><br />offset = pkt.udp.byteOffset;<br />length = pkt.udp.byteLength;<br /><br />write( "Protocol UDP is at byte %d:%d", offset, length );<br /><br />for( i = 0; i &lt; length; i++ )<br />{<br />&#160;&#160;pkt.byte( offset+i ) = i;<br />}<br /><br /><span class="CodeComment">// calculate UDP and IPv4 checksum and send Ethernet packet</span><br />pkt.CompletePacket();<br />output( pkt );</p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <p class="TableBold">C#</p>
                                                </td>
                                                <td>
                                                    <p class="TableSourceCode">EthernetPacket pkt = new EthernetPacket();<br /><br /><span class="CodeComment">// initialize packet with IPv4 and UDP protocols</span><br />pkt.UDP.Init();<br />pkt.UDP.ResizeData(10);<br /><br />int offset = pkt.UDP.ByteOffset;<br />int length = pkt.UDP.ByteLength;<br /><br />Output.WriteLine("Protocol UDP is at byte {0}:{1}", offset, length);<br /><br />for (int i = 0; i &lt; length; i++)<br />{<br />&#160;&#160;pkt.UDP.Byte[i] = (byte)i;<br />}<br /><br /><span class="CodeComment">// calculate UDP and IPv4 checksum and send Ethernet packet</span><br />pkt.CompletePacket();<br />pkt.Send();</p>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <p class="LinkList">&#160;</p>
            </div>
        </div>
        <div class="Footer">
            <div class="FooterWhite">
                <table class="FooterWhite" style="border-collapse: collapse;margin-left: auto;margin-right: auto;">
                    <col style="width: 70px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col style="width: 16px;" data-mc-conditions="vConditions.HTML5Link" />
                    <col />
                    <tbody>
                        <tr>
                            <td>
                                <div class="buttons popup-container clearfix topicToolbarProxy topicToolbarProxyFooter _Skins_HTML5TopicToolbar mc-component nocontent">
                                    <div class="button-group-container-left">
                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                            <div>
                                                <div role="img" class="button-icon-wrapper" aria-label="Expand all">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                        <button class="button needs-pie remove-highlight-button" title="Remove Highlights">
                                            <div>
                                                <div role="img" class="button-icon-wrapper">
                                                    <div class="button-icon"> </div>
                                                </div>
                                            </div>
                                        </button>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <p class="vec_BuildInfo"><a href="../../../Shared/HowToUseOnlineHelp.htm" title="Tips for using the help" alt="Tips for using the help"><img src="../../../../Resources/vImages/vBackstage/vHelpInfo.png" /></a>
                                </p>
                            </td>
                            <td>
                                <p class="vec_BuildInfo" style="text-align: right;"><span class="mc-variable Vector.BuildTime variable">2023-09-26T19:49:32</span>
                                </p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <table style="width: 100%;border-collapse: separate;border-spacing: 3px 0px;margin-left: auto;margin-right: auto;caption-side: top;">
                <col />
                <col />
                <col />
                <col data-mc-conditions="vConditions.HTML5Link" />
                <tbody>
                    <tr>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;">
                            <p class="vec_Footer">©&#160;Vector Informatik GmbH</p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 5pt;text-align: right;">
                            <p class="vec_FooterBold">
                                <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded,vConditions.TestDataEditorExcluded">CANoe</MadCap:conditionalText> Version <MadCap:conditionalText data-mc-conditions="vConditions.vTESTstudioExcluded">17 SP3</MadCap:conditionalText></p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="../../../Shared/ContactCopyrightLicense.htm" class="vec_Footer MCXref xref xrefvec_Footer">Contact/Copyright/License</a>
                            </p>
                        </td>
                        <td style="background-color: #b70032;padding-left: 5pt;padding-right: 5pt;padding-top: 5pt;padding-bottom: 0pt;text-align: right;">
                            <p class="vec_Footer"><a href="https://www.vector.com/int/en/company/get-info/privacy-policy/" target="_blank" class="vec_Footer">Data Privacy Notice</a>
                            </p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>
</html>